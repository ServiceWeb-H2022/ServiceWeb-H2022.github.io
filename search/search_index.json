{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Services Web Hiver 2022 Horaire Lundi 10:15 - 12:05 Local C209 Vendredi 8:15 - 10:05 Local C205","title":"Accueil"},{"location":"#services-web","text":"Hiver 2022","title":"Services Web"},{"location":"#horaire","text":"Lundi 10:15 - 12:05 Local C209 Vendredi 8:15 - 10:05 Local C205","title":"Horaire"},{"location":"exercices/01_utilisation_api/","text":"Exercice 01 - Utilisation d\u2019un service web Points 1 \u00c0 l'aide de l'api disponible sur le site https://excuser.herokuapp.com/ . Pour chaque point je veux avoir l'url que vous avez utilis\u00e9 ainsi que le texte de ou des excuses. Affichez l'excuse dont le id est 184. G\u00e9n\u00e9rez 5 excuses d\u2019une cat\u00e9gorie de votre choix autre que la cat\u00e9gorie \u00ab college \u00bb. Points 2 \u00c0 l'aide de l'api disponible sur le site https://api.chucknorris.io/ r\u00e9pondez aux questions suivantes. Pour chacune des questions je veux avoir aussi l'url que vous avez utilis\u00e9 pour trouver la r\u00e9ponse. Combien il y a de cat\u00e9gorie au total? Combien de blagues contiennent le mot \"beer\"? Points 3 \u00c0 l'aide de l'api disponible sur le site https://xkcd.com/json.html r\u00e9cup\u00e9rez l'image du jour et ins\u00e9rez l\u00e0 dans le document de vos r\u00e9ponses.","title":"01 - Consommer une api"},{"location":"exercices/01_utilisation_api/#exercice-01-utilisation-dun-service-web","text":"","title":"Exercice 01 - Utilisation d\u2019un service web"},{"location":"exercices/01_utilisation_api/#points-1","text":"\u00c0 l'aide de l'api disponible sur le site https://excuser.herokuapp.com/ . Pour chaque point je veux avoir l'url que vous avez utilis\u00e9 ainsi que le texte de ou des excuses. Affichez l'excuse dont le id est 184. G\u00e9n\u00e9rez 5 excuses d\u2019une cat\u00e9gorie de votre choix autre que la cat\u00e9gorie \u00ab college \u00bb.","title":"Points 1"},{"location":"exercices/01_utilisation_api/#points-2","text":"\u00c0 l'aide de l'api disponible sur le site https://api.chucknorris.io/ r\u00e9pondez aux questions suivantes. Pour chacune des questions je veux avoir aussi l'url que vous avez utilis\u00e9 pour trouver la r\u00e9ponse. Combien il y a de cat\u00e9gorie au total? Combien de blagues contiennent le mot \"beer\"?","title":"Points 2"},{"location":"exercices/01_utilisation_api/#points-3","text":"\u00c0 l'aide de l'api disponible sur le site https://xkcd.com/json.html r\u00e9cup\u00e9rez l'image du jour et ins\u00e9rez l\u00e0 dans le document de vos r\u00e9ponses.","title":"Points 3"},{"location":"exercices/02_revision_php/","text":"Exercice 02 - Revision PHP Cr\u00e9er un fichier nomm\u00e9 exercice02.php et ajoutez la structure de base d'un fichier HTML. Faites le n\u00e9cessaire pour ajouter en PHP dans une balise H1 la phrase suivante : \"J'adore le PHP!!!\". Cr\u00e9ez un tableau associatif avec une dizaine de valeurs \u00e0 votre choix. Ajouter un nouvel \u00e9l\u00e9ment dans le tableau dont la cl\u00e9 se nommera \"sous-tableau\". La valeur de celui-ci sera un tableau sans cl\u00e9 avec les valeurs de votre choix. Modifier la valeur d'un des \u00e9l\u00e9ments du tableau du nouvel \u00e9l\u00e9ment que vous venez d'ajouter. Ajouter 10 \u00e9l\u00e9ments dans le tableau de l'\u00e9l\u00e9ment \"sous-tableau\" \u00e0 l'aide d'une boucle. Supprimer le dernier \u00e9l\u00e9ment du tableau de l'\u00e9l\u00e9ment \"sous-tableau\". Afficher le contenu du tableau dans la page web sous la forme d'une liste \u00e0 puces. Les valeurs du tableau de l'\u00e9l\u00e9ment \"sous-tableau\" sera une sous-liste de la premi\u00e8re. Cr\u00e9ez un deuxi\u00e8me tableau associatif et fusionnez le avec le premier en les \"d\u00e9ballants\". Si vous n'avez pas la bonne version de PHP vous pouvez utiliser la fonction array_merge(). Avec l'api de Random User, cr\u00e9ez une requ\u00eate GET qui retournera 50 utilisateurs al\u00e9atoire qui proviennent du Canada. Avec les fonction array_map() et array_filter() cr\u00e9ez un nouveau tableau avec uniquement les valeurs du nom, prenom, adresse courriel et nom d'usager de chacun des utilisateurs qui ont moins de 40 ans. Affichez le r\u00e9sultat dans la page HTML sous la forme d'un tableau. Remettez-moi le fichier exercice02.php une fois termin\u00e9.","title":"02 - Revision PHP"},{"location":"exercices/02_revision_php/#exercice-02-revision-php","text":"Cr\u00e9er un fichier nomm\u00e9 exercice02.php et ajoutez la structure de base d'un fichier HTML. Faites le n\u00e9cessaire pour ajouter en PHP dans une balise H1 la phrase suivante : \"J'adore le PHP!!!\". Cr\u00e9ez un tableau associatif avec une dizaine de valeurs \u00e0 votre choix. Ajouter un nouvel \u00e9l\u00e9ment dans le tableau dont la cl\u00e9 se nommera \"sous-tableau\". La valeur de celui-ci sera un tableau sans cl\u00e9 avec les valeurs de votre choix. Modifier la valeur d'un des \u00e9l\u00e9ments du tableau du nouvel \u00e9l\u00e9ment que vous venez d'ajouter. Ajouter 10 \u00e9l\u00e9ments dans le tableau de l'\u00e9l\u00e9ment \"sous-tableau\" \u00e0 l'aide d'une boucle. Supprimer le dernier \u00e9l\u00e9ment du tableau de l'\u00e9l\u00e9ment \"sous-tableau\". Afficher le contenu du tableau dans la page web sous la forme d'une liste \u00e0 puces. Les valeurs du tableau de l'\u00e9l\u00e9ment \"sous-tableau\" sera une sous-liste de la premi\u00e8re. Cr\u00e9ez un deuxi\u00e8me tableau associatif et fusionnez le avec le premier en les \"d\u00e9ballants\". Si vous n'avez pas la bonne version de PHP vous pouvez utiliser la fonction array_merge(). Avec l'api de Random User, cr\u00e9ez une requ\u00eate GET qui retournera 50 utilisateurs al\u00e9atoire qui proviennent du Canada. Avec les fonction array_map() et array_filter() cr\u00e9ez un nouveau tableau avec uniquement les valeurs du nom, prenom, adresse courriel et nom d'usager de chacun des utilisateurs qui ont moins de 40 ans. Affichez le r\u00e9sultat dans la page HTML sous la forme d'un tableau. Remettez-moi le fichier exercice02.php une fois termin\u00e9.","title":"Exercice 02 - Revision PHP"},{"location":"exercices/03_hello_world_api/","text":"Exercice 03 - HelloWorldApi On va cr\u00e9er notre premi\u00e8re api en PHP de base sans utiliser de framework et le moins de d\u00e9pendance possible. \u00c7a nous permettra de comprendre la base avant de nous lancer dans des projets plus complexes. Quoi de mieux qu'un Hello World pour commencer... Pr\u00e9requis Ampps (ou une autre \"stack\" incluant au minimum Apache, MySQL et PHP) - https://ampps.com/ Composer - https://getcomposer.org/ Description des routes Route Description /greetings/list Afficher toutes les salutations /greetings/random Afficher une salutation al\u00e9atoire /greetings/show/[id] Afficher une salutation selon selon son id Cr\u00e9ation du r\u00e9pertoire du projet Cr\u00e9ez \u00e0 la racine de votre r\u00e9pertoire \"localhost\" de Ampps (par d\u00e9faut \u00e7a sera C:\\Program Files\\Ampps\\www ) un nouveau r\u00e9pertoire pour votre projet nomm\u00e9 helloworldapi . Cr\u00e9ez aussi les sous-r\u00e9pertoire Src et api o\u00f9 vous allez retrouver la plupart des fichiers de l'api. Cr\u00e9ation de la base de donn\u00e9es et insertion des donn\u00e9es Cr\u00e9ez la base de donn\u00e9es helloworldapi . Ex\u00e9cutez le script suivant pour cr\u00e9er la table salutation et y ins\u00e9rer les donn\u00e9es de d\u00e9part. CREATE TABLE IF NOT EXISTS helloworldapi.salutations ( id INT auto_increment NOT NULL, texte varchar(100) NOT NULL, langue varchar(2) NOT NULL, PRIMARY KEY (id) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci; INSERT INTO helloworldapi.salutations (texte,langue) VALUES ('Bonjour le monde','fr'), ('Bon matin','fr'), ('Salut','fr'), ('Bonne nuit je vais travailler','fr'), ('Hello world','en'), ('Good morning','en'), ('Hi','en'), ('Good night, i''m going to work','en'), ('Hola Mundo','es'), ('Buenos dias','es'), ('Hola','es'), ('Buenas noches me voy a trabajar','es'), ('Hallo Welt','de'), ('guten Morgen','de'), ('Hallo','de'), ('Gute Nacht, ich gehe zur Arbei','de'); Ajout des informations de connexion Installez une d\u00e9pendance \u00e0 la biblioth\u00e8que DotEnv dans votre projet : https://github.com/vlucas/phpdotenv . Cr\u00e9ez les trois fichiers suivants : .gitignore .env .env.exemple DB_HOST=localhost DB_PORT=3306 DB_DATABASE= DB_USERNAME= DB_PASSWORD= .env DB_HOST=localhost DB_PORT=3306 DB_DATABASE=helloworldapi DB_USERNAME=votre_usager_mysql DB_PASSWORD=votre_mot_de_passe Connexion \u00e0 la base de donn\u00e9es Cr\u00e9ez le fichier Database.php dans le sous-r\u00e9pertoire Src Copiez le code suivant <?php /* Src/Database.php Gestion de la connexion \u00e0 la base de donn\u00e9es source : https://dev.to/shahbaz17/build-a-simple-rest-api-in-php-2edl */ namespace Src; class Database { private $dbConnection = null; public function __construct() { $host = $_ENV['DB_HOST']; $port = $_ENV['DB_PORT']; $db = $_ENV['DB_DATABASE']; $username = $_ENV['DB_USERNAME']; $password = $_ENV['DB_PASSWORD']; try { $this->dbConnection = new \\PDO( \"mysql:host=$host;port=$port;dbname=$db\", $username, $password ); } catch (\\PDOException $e) { exit($e->getMessage()); } } public function getConnection() { return $this->dbConnection; } } ?> Pour plus d'information sur PDO : www.php.net/manual/fr/book.pdo.php Modification au fichier composer.json Ajoutez un chargement automatique (autoload) du r\u00e9pertoire Src de votre projet dans le fichier composer.json. Votre fichier devrait ressembler \u00e0 ceci : { \"require\": { \"vlucas/phpdotenv\": \"^5.3\" }, // Section \u00e0 ajouter \"autoload\": { \"psr-4\": { \"Src\\\\\": \"src/\" } } } Une fois les modifications effectu\u00e9es, lancez la commande suivante en console composer update Rediriger les routes Nous allons inclure les param\u00e8tres de nos appel directement dans l'url de la requ\u00eate. ex: l'url http://localhost/HelloWorldApi/greetings/show/6/ va afficher la salutation avec le id 6, mais en r\u00e9alit\u00e9 l'url serait plut\u00f4t http://localhost/HelloWorldApi/api/index.php?view=single&id=$6 . Une fa\u00e7on de faire est de cr\u00e9er un fichier .htaccess pour indiquer \u00e0 notre serveur Apache de \"traduire\" l'url vers le bon fichier. Cr\u00e9ez un fichier .htaccess \u00e0 la racine de votre projet et incluez les lignes suivantes : # Activer la r\u00e9\u00e9criture de l'url Options +FollowSymlinks RewriteEngine on # D\u00e9finition des r\u00e8gles de r\u00e9\u00e9criture RewriteRule ^greetings/list api/index.php?view=all [nc,qsa] RewriteRule ^greetings/random api/index.php?view=single&random=1 [nc,qsa] RewriteRule ^greetings/show/([0-9]+) api/index.php?view=single&id=$1 [nc,qsa] Fichier de chargement Cr\u00e9ez le fichier bootstrap.php \u00e0 la racine du projet. Ce fichier s'occuper de charger le n\u00e9cessaire au fonctionnement de notre api. Copiez le code suivant <?php // Chargement des d\u00e9pendances require 'vendor/autoload.php'; use Src\\Database; // Chargement dans les variable d'environnement le contenu du fichier .env // Source : https://github.com/vlucas/phpdotenv $dotenv = Dotenv\\Dotenv::createImmutable(__DIR__); $dotenv->safeLoad(); // Initialisation et r\u00e9cup\u00e9ration de la connexion \u00e0 la base de donn\u00e9es $dbConnection = (new Database())->getConnection(); ?> Cr\u00e9ation de la \"porte d'entr\u00e9e\" Cr\u00e9ez le fichier index.php dans le sous-r\u00e9pertoire api . Ce fichier sera en quelque sorte le point d'entr\u00e9e de notre api. Copiez le code suivant dans le fichier. <?php /* api/index.php */ require(\"../bootstrap.php\"); use Src\\GreetingHandler; // R\u00e9cup\u00e9ration des param\u00eatres de la requ\u00eate $view = $_GET[\"view\"] ?? \"\"; $random = $_GET[\"random\"] ?? 0; $greetingId = $_GET[\"id\"] ?? 0; // Mappage selon les paramtes de l'url switch($view){ case \"all\": // Pour le endpoint /greetings/list $mobileRestHandler = new GreetingHandler($dbConnection); $mobileRestHandler->getAllGreetings(); break; // ... } ?> Cr\u00e9ation d'une classe pour construire la r\u00e9ponse Cr\u00e9ez le fichier SimpleRest.php dans le sous-r\u00e9pertoire Src . Cette classe aidera \u00e0 construire la r\u00e9ponse http \u00e0 la requ\u00eate. Copiez le code suivant dans le fichier. <?php /* Cette classe est utilis\u00e9e pour facilit\u00e9 la cr\u00e9ation de l'ent\u00eate http de la r\u00e9ponse Source : https://phppot.com/php/php-restful-web-service/ */ namespace Src; class SimpleRest { private $httpVersion = \"HTTP/1.1\"; public function setHttpHeaders($contentType, $statusCode){ $statusMessage = $this -> getHttpStatusMessage($statusCode); header($this->httpVersion. \" \". $statusCode .\" \". $statusMessage); $contentType = strpos($contentType,'text/html') !== false ? \"X-Content-Type-Options: nosniff\" : $contentType; header(\"Content-Type:\". $contentType); } public function getHttpStatusMessage($statusCode){ $httpStatus = array( 100 => 'Continue', 101 => 'Switching Protocols', 200 => 'OK', 201 => 'Created', 202 => 'Accepted', 203 => 'Non-Authoritative Information', 204 => 'No Content', 205 => 'Reset Content', 206 => 'Partial Content', 300 => 'Multiple Choices', 301 => 'Moved Permanently', 302 => 'Found', 303 => 'See Other', 304 => 'Not Modified', 305 => 'Use Proxy', 306 => '(Unused)', 307 => 'Temporary Redirect', 400 => 'Bad Request', 401 => 'Unauthorized', 402 => 'Payment Required', 403 => 'Forbidden', 404 => 'Not Found', 405 => 'Method Not Allowed', 406 => 'Not Acceptable', 407 => 'Proxy Authentication Required', 408 => 'Request Timeout', 409 => 'Conflict', 410 => 'Gone', 411 => 'Length Required', 412 => 'Precondition Failed', 413 => 'Request Entity Too Large', 414 => 'Request-URI Too Long', 415 => 'Unsupported Media Type', 416 => 'Requested Range Not Satisfiable', 417 => 'Expectation Failed', 500 => 'Internal Server Error', 501 => 'Not Implemented', 502 => 'Bad Gateway', 503 => 'Service Unavailable', 504 => 'Gateway Timeout', 505 => 'HTTP Version Not Supported'); return ($httpStatus[$statusCode]) ? $httpStatus[$statusCode] : $httpStatus[500]; } } ?> Cr\u00e9ation du contr\u00f4leur de la table salutations Cr\u00e9ez le fichier GreetingHandler.php dans le sous-r\u00e9pertoire Src . Ce fichier sert \u00e0 faire le pont entre les routes et l'acc\u00e8s aux donn\u00e9es de la base de donn\u00e9es. Il s'occupera aussi de cr\u00e9er la r\u00e9ponse \u00e0 retourner \u00e0 l'usager. Copiez le code suivant dans le fichier. <?php /* Src/GreetingHandler.php */ namespace Src; use Src\\SimpleRest; use Src\\Greeting; class GreetingHandler extends SimpleRest { private $db; public function __construct($db) { $this->db = $db; } function getAllGreetings() { $greeting = new Greeting($this->db); $rawData = $greeting->getAllGreetings(); if(empty($rawData)) { $statusCode = 404; $rawData = array('error' => 'Aucune salutations trouv\u00e9es!'); } else { $statusCode = 200; } $this->buildResponse($rawData, $statusCode); } public function buildResponse($data, $statusCode) { $requestContentType = $_SERVER['HTTP_ACCEPT']; $this ->setHttpHeaders($requestContentType, $statusCode); if(strpos($requestContentType,'application/json') !== false) || { $response = $this->encodeJson($data); echo $response; } else if(strpos($requestContentType,'text/html') !== false){ $response = $this->encodeHtml($data); echo $response; } else if(strpos($requestContentType,'application/xml') !== false){ $response = $this->encodeXml($data); echo $response; } else if(strpos($requestContentType,'*/*') !== false) { $response = $this->encodeJson($data); echo $response; } } public function encodeHtml($responseData) { $htmlResponse = \"<table border='1'>\"; $htmlResponse .= \"<tr><th>id</th><th>texte</th><th>langue</th></tr>\"; foreach($responseData as $key=>$value) { $htmlResponse .= \"<tr><td>\". $value[\"id\"] . \"</td><td>\". $value[\"texte\"] . \"</td><td>\" . $value[\"langue\"] . \"</td></tr>\"; } $htmlResponse .= \"</table>\"; return $htmlResponse; } public function encodeJson($responseData) { $jsonResponse = json_encode($responseData); return $jsonResponse; } public function encodeXml($responseData) { // creating object of SimpleXMLElement $xml = new SimpleXMLElement('<?xml version=\"1.0\"?><mobile></mobile>'); foreach($responseData as $key=>$value) { $xml->addChild($key, $value); } return $xml->asXML(); } } ?> Couche d'acc\u00e8s aux donn\u00e9es de la table salutations Cr\u00e9ez le fichier Greeting.php dans le sous-r\u00e9pertoire Src . Ce fichier va ex\u00e9cuter les requ\u00eates \u00e0 la base de donn\u00e9es et retourner les donn\u00e9es brutes au contr\u00f4leur. Copiez le code suivant dans le fichier. <?php namespace Src; class Greeting{ private $db; public function __construct($db) { $this->db = $db; } public function getAllGreetings(){ $query = \"SELECT id, texte, langue FROM salutations;\"; $statement = $this->db->query($query); $result = $statement->fetchAll(\\PDO::FETCH_ASSOC); return $result; } } Test de la route La route /greetings/list est maintenant fonctionnelle, vous pouvez la tester avec l'url complet qui sera http://localhost/HelloWorldApi/greetings/list . Testez la route dans un navigateur. Testez aussi la route avec Postman. Cr\u00e9ation des autres routes En vous basant sur le code du projet, cr\u00e9ez les deux routes restantes : /greetings/random - Affiche une salutation al\u00e9atoire /greetings/show/[id] - Affiche la salutation avec le id sp\u00e9cifi\u00e9 en param\u00e8tre Testez ensuite les nouvelles routes avec Postman. Modification de la route de la salutation al\u00e9atoire Modifiez la route /greetings/random pour qu'elle puisse prendre en param\u00e8tre la langue de la salutation. La r\u00e8gle de r\u00e9\u00e9criture dans le fichier .htaccess deviendra RewriteRule ^greetings/random/?(.*)$ api/index.php?view=single&random=1&langue=$1 [nc,qsa] ?(.*) indique un param\u00e8tre optionnel acceptant n'importe quel caract\u00e8re. langue=$1 indique que le param\u00e8tre sera stock\u00e9 dans la variable langue . Les codes de langue sont dans la base de donn\u00e9es (fr, en, es et de). Si on entre autre chose, soit vous retournez une erreur 404, soit vous n'en tenez pas compte et s\u00e9lectionnez la salutation parmi toute les langues. Au final la route /greetings/random/en retournera une citation al\u00e9atoire en anglais.","title":"03 - HelloWorldApi"},{"location":"exercices/03_hello_world_api/#exercice-03-helloworldapi","text":"On va cr\u00e9er notre premi\u00e8re api en PHP de base sans utiliser de framework et le moins de d\u00e9pendance possible. \u00c7a nous permettra de comprendre la base avant de nous lancer dans des projets plus complexes. Quoi de mieux qu'un Hello World pour commencer...","title":"Exercice 03 - HelloWorldApi"},{"location":"exercices/03_hello_world_api/#prerequis","text":"Ampps (ou une autre \"stack\" incluant au minimum Apache, MySQL et PHP) - https://ampps.com/ Composer - https://getcomposer.org/","title":"Pr\u00e9requis"},{"location":"exercices/03_hello_world_api/#description-des-routes","text":"Route Description /greetings/list Afficher toutes les salutations /greetings/random Afficher une salutation al\u00e9atoire /greetings/show/[id] Afficher une salutation selon selon son id","title":"Description des routes"},{"location":"exercices/03_hello_world_api/#creation-du-repertoire-du-projet","text":"Cr\u00e9ez \u00e0 la racine de votre r\u00e9pertoire \"localhost\" de Ampps (par d\u00e9faut \u00e7a sera C:\\Program Files\\Ampps\\www ) un nouveau r\u00e9pertoire pour votre projet nomm\u00e9 helloworldapi . Cr\u00e9ez aussi les sous-r\u00e9pertoire Src et api o\u00f9 vous allez retrouver la plupart des fichiers de l'api.","title":"Cr\u00e9ation du r\u00e9pertoire du projet"},{"location":"exercices/03_hello_world_api/#creation-de-la-base-de-donnees-et-insertion-des-donnees","text":"Cr\u00e9ez la base de donn\u00e9es helloworldapi . Ex\u00e9cutez le script suivant pour cr\u00e9er la table salutation et y ins\u00e9rer les donn\u00e9es de d\u00e9part. CREATE TABLE IF NOT EXISTS helloworldapi.salutations ( id INT auto_increment NOT NULL, texte varchar(100) NOT NULL, langue varchar(2) NOT NULL, PRIMARY KEY (id) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci; INSERT INTO helloworldapi.salutations (texte,langue) VALUES ('Bonjour le monde','fr'), ('Bon matin','fr'), ('Salut','fr'), ('Bonne nuit je vais travailler','fr'), ('Hello world','en'), ('Good morning','en'), ('Hi','en'), ('Good night, i''m going to work','en'), ('Hola Mundo','es'), ('Buenos dias','es'), ('Hola','es'), ('Buenas noches me voy a trabajar','es'), ('Hallo Welt','de'), ('guten Morgen','de'), ('Hallo','de'), ('Gute Nacht, ich gehe zur Arbei','de');","title":"Cr\u00e9ation de la base de donn\u00e9es et insertion des donn\u00e9es"},{"location":"exercices/03_hello_world_api/#ajout-des-informations-de-connexion","text":"Installez une d\u00e9pendance \u00e0 la biblioth\u00e8que DotEnv dans votre projet : https://github.com/vlucas/phpdotenv . Cr\u00e9ez les trois fichiers suivants : .gitignore .env .env.exemple DB_HOST=localhost DB_PORT=3306 DB_DATABASE= DB_USERNAME= DB_PASSWORD= .env DB_HOST=localhost DB_PORT=3306 DB_DATABASE=helloworldapi DB_USERNAME=votre_usager_mysql DB_PASSWORD=votre_mot_de_passe","title":"Ajout des informations de connexion"},{"location":"exercices/03_hello_world_api/#connexion-a-la-base-de-donnees","text":"Cr\u00e9ez le fichier Database.php dans le sous-r\u00e9pertoire Src Copiez le code suivant <?php /* Src/Database.php Gestion de la connexion \u00e0 la base de donn\u00e9es source : https://dev.to/shahbaz17/build-a-simple-rest-api-in-php-2edl */ namespace Src; class Database { private $dbConnection = null; public function __construct() { $host = $_ENV['DB_HOST']; $port = $_ENV['DB_PORT']; $db = $_ENV['DB_DATABASE']; $username = $_ENV['DB_USERNAME']; $password = $_ENV['DB_PASSWORD']; try { $this->dbConnection = new \\PDO( \"mysql:host=$host;port=$port;dbname=$db\", $username, $password ); } catch (\\PDOException $e) { exit($e->getMessage()); } } public function getConnection() { return $this->dbConnection; } } ?> Pour plus d'information sur PDO : www.php.net/manual/fr/book.pdo.php","title":"Connexion \u00e0 la base de donn\u00e9es"},{"location":"exercices/03_hello_world_api/#modification-au-fichier-composerjson","text":"Ajoutez un chargement automatique (autoload) du r\u00e9pertoire Src de votre projet dans le fichier composer.json. Votre fichier devrait ressembler \u00e0 ceci : { \"require\": { \"vlucas/phpdotenv\": \"^5.3\" }, // Section \u00e0 ajouter \"autoload\": { \"psr-4\": { \"Src\\\\\": \"src/\" } } } Une fois les modifications effectu\u00e9es, lancez la commande suivante en console composer update","title":"Modification au fichier composer.json"},{"location":"exercices/03_hello_world_api/#rediriger-les-routes","text":"Nous allons inclure les param\u00e8tres de nos appel directement dans l'url de la requ\u00eate. ex: l'url http://localhost/HelloWorldApi/greetings/show/6/ va afficher la salutation avec le id 6, mais en r\u00e9alit\u00e9 l'url serait plut\u00f4t http://localhost/HelloWorldApi/api/index.php?view=single&id=$6 . Une fa\u00e7on de faire est de cr\u00e9er un fichier .htaccess pour indiquer \u00e0 notre serveur Apache de \"traduire\" l'url vers le bon fichier. Cr\u00e9ez un fichier .htaccess \u00e0 la racine de votre projet et incluez les lignes suivantes : # Activer la r\u00e9\u00e9criture de l'url Options +FollowSymlinks RewriteEngine on # D\u00e9finition des r\u00e8gles de r\u00e9\u00e9criture RewriteRule ^greetings/list api/index.php?view=all [nc,qsa] RewriteRule ^greetings/random api/index.php?view=single&random=1 [nc,qsa] RewriteRule ^greetings/show/([0-9]+) api/index.php?view=single&id=$1 [nc,qsa]","title":"Rediriger les routes"},{"location":"exercices/03_hello_world_api/#fichier-de-chargement","text":"Cr\u00e9ez le fichier bootstrap.php \u00e0 la racine du projet. Ce fichier s'occuper de charger le n\u00e9cessaire au fonctionnement de notre api. Copiez le code suivant <?php // Chargement des d\u00e9pendances require 'vendor/autoload.php'; use Src\\Database; // Chargement dans les variable d'environnement le contenu du fichier .env // Source : https://github.com/vlucas/phpdotenv $dotenv = Dotenv\\Dotenv::createImmutable(__DIR__); $dotenv->safeLoad(); // Initialisation et r\u00e9cup\u00e9ration de la connexion \u00e0 la base de donn\u00e9es $dbConnection = (new Database())->getConnection(); ?>","title":"Fichier de chargement"},{"location":"exercices/03_hello_world_api/#creation-de-la-porte-dentree","text":"Cr\u00e9ez le fichier index.php dans le sous-r\u00e9pertoire api . Ce fichier sera en quelque sorte le point d'entr\u00e9e de notre api. Copiez le code suivant dans le fichier. <?php /* api/index.php */ require(\"../bootstrap.php\"); use Src\\GreetingHandler; // R\u00e9cup\u00e9ration des param\u00eatres de la requ\u00eate $view = $_GET[\"view\"] ?? \"\"; $random = $_GET[\"random\"] ?? 0; $greetingId = $_GET[\"id\"] ?? 0; // Mappage selon les paramtes de l'url switch($view){ case \"all\": // Pour le endpoint /greetings/list $mobileRestHandler = new GreetingHandler($dbConnection); $mobileRestHandler->getAllGreetings(); break; // ... } ?>","title":"Cr\u00e9ation de la \"porte d'entr\u00e9e\""},{"location":"exercices/03_hello_world_api/#creation-dune-classe-pour-construire-la-reponse","text":"Cr\u00e9ez le fichier SimpleRest.php dans le sous-r\u00e9pertoire Src . Cette classe aidera \u00e0 construire la r\u00e9ponse http \u00e0 la requ\u00eate. Copiez le code suivant dans le fichier. <?php /* Cette classe est utilis\u00e9e pour facilit\u00e9 la cr\u00e9ation de l'ent\u00eate http de la r\u00e9ponse Source : https://phppot.com/php/php-restful-web-service/ */ namespace Src; class SimpleRest { private $httpVersion = \"HTTP/1.1\"; public function setHttpHeaders($contentType, $statusCode){ $statusMessage = $this -> getHttpStatusMessage($statusCode); header($this->httpVersion. \" \". $statusCode .\" \". $statusMessage); $contentType = strpos($contentType,'text/html') !== false ? \"X-Content-Type-Options: nosniff\" : $contentType; header(\"Content-Type:\". $contentType); } public function getHttpStatusMessage($statusCode){ $httpStatus = array( 100 => 'Continue', 101 => 'Switching Protocols', 200 => 'OK', 201 => 'Created', 202 => 'Accepted', 203 => 'Non-Authoritative Information', 204 => 'No Content', 205 => 'Reset Content', 206 => 'Partial Content', 300 => 'Multiple Choices', 301 => 'Moved Permanently', 302 => 'Found', 303 => 'See Other', 304 => 'Not Modified', 305 => 'Use Proxy', 306 => '(Unused)', 307 => 'Temporary Redirect', 400 => 'Bad Request', 401 => 'Unauthorized', 402 => 'Payment Required', 403 => 'Forbidden', 404 => 'Not Found', 405 => 'Method Not Allowed', 406 => 'Not Acceptable', 407 => 'Proxy Authentication Required', 408 => 'Request Timeout', 409 => 'Conflict', 410 => 'Gone', 411 => 'Length Required', 412 => 'Precondition Failed', 413 => 'Request Entity Too Large', 414 => 'Request-URI Too Long', 415 => 'Unsupported Media Type', 416 => 'Requested Range Not Satisfiable', 417 => 'Expectation Failed', 500 => 'Internal Server Error', 501 => 'Not Implemented', 502 => 'Bad Gateway', 503 => 'Service Unavailable', 504 => 'Gateway Timeout', 505 => 'HTTP Version Not Supported'); return ($httpStatus[$statusCode]) ? $httpStatus[$statusCode] : $httpStatus[500]; } } ?>","title":"Cr\u00e9ation d'une classe pour construire la r\u00e9ponse"},{"location":"exercices/03_hello_world_api/#creation-du-controleur-de-la-table-salutations","text":"Cr\u00e9ez le fichier GreetingHandler.php dans le sous-r\u00e9pertoire Src . Ce fichier sert \u00e0 faire le pont entre les routes et l'acc\u00e8s aux donn\u00e9es de la base de donn\u00e9es. Il s'occupera aussi de cr\u00e9er la r\u00e9ponse \u00e0 retourner \u00e0 l'usager. Copiez le code suivant dans le fichier. <?php /* Src/GreetingHandler.php */ namespace Src; use Src\\SimpleRest; use Src\\Greeting; class GreetingHandler extends SimpleRest { private $db; public function __construct($db) { $this->db = $db; } function getAllGreetings() { $greeting = new Greeting($this->db); $rawData = $greeting->getAllGreetings(); if(empty($rawData)) { $statusCode = 404; $rawData = array('error' => 'Aucune salutations trouv\u00e9es!'); } else { $statusCode = 200; } $this->buildResponse($rawData, $statusCode); } public function buildResponse($data, $statusCode) { $requestContentType = $_SERVER['HTTP_ACCEPT']; $this ->setHttpHeaders($requestContentType, $statusCode); if(strpos($requestContentType,'application/json') !== false) || { $response = $this->encodeJson($data); echo $response; } else if(strpos($requestContentType,'text/html') !== false){ $response = $this->encodeHtml($data); echo $response; } else if(strpos($requestContentType,'application/xml') !== false){ $response = $this->encodeXml($data); echo $response; } else if(strpos($requestContentType,'*/*') !== false) { $response = $this->encodeJson($data); echo $response; } } public function encodeHtml($responseData) { $htmlResponse = \"<table border='1'>\"; $htmlResponse .= \"<tr><th>id</th><th>texte</th><th>langue</th></tr>\"; foreach($responseData as $key=>$value) { $htmlResponse .= \"<tr><td>\". $value[\"id\"] . \"</td><td>\". $value[\"texte\"] . \"</td><td>\" . $value[\"langue\"] . \"</td></tr>\"; } $htmlResponse .= \"</table>\"; return $htmlResponse; } public function encodeJson($responseData) { $jsonResponse = json_encode($responseData); return $jsonResponse; } public function encodeXml($responseData) { // creating object of SimpleXMLElement $xml = new SimpleXMLElement('<?xml version=\"1.0\"?><mobile></mobile>'); foreach($responseData as $key=>$value) { $xml->addChild($key, $value); } return $xml->asXML(); } } ?>","title":"Cr\u00e9ation du contr\u00f4leur de la table salutations"},{"location":"exercices/03_hello_world_api/#couche-dacces-aux-donnees-de-la-table-salutations","text":"Cr\u00e9ez le fichier Greeting.php dans le sous-r\u00e9pertoire Src . Ce fichier va ex\u00e9cuter les requ\u00eates \u00e0 la base de donn\u00e9es et retourner les donn\u00e9es brutes au contr\u00f4leur. Copiez le code suivant dans le fichier. <?php namespace Src; class Greeting{ private $db; public function __construct($db) { $this->db = $db; } public function getAllGreetings(){ $query = \"SELECT id, texte, langue FROM salutations;\"; $statement = $this->db->query($query); $result = $statement->fetchAll(\\PDO::FETCH_ASSOC); return $result; } }","title":"Couche d'acc\u00e8s aux donn\u00e9es de la table salutations"},{"location":"exercices/03_hello_world_api/#test-de-la-route","text":"La route /greetings/list est maintenant fonctionnelle, vous pouvez la tester avec l'url complet qui sera http://localhost/HelloWorldApi/greetings/list . Testez la route dans un navigateur. Testez aussi la route avec Postman.","title":"Test de la route"},{"location":"exercices/03_hello_world_api/#creation-des-autres-routes","text":"En vous basant sur le code du projet, cr\u00e9ez les deux routes restantes : /greetings/random - Affiche une salutation al\u00e9atoire /greetings/show/[id] - Affiche la salutation avec le id sp\u00e9cifi\u00e9 en param\u00e8tre Testez ensuite les nouvelles routes avec Postman.","title":"Cr\u00e9ation des autres routes"},{"location":"exercices/03_hello_world_api/#modification-de-la-route-de-la-salutation-aleatoire","text":"Modifiez la route /greetings/random pour qu'elle puisse prendre en param\u00e8tre la langue de la salutation. La r\u00e8gle de r\u00e9\u00e9criture dans le fichier .htaccess deviendra RewriteRule ^greetings/random/?(.*)$ api/index.php?view=single&random=1&langue=$1 [nc,qsa] ?(.*) indique un param\u00e8tre optionnel acceptant n'importe quel caract\u00e8re. langue=$1 indique que le param\u00e8tre sera stock\u00e9 dans la variable langue . Les codes de langue sont dans la base de donn\u00e9es (fr, en, es et de). Si on entre autre chose, soit vous retournez une erreur 404, soit vous n'en tenez pas compte et s\u00e9lectionnez la salutation parmi toute les langues. Au final la route /greetings/random/en retournera une citation al\u00e9atoire en anglais.","title":"Modification de la route de la salutation al\u00e9atoire"},{"location":"exercices/04_libapi/","text":"Exercice 04 - libAPI Pour cet exercice nous allons cr\u00e9er un r\u00e9pertoire de livres. M\u00eame si le sujet est assez simple, nous allons cr\u00e9er une api un peu plus \u00e9toffer gr\u00e2ce au framework SLIM . Cet exercice va \u00eatre utiliser sur plusieurs cours, on va y int\u00e9grer petit \u00e0 petit plusieurs notions essentielles, alors il est important de suivre chaque \u00e9tape et de les compl\u00e9ter. Pr\u00e9requis Ampps (ou une autre \"stack\" incluant au minimum Apache, MySQL et PHP) - https://ampps.com/ Composer - https://getcomposer.org/ Installation Cloner le d\u00e9pot suivant \u00e0 la racine de votre r\u00e9pertoire \"localhost\" de Ampps (par d\u00e9faut \u00e7a sera C:\\Program Files\\Ampps\\www ) : https://github.com/ServiceWeb-H2022/base-slim-skeleton Renommez le r\u00e9pertoire cr\u00e9\u00e9 (base-slim-skeleton) pour libapi . Roulez la commande composer update dans le r\u00e9pertoire de votre projet. Cr\u00e9ez une base de donn\u00e9es nomm\u00e9e aussi libapi Modifier les informations de connexion \u00e0 la base de donn\u00e9es dans le fichier config/settings.php. Rouler le script ressource/createUserTable.sql dans la base de donn\u00e9es cr\u00e9e pour tester la cr\u00e9ation d'un usager. Test de l'installation Vous devriez avoir acc\u00e8s maintenant aux routes suivantes. Testez les avec Postman et un navigateur pour la route de la documentation. M\u00e9thodes Route Description GET / Message de bienvenue GET /docs Documentation de l'api POST /users Cr\u00e9ation d'un usager Pour la cr\u00e9ation d'un usager, ajouter dans le body de la requ\u00eate l'information en JSON : { \"username\" : \"[username]\", \"first_name\" : \"[first_name]\", \"last_name\" : \"[last_name]\", \"email\" : \"[email]\" } Structure du projet /config Bootstrap.php Point d\u2019entr\u00e9e Routes.php C\u2019est ici qu\u2019on va d\u00e9finir les routes Settings.php Constantes de configuration. Par exemple les informations pour se connecter \u00e0 la bd Container.php Fonctions \u201cinject\u00e9es\u201d dans le constructeur. Middleware.php Code qui s\u2019execute automatiquement avant ou apr\u00e8s les requ\u00eates. (Authentication) /src /action Les controlleurs, un fichier par \u201caction\u201d /domain /user S\u00e9parer la logique application de l\u2019acc\u00e8s aux donn\u00e9es /Repository Acc\u00e8s aux donn\u00e9es /Service Logique de l\u2019api. Chaque classe doit n\u2019avoir qu\u2019une seule responsabilit\u00e9e La route appelle une classe action, ensuite le bon service est appel\u00e9. Le service va chercher les donn\u00e9es avec la classe repository correspondante. Exercice Premi\u00e8re partie Cr\u00e9ez les routes suivantes pour compl\u00e9ter la gestion des utilisateurs : M\u00e9thodes Route Description GET /users Lister tous les usagers GET /users/{id} Lister seulement l'usager avec le id en param\u00e8tre PUT /users/{id} Modifier l'usager avec le id en param\u00e8tre DELETE /users/{id} Supprimer l'usager avec le id en param\u00e8tre Pour chaque route, cr\u00e9ez une classe \"action\", \"service\" et \"repository\". Testez ensuite vos routes avec Postman. Deuxi\u00e8me partie Cr\u00e9ez la documentation pour les routes d\u00e9j\u00e0 existantes. \u00c0 partir de maintenant, pour chaque route que nous allons ajouter, on va cr\u00e9er en m\u00eame temps la documentation. Renommez le fichier de documentation resources/docs/base_slim_skeleton_v1.yaml pour libapi.yaml . C'est dans ce fichier que vous allez \u00e9crire la documentation. Il y a d\u00e9j\u00e0 une partie de fait pour les routes qui \u00e9tait d\u00e9j\u00e0 pr\u00e9sente. Modifiez le code du fichier src/Action/Docs/SwaggerUiAction.php pour que la variable $yamlFile fasse r\u00e9f\u00e9rence \u00e0 votre fichier renomm\u00e9. En vous inspirant de ce qui est d\u00e9j\u00e0 pr\u00e9sent dans le fichier de documentation et du site swagger.io , r\u00e9digez la documentation pour les 4 routes que vous avez cr\u00e9\u00e9 dans la premi\u00e8re partie. Une fois termin\u00e9 elle devrait apparaitre dans la page affich\u00e9 quand vous utilisez la route / Troisi\u00e8me partie \u00c0 l'aide des notes de cours sur les bonnes pratiques de conception d'un api, r\u00e9visez ce que vous avez fait jusqu'\u00e0 maintenant et apporter des corrections \u00e0 votre projet si n\u00e9cessaire. Ajouter les options de filtre, tri, s\u00e9lection de champs et de pagination seulement pour la route GET /users","title":"04 - LibAPI"},{"location":"exercices/04_libapi/#exercice-04-libapi","text":"Pour cet exercice nous allons cr\u00e9er un r\u00e9pertoire de livres. M\u00eame si le sujet est assez simple, nous allons cr\u00e9er une api un peu plus \u00e9toffer gr\u00e2ce au framework SLIM . Cet exercice va \u00eatre utiliser sur plusieurs cours, on va y int\u00e9grer petit \u00e0 petit plusieurs notions essentielles, alors il est important de suivre chaque \u00e9tape et de les compl\u00e9ter.","title":"Exercice 04 - libAPI"},{"location":"exercices/04_libapi/#prerequis","text":"Ampps (ou une autre \"stack\" incluant au minimum Apache, MySQL et PHP) - https://ampps.com/ Composer - https://getcomposer.org/","title":"Pr\u00e9requis"},{"location":"exercices/04_libapi/#installation","text":"Cloner le d\u00e9pot suivant \u00e0 la racine de votre r\u00e9pertoire \"localhost\" de Ampps (par d\u00e9faut \u00e7a sera C:\\Program Files\\Ampps\\www ) : https://github.com/ServiceWeb-H2022/base-slim-skeleton Renommez le r\u00e9pertoire cr\u00e9\u00e9 (base-slim-skeleton) pour libapi . Roulez la commande composer update dans le r\u00e9pertoire de votre projet. Cr\u00e9ez une base de donn\u00e9es nomm\u00e9e aussi libapi Modifier les informations de connexion \u00e0 la base de donn\u00e9es dans le fichier config/settings.php. Rouler le script ressource/createUserTable.sql dans la base de donn\u00e9es cr\u00e9e pour tester la cr\u00e9ation d'un usager.","title":"Installation"},{"location":"exercices/04_libapi/#test-de-linstallation","text":"Vous devriez avoir acc\u00e8s maintenant aux routes suivantes. Testez les avec Postman et un navigateur pour la route de la documentation. M\u00e9thodes Route Description GET / Message de bienvenue GET /docs Documentation de l'api POST /users Cr\u00e9ation d'un usager Pour la cr\u00e9ation d'un usager, ajouter dans le body de la requ\u00eate l'information en JSON : { \"username\" : \"[username]\", \"first_name\" : \"[first_name]\", \"last_name\" : \"[last_name]\", \"email\" : \"[email]\" }","title":"Test de l'installation"},{"location":"exercices/04_libapi/#structure-du-projet","text":"/config Bootstrap.php Point d\u2019entr\u00e9e Routes.php C\u2019est ici qu\u2019on va d\u00e9finir les routes Settings.php Constantes de configuration. Par exemple les informations pour se connecter \u00e0 la bd Container.php Fonctions \u201cinject\u00e9es\u201d dans le constructeur. Middleware.php Code qui s\u2019execute automatiquement avant ou apr\u00e8s les requ\u00eates. (Authentication) /src /action Les controlleurs, un fichier par \u201caction\u201d /domain /user S\u00e9parer la logique application de l\u2019acc\u00e8s aux donn\u00e9es /Repository Acc\u00e8s aux donn\u00e9es /Service Logique de l\u2019api. Chaque classe doit n\u2019avoir qu\u2019une seule responsabilit\u00e9e La route appelle une classe action, ensuite le bon service est appel\u00e9. Le service va chercher les donn\u00e9es avec la classe repository correspondante.","title":"Structure du projet"},{"location":"exercices/04_libapi/#exercice","text":"","title":"Exercice"},{"location":"exercices/04_libapi/#premiere-partie","text":"Cr\u00e9ez les routes suivantes pour compl\u00e9ter la gestion des utilisateurs : M\u00e9thodes Route Description GET /users Lister tous les usagers GET /users/{id} Lister seulement l'usager avec le id en param\u00e8tre PUT /users/{id} Modifier l'usager avec le id en param\u00e8tre DELETE /users/{id} Supprimer l'usager avec le id en param\u00e8tre Pour chaque route, cr\u00e9ez une classe \"action\", \"service\" et \"repository\". Testez ensuite vos routes avec Postman.","title":"Premi\u00e8re partie"},{"location":"exercices/04_libapi/#deuxieme-partie","text":"Cr\u00e9ez la documentation pour les routes d\u00e9j\u00e0 existantes. \u00c0 partir de maintenant, pour chaque route que nous allons ajouter, on va cr\u00e9er en m\u00eame temps la documentation. Renommez le fichier de documentation resources/docs/base_slim_skeleton_v1.yaml pour libapi.yaml . C'est dans ce fichier que vous allez \u00e9crire la documentation. Il y a d\u00e9j\u00e0 une partie de fait pour les routes qui \u00e9tait d\u00e9j\u00e0 pr\u00e9sente. Modifiez le code du fichier src/Action/Docs/SwaggerUiAction.php pour que la variable $yamlFile fasse r\u00e9f\u00e9rence \u00e0 votre fichier renomm\u00e9. En vous inspirant de ce qui est d\u00e9j\u00e0 pr\u00e9sent dans le fichier de documentation et du site swagger.io , r\u00e9digez la documentation pour les 4 routes que vous avez cr\u00e9\u00e9 dans la premi\u00e8re partie. Une fois termin\u00e9 elle devrait apparaitre dans la page affich\u00e9 quand vous utilisez la route /","title":"Deuxi\u00e8me partie"},{"location":"exercices/04_libapi/#troisieme-partie","text":"\u00c0 l'aide des notes de cours sur les bonnes pratiques de conception d'un api, r\u00e9visez ce que vous avez fait jusqu'\u00e0 maintenant et apporter des corrections \u00e0 votre projet si n\u00e9cessaire. Ajouter les options de filtre, tri, s\u00e9lection de champs et de pagination seulement pour la route GET /users","title":"Troisi\u00e8me partie"},{"location":"notes_de_cours/bonnes_pratiques/","text":"Les bonnes pratiques dans la conception d'un API Utiliser le format JSON Le format \u00e0 pr\u00e9coniser pour recevoir et retourner de l'information de notre api est le format JSON. C'est de loin le plus utilis\u00e9 aujourd'hui et la grande majorit\u00e9 des langages de programmation on des fonctions natives pour le manipuler. Utiliser des noms au lieu de verbes pour les routes Quand on nomme les routes de notre api, on ne devrait pas utiliser de verbe. L'emploi d'un nom significatif est \u00e0 privil\u00e9gier. Par exemple notre api nous permet de retourner une liste d'utilisateurs ou d'en cr\u00e9er un, on serait tent\u00e9 d'utiliser comme nom de route https://monApi/getUtilisateurs https://monApi/createUtilisateurs mais il est pr\u00e9f\u00e9rable d'utiliser dans les deux cas https://monApi/utilisateurs Un m\u00eame route peut avoir plus d'une fonctionnalit\u00e9, c'est la m\u00e9thode HTTP qui nous permet de les diff\u00e9renci\u00e9es. Utiliser la m\u00e9thode HTTP pour d\u00e9crire la fonctionnalit\u00e9 de la ressource En lien avec le point suivant, utiliser la bonne m\u00e9thode HTTP pour indiquer ce que la fonctionnalit\u00e9 de la route. Il existe une m\u00e9thode qui correspondante \u00e0 chaque op\u00e9ration CRUD. Op\u00e9ration dans la BD M\u00e9thode http Lire GET Ins\u00e9rer POST Modifier PUT Modifier partiellement PATCH Supprimer DELETE On ne doit jamais modifier une ressource avec une action GET. Les actions de modification PUT et PATCH sont tr\u00e8s similaires, la diff\u00e9rence est que PUT est utilis\u00e9 pour modifier toutes les valeurs de la ressource alors que PATCH l'es pour une modification partielle. Prenons l'exemple suivant, on veut pouvoir modifier un utilisateur ayant ces informations { \"username\" : \"[username]\", \"first_name\" : \"[first_name]\", \"last_name\" : \"[last_name]\", \"email\" : \"[email]\" } Avec PUT on doit envoyer toutes ces informations dans la requ\u00eate, alors qu'avec PATCH on pourrait permettre seulement d'envoyer et de modifier le email . L'utilisation de la bonne m\u00e9thode HTTP nous permet d'utiliser la m\u00eame route pour plus d'une fonction. M\u00e9thode Route Description GET /utilisateurs Retourne la liste de tous les utilisateurs POST /utilisateurs Cr\u00e9ation d'un utilisateur PUT /utilisateurs/21 Modification de l'utilisateur avec le id 21 DELETE /utilisateurs/21 Suppression de l'utilisateur avec le id 21 voir Les m\u00e9thodes HTTP Utiliser les codes de statut HTTP Dans la r\u00e9ponse de la requ\u00eate \u00e0 votre API utilisez une code de statut HTTP appropri\u00e9 \u00e0 la situation. 200 - 299 indique un succ\u00e8s 400 - 499 Il y a eu une erreur c\u00f4t\u00e9 client 500 - 599 Il y a eu une erreur c\u00f4t\u00e9 serveur R\u00e9sum\u00e9 des m\u00e9thodes avec le code de statut sugg\u00e9r\u00e9 M\u00e9thode GLOBAL (/utilisateurs) Sur un element (/utilisateurs/{id}) POST 201 Created - La ressource est cr\u00e9\u00e9e et est retourn\u00e9e dans la r\u00e9ponse - GET 200 OK 200 OK 404 Not Found - La ressource n'a pas \u00e9t\u00e9 trouv\u00e9e, ex: le id utilisateur est invalide. PUT / PATCH 405 Method Not Allowed - On ne devrait pas permettre de modifier toutes les ressources en une action 200 OK - La ressource est modifi\u00e9e et est retourn\u00e9e dans la r\u00e9ponse. 404 Not Found - La ressource \u00e0 modifier n'a pas \u00e9t\u00e9 trouv\u00e9e, ex: le id utilisateur est invalide. DELETE 405 Method Not Allowed - On ne devrait pas permettre de supprimer toutes les ressources en une action. Si oui utilisez le code 200. 204 No Content - La ressource est a \u00e9t\u00e9 supprim\u00e9 et aucune information n'est retourn\u00e9e dans la r\u00e9ponse. 200 OK - La ressource est supprim\u00e9 et est retourn\u00e9e dans la r\u00e9ponse. Codes \u00e0 utiliser pour les erreurs Code Utilisation 401 - Unauthorized Le client ne s'est pas encore authentifier pour acc\u00e9der \u00e0 l'api. 403 - Forbidden Le client est authentifi\u00e9 mais n'a pas les autorisations pour acc\u00e9der \u00e0 la ressource. 404 - Not Found L'url utilis\u00e9 est invalide, le client demande une ressource qui n'existe pas. 500 - Internal Server Error Une erreur est survenu c\u00f4t\u00e9 serveur. Retournez de l'information sur l'erreur dans la r\u00e9ponse. Utiliser l'imbrication dans les routes Quand des ressources de votre api peuvent \u00eatre reli\u00e9es, utilisez l'imbrication pour cr\u00e9er des urls significatifs. Par exemple un auteur peut avoir \u00e9crit plusieurs livres, on pourrait avoir une route nomm\u00e9e /{auteurs}/livres qui retourne tous les livres de l'auteur en param\u00e8tre. Il faut cependant faire attention \u00e0 ne pas trop surcharger la route en allant trop profond\u00e9ment avec l'imbrication. Permettre les filtres, le tri, s\u00e9lection des champs retourn\u00e9s et la pagination Pour permettre \u00e0 l'utilisateur un meilleur contr\u00f4le sur les donn\u00e9es r\u00e9cup\u00e9r\u00e9es, permettez l'utilisation de filtres, de tri et de pagination dans vos requ\u00eate. Les param\u00e8tres devraient \u00eatre situ\u00e9 dans la section \"requ\u00eate\" de l'url Filtre Utilisez un nom de param\u00e8tre significatif. Pour saisir plusieurs valeurs, on doit les s\u00e9parer par une virgule. Exemple : /livres?categorie=roman pour afficher tous les livres de la cat\u00e9gorie roman. /livres?categorie=roman,documentaire pour afficher tous les livres de la cat\u00e9gorie roman et documentaire. tri Utilisez comme valeur du param\u00e8tre le nom du champ avec un code pr\u00e9d\u00e9fini en pr\u00e9fixe ( + et - par exemple) qui indiquera si le tri est ascendant ou descendant. Le tri sur plus d'un champ devrait aussi \u00eatre permis. Exemple : /livres?tri=+titre,-prix pour trier par les livres titre de mani\u00e8re ascendante et par prix de mani\u00e8re descendante. S\u00e9lection des champs retourn\u00e9s Il peut aussi \u00eatre pertinent de permettre au client de pouvoir s\u00e9lectionner uniquement les champs qu'il veut avoir dans la r\u00e9ponse \u00e0 la requ\u00eate. Exemple : /livres?champs=titre,isbn retournera la liste de tous les livres mais seulement le titres et isbn de chacun. Pagination Il n'est pas rare qu'une ressource comporte plusieurs centaines sinon milliers d'enregistrement. On devrait permettre au client de pouvoir s\u00e9lectionner seulement une partie des enregistrements en d\u00e9finissant un point de d\u00e9part (offset) et un nombre d'enregistrement (limit). Si on utilise la pagination, on devrait d\u00e9finir des valeurs par d\u00e9faut au param\u00e8tre offset et limit (g\u00e9n\u00e9ralement offset sera \u00e9gale \u00e0 0 pour le premier enregistrement). Exemple : livres?limit=50&offset=100 En partant du centi\u00e8me enregistrement, affiche les 50 livres suivants. Pour faciliter le traitement des donn\u00e9es, on devrait ajouter dans la r\u00e9ponse le nombre total d'enregistrements ainsi que les valeurs de limit et offset. Source https://www.moesif.com/blog/api-guide/api-design-guidelines/ https://www.freecodecamp.org/news/rest-api-best-practices-rest-endpoint-design-examples/ https://medium.com/@mwaysolutions/10-best-practices-for-better-restful-api-cbe81b06f291","title":"Les bonnes pratiques dans la conception d'un API"},{"location":"notes_de_cours/bonnes_pratiques/#les-bonnes-pratiques-dans-la-conception-dun-api","text":"","title":"Les bonnes pratiques dans la conception d'un API"},{"location":"notes_de_cours/bonnes_pratiques/#utiliser-le-format-json","text":"Le format \u00e0 pr\u00e9coniser pour recevoir et retourner de l'information de notre api est le format JSON. C'est de loin le plus utilis\u00e9 aujourd'hui et la grande majorit\u00e9 des langages de programmation on des fonctions natives pour le manipuler.","title":"Utiliser le format JSON"},{"location":"notes_de_cours/bonnes_pratiques/#utiliser-des-noms-au-lieu-de-verbes-pour-les-routes","text":"Quand on nomme les routes de notre api, on ne devrait pas utiliser de verbe. L'emploi d'un nom significatif est \u00e0 privil\u00e9gier. Par exemple notre api nous permet de retourner une liste d'utilisateurs ou d'en cr\u00e9er un, on serait tent\u00e9 d'utiliser comme nom de route https://monApi/getUtilisateurs https://monApi/createUtilisateurs mais il est pr\u00e9f\u00e9rable d'utiliser dans les deux cas https://monApi/utilisateurs Un m\u00eame route peut avoir plus d'une fonctionnalit\u00e9, c'est la m\u00e9thode HTTP qui nous permet de les diff\u00e9renci\u00e9es.","title":"Utiliser des noms au lieu de verbes pour les routes"},{"location":"notes_de_cours/bonnes_pratiques/#utiliser-la-methode-http-pour-decrire-la-fonctionnalite-de-la-ressource","text":"En lien avec le point suivant, utiliser la bonne m\u00e9thode HTTP pour indiquer ce que la fonctionnalit\u00e9 de la route. Il existe une m\u00e9thode qui correspondante \u00e0 chaque op\u00e9ration CRUD. Op\u00e9ration dans la BD M\u00e9thode http Lire GET Ins\u00e9rer POST Modifier PUT Modifier partiellement PATCH Supprimer DELETE On ne doit jamais modifier une ressource avec une action GET. Les actions de modification PUT et PATCH sont tr\u00e8s similaires, la diff\u00e9rence est que PUT est utilis\u00e9 pour modifier toutes les valeurs de la ressource alors que PATCH l'es pour une modification partielle. Prenons l'exemple suivant, on veut pouvoir modifier un utilisateur ayant ces informations { \"username\" : \"[username]\", \"first_name\" : \"[first_name]\", \"last_name\" : \"[last_name]\", \"email\" : \"[email]\" } Avec PUT on doit envoyer toutes ces informations dans la requ\u00eate, alors qu'avec PATCH on pourrait permettre seulement d'envoyer et de modifier le email . L'utilisation de la bonne m\u00e9thode HTTP nous permet d'utiliser la m\u00eame route pour plus d'une fonction. M\u00e9thode Route Description GET /utilisateurs Retourne la liste de tous les utilisateurs POST /utilisateurs Cr\u00e9ation d'un utilisateur PUT /utilisateurs/21 Modification de l'utilisateur avec le id 21 DELETE /utilisateurs/21 Suppression de l'utilisateur avec le id 21 voir Les m\u00e9thodes HTTP","title":"Utiliser la m\u00e9thode HTTP pour d\u00e9crire la fonctionnalit\u00e9 de la ressource"},{"location":"notes_de_cours/bonnes_pratiques/#utiliser-les-codes-de-statut-http","text":"Dans la r\u00e9ponse de la requ\u00eate \u00e0 votre API utilisez une code de statut HTTP appropri\u00e9 \u00e0 la situation. 200 - 299 indique un succ\u00e8s 400 - 499 Il y a eu une erreur c\u00f4t\u00e9 client 500 - 599 Il y a eu une erreur c\u00f4t\u00e9 serveur","title":"Utiliser les codes de statut HTTP"},{"location":"notes_de_cours/bonnes_pratiques/#resume-des-methodes-avec-le-code-de-statut-suggere","text":"M\u00e9thode GLOBAL (/utilisateurs) Sur un element (/utilisateurs/{id}) POST 201 Created - La ressource est cr\u00e9\u00e9e et est retourn\u00e9e dans la r\u00e9ponse - GET 200 OK 200 OK 404 Not Found - La ressource n'a pas \u00e9t\u00e9 trouv\u00e9e, ex: le id utilisateur est invalide. PUT / PATCH 405 Method Not Allowed - On ne devrait pas permettre de modifier toutes les ressources en une action 200 OK - La ressource est modifi\u00e9e et est retourn\u00e9e dans la r\u00e9ponse. 404 Not Found - La ressource \u00e0 modifier n'a pas \u00e9t\u00e9 trouv\u00e9e, ex: le id utilisateur est invalide. DELETE 405 Method Not Allowed - On ne devrait pas permettre de supprimer toutes les ressources en une action. Si oui utilisez le code 200. 204 No Content - La ressource est a \u00e9t\u00e9 supprim\u00e9 et aucune information n'est retourn\u00e9e dans la r\u00e9ponse. 200 OK - La ressource est supprim\u00e9 et est retourn\u00e9e dans la r\u00e9ponse.","title":"R\u00e9sum\u00e9 des m\u00e9thodes avec le code de statut sugg\u00e9r\u00e9"},{"location":"notes_de_cours/bonnes_pratiques/#codes-a-utiliser-pour-les-erreurs","text":"Code Utilisation 401 - Unauthorized Le client ne s'est pas encore authentifier pour acc\u00e9der \u00e0 l'api. 403 - Forbidden Le client est authentifi\u00e9 mais n'a pas les autorisations pour acc\u00e9der \u00e0 la ressource. 404 - Not Found L'url utilis\u00e9 est invalide, le client demande une ressource qui n'existe pas. 500 - Internal Server Error Une erreur est survenu c\u00f4t\u00e9 serveur. Retournez de l'information sur l'erreur dans la r\u00e9ponse.","title":"Codes \u00e0 utiliser pour les erreurs"},{"location":"notes_de_cours/bonnes_pratiques/#utiliser-limbrication-dans-les-routes","text":"Quand des ressources de votre api peuvent \u00eatre reli\u00e9es, utilisez l'imbrication pour cr\u00e9er des urls significatifs. Par exemple un auteur peut avoir \u00e9crit plusieurs livres, on pourrait avoir une route nomm\u00e9e /{auteurs}/livres qui retourne tous les livres de l'auteur en param\u00e8tre. Il faut cependant faire attention \u00e0 ne pas trop surcharger la route en allant trop profond\u00e9ment avec l'imbrication.","title":"Utiliser l'imbrication dans les routes"},{"location":"notes_de_cours/bonnes_pratiques/#permettre-les-filtres-le-tri-selection-des-champs-retournes-et-la-pagination","text":"Pour permettre \u00e0 l'utilisateur un meilleur contr\u00f4le sur les donn\u00e9es r\u00e9cup\u00e9r\u00e9es, permettez l'utilisation de filtres, de tri et de pagination dans vos requ\u00eate. Les param\u00e8tres devraient \u00eatre situ\u00e9 dans la section \"requ\u00eate\" de l'url","title":"Permettre les filtres, le tri, s\u00e9lection des champs retourn\u00e9s et la pagination"},{"location":"notes_de_cours/bonnes_pratiques/#filtre","text":"Utilisez un nom de param\u00e8tre significatif. Pour saisir plusieurs valeurs, on doit les s\u00e9parer par une virgule. Exemple : /livres?categorie=roman pour afficher tous les livres de la cat\u00e9gorie roman. /livres?categorie=roman,documentaire pour afficher tous les livres de la cat\u00e9gorie roman et documentaire.","title":"Filtre"},{"location":"notes_de_cours/bonnes_pratiques/#tri","text":"Utilisez comme valeur du param\u00e8tre le nom du champ avec un code pr\u00e9d\u00e9fini en pr\u00e9fixe ( + et - par exemple) qui indiquera si le tri est ascendant ou descendant. Le tri sur plus d'un champ devrait aussi \u00eatre permis. Exemple : /livres?tri=+titre,-prix pour trier par les livres titre de mani\u00e8re ascendante et par prix de mani\u00e8re descendante.","title":"tri"},{"location":"notes_de_cours/bonnes_pratiques/#selection-des-champs-retournes","text":"Il peut aussi \u00eatre pertinent de permettre au client de pouvoir s\u00e9lectionner uniquement les champs qu'il veut avoir dans la r\u00e9ponse \u00e0 la requ\u00eate. Exemple : /livres?champs=titre,isbn retournera la liste de tous les livres mais seulement le titres et isbn de chacun.","title":"S\u00e9lection des champs retourn\u00e9s"},{"location":"notes_de_cours/bonnes_pratiques/#pagination","text":"Il n'est pas rare qu'une ressource comporte plusieurs centaines sinon milliers d'enregistrement. On devrait permettre au client de pouvoir s\u00e9lectionner seulement une partie des enregistrements en d\u00e9finissant un point de d\u00e9part (offset) et un nombre d'enregistrement (limit). Si on utilise la pagination, on devrait d\u00e9finir des valeurs par d\u00e9faut au param\u00e8tre offset et limit (g\u00e9n\u00e9ralement offset sera \u00e9gale \u00e0 0 pour le premier enregistrement). Exemple : livres?limit=50&offset=100 En partant du centi\u00e8me enregistrement, affiche les 50 livres suivants. Pour faciliter le traitement des donn\u00e9es, on devrait ajouter dans la r\u00e9ponse le nombre total d'enregistrements ainsi que les valeurs de limit et offset.","title":"Pagination"},{"location":"notes_de_cours/bonnes_pratiques/#source","text":"https://www.moesif.com/blog/api-guide/api-design-guidelines/ https://www.freecodecamp.org/news/rest-api-best-practices-rest-endpoint-design-examples/ https://medium.com/@mwaysolutions/10-best-practices-for-better-restful-api-cbe81b06f291","title":"Source"},{"location":"notes_de_cours/code_statut_http/","text":"Les codes de statut HTTP Il n'y a pas de consensus clair au sujet du type de codes de statut \u00e0 retourner dans la r\u00e9ponse selon la requ\u00eate HTTP effectu\u00e9e. D'un c\u00f4t\u00e9 Most didn't mention, but using the HTTP error codes can lead to problems regarding the main cause of a problem. HTTP is the transport protocol and a 404 should indicate, that there was a problem with the URLon transport level (e. g. wrong path). If the application can not find a dataset by its id, this is an application level error (not a transport level error) and a 404, as suggested by restful http status code users, might lead to a wrong conclusion. Generally I don't like the mixup of transport and application layer in using the status codes","title":"Les codes de statut HTTP"},{"location":"notes_de_cours/code_statut_http/#les-codes-de-statut-http","text":"Il n'y a pas de consensus clair au sujet du type de codes de statut \u00e0 retourner dans la r\u00e9ponse selon la requ\u00eate HTTP effectu\u00e9e. D'un c\u00f4t\u00e9 Most didn't mention, but using the HTTP error codes can lead to problems regarding the main cause of a problem. HTTP is the transport protocol and a 404 should indicate, that there was a problem with the URLon transport level (e. g. wrong path). If the application can not find a dataset by its id, this is an application level error (not a transport level error) and a 404, as suggested by restful http status code users, might lead to a wrong conclusion. Generally I don't like the mixup of transport and application layer in using the status codes","title":"Les codes de statut HTTP"},{"location":"notes_de_cours/documentation_api/","text":"Documentation de l'API Comme il destin\u00e9 \u00e0 \u00eatre utilis\u00e9 par des utilisateurs externes, il est primordial de bien documenter notre API. Il existe plusieurs fa\u00e7on de faire, la plus simple \u00e9tant de seulement lister toutes les routes possibles en indiquant leur fonction. Nous allons y allons de fa\u00e7on plus professionnel en utilisant le standard OpenAPI. OpenAPI nous permet de d\u00e9crire l\u2019api dans son ensemble, les routes (endpoints), les requ\u00eates et les formats de r\u00e9ponse, la m\u00e9thode d\u2019authentification, etc. Le d\u00e9finition peut \u00eatre \u00e9crite en JSON ou YAML, nous allons pour notre par utiliser le format YAML. Utilisation de Swagger.io On va utiliser les services du site Swagger.io qui nous offre un \u00e9diteur OpenAPI gratuit. Cr\u00e9er vous un compte gratuit sur https://swagger.io/ Ensuite dans myHub, cr\u00e9ez un nouvel api avec les configurations suivantes : OpenApiVersion : 3.0.0 Template : none Name, Title, description : Ce que vous voulez Version : 1.0.0 Auto Mock API : Off Une fois la documentation r\u00e9dig\u00e9e dans l'\u00e9diteur de Swagger, vous pouvez l'exporter dans plusieurs format ou simplement la recopier dans le fichier YAML de votre projet. Source https://oai.github.io/Documentation/start-here.html https://swagger.io/docs/specification/about/","title":"Documentation de l'API"},{"location":"notes_de_cours/documentation_api/#documentation-de-lapi","text":"Comme il destin\u00e9 \u00e0 \u00eatre utilis\u00e9 par des utilisateurs externes, il est primordial de bien documenter notre API. Il existe plusieurs fa\u00e7on de faire, la plus simple \u00e9tant de seulement lister toutes les routes possibles en indiquant leur fonction. Nous allons y allons de fa\u00e7on plus professionnel en utilisant le standard OpenAPI. OpenAPI nous permet de d\u00e9crire l\u2019api dans son ensemble, les routes (endpoints), les requ\u00eates et les formats de r\u00e9ponse, la m\u00e9thode d\u2019authentification, etc. Le d\u00e9finition peut \u00eatre \u00e9crite en JSON ou YAML, nous allons pour notre par utiliser le format YAML.","title":"Documentation de l'API"},{"location":"notes_de_cours/documentation_api/#utilisation-de-swaggerio","text":"On va utiliser les services du site Swagger.io qui nous offre un \u00e9diteur OpenAPI gratuit. Cr\u00e9er vous un compte gratuit sur https://swagger.io/ Ensuite dans myHub, cr\u00e9ez un nouvel api avec les configurations suivantes : OpenApiVersion : 3.0.0 Template : none Name, Title, description : Ce que vous voulez Version : 1.0.0 Auto Mock API : Off Une fois la documentation r\u00e9dig\u00e9e dans l'\u00e9diteur de Swagger, vous pouvez l'exporter dans plusieurs format ou simplement la recopier dans le fichier YAML de votre projet.","title":"Utilisation de Swagger.io"},{"location":"notes_de_cours/documentation_api/#source","text":"https://oai.github.io/Documentation/start-here.html https://swagger.io/docs/specification/about/","title":"Source"},{"location":"notes_de_cours/methode_http/","text":"Les m\u00e9thodes HTTP","title":"Les m\u00e9thodes HTTP"},{"location":"notes_de_cours/methode_http/#les-methodes-http","text":"","title":"Les m\u00e9thodes HTTP"},{"location":"notes_de_cours/php_methode_magique/","text":"Les m\u00e9thodes magiques __construct() __invoke() https://www.php.net/manual/fr/language.oop5.magic.php https://www.phptutorial.net/php-oop/php-__invoke/","title":"Les m\u00e9thodes magiques"},{"location":"notes_de_cours/php_methode_magique/#les-methodes-magiques","text":"","title":"Les m\u00e9thodes magiques"},{"location":"notes_de_cours/php_methode_magique/#__construct","text":"","title":"__construct()"},{"location":"notes_de_cours/php_methode_magique/#__invoke","text":"https://www.php.net/manual/fr/language.oop5.magic.php https://www.phptutorial.net/php-oop/php-__invoke/","title":"__invoke()"},{"location":"notes_de_cours/reponse_requete/","text":"","title":"Reponse requete"},{"location":"notes_de_cours/revision_php/","text":"R\u00e9vision PHP Syntaxe Un script PHP doit \u00eatre d\u00e9buter par <?php et ce termin\u00e9 par ?> Chaque ligne de code se termine par un point-virgule. Les noms de variable d\u00e9butent par le symbole $ Ex\u00e9cuter un script en ligne de commande Pour lancer un script depuis la ligne de commande # Si le chemin vers l'interpreteur PHP est dans les variables d'environnement > php monScript.php # Sinon il faut sp\u00e9cifier le chemin en entier > 'C:\\Program Files\\Ampps\\php-7.3\\php.exe' monScript.php Op\u00e9rateur de coalescence des nuls ( ?? ) ?? est un op\u00e9rateur logique qui retourne la premi\u00e8re valeur qui existe et qui est non null. Il est possible d'encha\u00eener plusieurs op\u00e9rateurs de coalescence \u00e0 la suite. <?php // Si $_GET['utilisateur'] n'est pas d\u00e9fini ou vaut null, $utilisateur vaudra 'aucun' $utilisateur = $_GET['utilisateur'] ?? 'aucun'; // On peut encha\u00eener plusieurs ?? comme ceci $utilisateur = $_GET['utilisateur'] ?? $_POST['utilisateur'] ?? 'aucun'; ?> Tableau D\u00e9claration d'un tableau Pour d\u00e9clarer un tableau, on peut utiliser la fonction array() ou en notation courte utiliser [] <?php // D\u00e9claration d'un tableau avec la fonction array() $monTableau = array(\"item1\", \"item2\", \"item3\"); // D\u00e9claration d'un tableau avec la notation courte $monTableau = [\"item1\", \"item2\", \"item3\"]; ?> Chaque \u00e9l\u00e9ment du tableau est associ\u00e9 \u00e0 une cl\u00e9 (son index dans le tableau). Si la cl\u00e9 n'est pas sp\u00e9cifi\u00e9, comme dans l'exemple plus haut, elle sera autog\u00e9n\u00e9r\u00e9 de fa\u00e7on incr\u00e9mentiel (0, 1, 2, etc...). Il est aussi possible de d\u00e9finir la cl\u00e9 de chaque item. <?php $monTableau = array( 1 => \"item1\", 2 => \"item2\", 3 => \"item3\", ); $monTableau = [ \"fruits\" => [\"banane\", \"pomme\", \"raisin\"], \"legumes\" => [\"carotte\", \"patate\", \"navet\"], ]; ?> Acc\u00e8s aux \u00e9l\u00e9ments d'un tableau On acc\u00e8de \u00e0 la valeur d'un \u00e9l\u00e9ment du tableau par sa cl\u00e9 <?php $monTableau = [\"item1\", \"item2\", \"item3\"]; echo $monTableau[0]; // \"item1\" $monTableau = [ \"fruits\" => [\"banane\", \"pomme\", \"raisin\"], \"legumes\" => [\"carotte\", \"patate\", \"navet\"], ]; echo $monTableau[\"legumes\"][1]; // \"patate\" ?> Ajouter/modifier/supprimer un \u00e9l\u00e9ment <?php $monTableau = [\"item1\", \"item2\", \"item3\"]; // Pour ajouter un \u00e9l\u00e9ment au tableau, on donne ou non une cl\u00e9 libre $monTableau[] = \"item4\"; $monTableau[4] = \"item5\"; // Pour modifier un \u00e9l\u00e9ment, on doit donner la cl\u00e9 de l'\u00e9l\u00e9ment \u00e0 modifier $monTableau[4] = \"item5 modifi\u00e9\" // On supprime un item avec la fonction unset en sp\u00e9cifiant la cl\u00e9 de l'\u00e9l\u00e9ment \u00e0 supprimer unset($monTableau[4]); // Attention, si aucune cl\u00e9 n'est donn\u00e9e, c'est tout le tableau qui sera supprim\u00e9 unset($monTableau); ?> Boucle sur un tableau Pour boucler sur les \u00e9l\u00e9ments d'un tableau, on utilise foreach <?php $monTableau = [ \"prenom\" => \"Mathieu\", \"nom\" => \"Frechette\", ]; foreach($monTableau as $item) { echo \"$item\\n\"; } /* Mathieu Frechette */ // On peut aussi r\u00e9cup\u00e9rer la cl\u00e9 de chaque \u00e9l\u00e9ment foreach($monTableau as $cle => $valeur) { echo \"$cle = $valeur\\n\"; } /* prenom = Mathieu nom = frechette */ ?> D\u00e9baller un tableau En pr\u00e9fixant le tableau par trois points ( ...$monTableau), le tableau sera \"d\u00e9ball\u00e9\" lors de se d\u00e9finition, c'est \u00e0 dire qu'on aura acc\u00e8s \u00e0 tous les \u00e9l\u00e9ments du tableau. (Disponible depuis PHP 7.4.0) <?php $monTableau = [\"item1\", \"item2\", \"item3\"]; // Copier le tableau $tableau2 = [...$monTableau]; // [\"item1\", \"item2\", \"item3\"] // Ajouter des \u00e9l\u00e9ments au tableau; $tableau3 = [\"item0\", ...$monTableau, \"item4\"]; // [\"item0, \"item1\", \"item2\", \"item3\", \"item4\"] // Fusionner des tableaux $tableau4 = [...$tableau2, ...$tableau3]; // [\"item1\", \"item2\", \"item3\", \"item0, \"item1\", \"item2\", \"item3\", \"item4\"] // On peut aussi l'utiliser avec une fonction qui retourne un tableau function getTableau() { return [\"item5\", \"item6\"]; } $tableau5 = [...getTableau(), \"item7\"]; //[\"item5\", \"item6\", \"item7\"] ?> Array_filter() La fonction array_filter() permet de filter les \u00e9l\u00e9ments d'un tableau par une fonction de Callback. Array_filter() prends en param\u00e8tre le tableau sur lequelle effectuer le traitement la fonction de Callback. On peut appeler une fonction existante ou bien directement la d\u00e9clarer \u00e0 l'int\u00e9rieur de array_map(). <?php // Soit le tableau de nombre suivant $nombres = [1, 2, 3, 4, 5]; // On veut cr\u00e9er un nouveau tableau avec uniquement les nombres impairs $nombresImpair = array_filter($nombres, function ($nombre) { return $nombre % 2 === 1; } ); // [1, 3, 5] ?> Array_map() La fonction array_map() permet d'appliquer une fonction sur chaque \u00e9l\u00e9ment d'un tableau et de retourner un nouveau tableau du r\u00e9sultat. Array_map() prends en param\u00e8tre la fonction de Callback et le tableau sur lequelle effectuer le traitement. On peut appeler une fonction existante ou bien directement la d\u00e9clarer \u00e0 l'int\u00e9rieur de array_map(). <?php // Soit le tableau de nombre suivant $nombres = [10,12,14,13]; // On veut cr\u00e9er un tableau avec de ces nombres doubl\u00e9s $nombresDouble = array_map(function ($nombre) { return $nombre * 2; }, $nombres); // [20, 22, 28, 26] ?> R\u00e9f\u00e9rence : www.php.net/manual/fr/language.types.array.php www.w3schools.com/php/php_ref_array.asp www.php.net/manual/fr/ref.array.php JSON en PHP Pour encoder une valeur en format JSON, on utilisera la fonction json_encode(). <?php $monTableau = [ \"prenom\" => \"Mathieu\", \"nom\" => \"Frechette\", ]; echo json_encode($monTableau); /* { \"prenom\":\"Mathieu\", \"nom\":\"Frechette\" } */ $monTableauPlusComplexe = [ \"Resultats\" => [ [ \"prenom\" => \"Mathieu\", \"nom\" => \"Frechette\", ], [ \"prenom\" => \"Anthony\", \"nom\" => \"Frechette\", ], ] ]; echo json_encode($monTableauPlusComplexe); /* { \"Resultats\":[ { \"prenom\":\"Mathieu\", \"nom\":\"Frechette\" }, { \"prenom\":\"Anthony\", \"nom\":\"Frechette\" } ] } */ ?> \u00c0 l'inverse, pour convertir un objet JSON en un objet ou un tableau associatif (avec des cl\u00e9s d\u00e9finies) on utilisera la fonction json_decode(). Elle prend en param\u00eatre l'objet Json \u00e0 convertir et optionnellement un valeur boolean qui indique si on veut que soit cr\u00e9e un tableau associatif ou non. Par d\u00e9faut ce param\u00eatre prend la valeur false, ce qui cr\u00e9e un objet. <?php $jsonData = '{\"prenom\":\"Mathieu\",\"nom\":\"Frechette\"}'; $objetUsager = json_decode($jsonData); echo $objetUsager->prenom; // Mathieu $tableauUsager = json_decode($jsonData, true); echo $tableauUsager[\"prenom\"]; // Mathieu ?> Effectuer un appel GET \u00e0 un service web On peut utiliser la fonction native file_get_contents() pour faire un appel GET \u00e0 un api avec un url. <?php $url = 'https://api.chucknorris.io/jokes/random'; $reponseEnJson = file_get_contents($url); /* { \"categories\": [], \"created_at\": \"2020-01-05 13:42:29.296379\", \"icon_url\": \"https://assets.chucknorris.host/img/avatar/chuck-norris.png\", \"id\": \"bESHJ3YrTEW638ky0rr3Yg\", \"updated_at\": \"2020-01-05 13:42:29.296379\", \"url\": \"https://api.chucknorris.io/jokes/bESHJ3YrTEW638ky0rr3Yg\", \"value\": \"Chuck Norris doesn't need an axe or saw to cut down a tree -- he needs only his foot, or his fist, or his glare.\" } */ $objetReponse = json_decode($reponseEnJson); echo $objetReponse->value; // Chuck Norris doesn't need an axe or saw to cut down a tree -- he needs only his foot, or his fist, or his glare. ?>","title":"Revision PHP"},{"location":"notes_de_cours/revision_php/#revision-php","text":"","title":"R\u00e9vision PHP"},{"location":"notes_de_cours/revision_php/#syntaxe","text":"Un script PHP doit \u00eatre d\u00e9buter par <?php et ce termin\u00e9 par ?> Chaque ligne de code se termine par un point-virgule. Les noms de variable d\u00e9butent par le symbole $","title":"Syntaxe"},{"location":"notes_de_cours/revision_php/#executer-un-script-en-ligne-de-commande","text":"Pour lancer un script depuis la ligne de commande # Si le chemin vers l'interpreteur PHP est dans les variables d'environnement > php monScript.php # Sinon il faut sp\u00e9cifier le chemin en entier > 'C:\\Program Files\\Ampps\\php-7.3\\php.exe' monScript.php","title":"Ex\u00e9cuter un script en ligne de commande"},{"location":"notes_de_cours/revision_php/#operateur-de-coalescence-des-nuls","text":"?? est un op\u00e9rateur logique qui retourne la premi\u00e8re valeur qui existe et qui est non null. Il est possible d'encha\u00eener plusieurs op\u00e9rateurs de coalescence \u00e0 la suite. <?php // Si $_GET['utilisateur'] n'est pas d\u00e9fini ou vaut null, $utilisateur vaudra 'aucun' $utilisateur = $_GET['utilisateur'] ?? 'aucun'; // On peut encha\u00eener plusieurs ?? comme ceci $utilisateur = $_GET['utilisateur'] ?? $_POST['utilisateur'] ?? 'aucun'; ?>","title":"Op\u00e9rateur de coalescence des nuls ( ?? )"},{"location":"notes_de_cours/revision_php/#tableau","text":"","title":"Tableau"},{"location":"notes_de_cours/revision_php/#declaration-dun-tableau","text":"Pour d\u00e9clarer un tableau, on peut utiliser la fonction array() ou en notation courte utiliser [] <?php // D\u00e9claration d'un tableau avec la fonction array() $monTableau = array(\"item1\", \"item2\", \"item3\"); // D\u00e9claration d'un tableau avec la notation courte $monTableau = [\"item1\", \"item2\", \"item3\"]; ?> Chaque \u00e9l\u00e9ment du tableau est associ\u00e9 \u00e0 une cl\u00e9 (son index dans le tableau). Si la cl\u00e9 n'est pas sp\u00e9cifi\u00e9, comme dans l'exemple plus haut, elle sera autog\u00e9n\u00e9r\u00e9 de fa\u00e7on incr\u00e9mentiel (0, 1, 2, etc...). Il est aussi possible de d\u00e9finir la cl\u00e9 de chaque item. <?php $monTableau = array( 1 => \"item1\", 2 => \"item2\", 3 => \"item3\", ); $monTableau = [ \"fruits\" => [\"banane\", \"pomme\", \"raisin\"], \"legumes\" => [\"carotte\", \"patate\", \"navet\"], ]; ?>","title":"D\u00e9claration d'un tableau"},{"location":"notes_de_cours/revision_php/#acces-aux-elements-dun-tableau","text":"On acc\u00e8de \u00e0 la valeur d'un \u00e9l\u00e9ment du tableau par sa cl\u00e9 <?php $monTableau = [\"item1\", \"item2\", \"item3\"]; echo $monTableau[0]; // \"item1\" $monTableau = [ \"fruits\" => [\"banane\", \"pomme\", \"raisin\"], \"legumes\" => [\"carotte\", \"patate\", \"navet\"], ]; echo $monTableau[\"legumes\"][1]; // \"patate\" ?>","title":"Acc\u00e8s aux \u00e9l\u00e9ments d'un tableau"},{"location":"notes_de_cours/revision_php/#ajoutermodifiersupprimer-un-element","text":"<?php $monTableau = [\"item1\", \"item2\", \"item3\"]; // Pour ajouter un \u00e9l\u00e9ment au tableau, on donne ou non une cl\u00e9 libre $monTableau[] = \"item4\"; $monTableau[4] = \"item5\"; // Pour modifier un \u00e9l\u00e9ment, on doit donner la cl\u00e9 de l'\u00e9l\u00e9ment \u00e0 modifier $monTableau[4] = \"item5 modifi\u00e9\" // On supprime un item avec la fonction unset en sp\u00e9cifiant la cl\u00e9 de l'\u00e9l\u00e9ment \u00e0 supprimer unset($monTableau[4]); // Attention, si aucune cl\u00e9 n'est donn\u00e9e, c'est tout le tableau qui sera supprim\u00e9 unset($monTableau); ?>","title":"Ajouter/modifier/supprimer un \u00e9l\u00e9ment"},{"location":"notes_de_cours/revision_php/#boucle-sur-un-tableau","text":"Pour boucler sur les \u00e9l\u00e9ments d'un tableau, on utilise foreach <?php $monTableau = [ \"prenom\" => \"Mathieu\", \"nom\" => \"Frechette\", ]; foreach($monTableau as $item) { echo \"$item\\n\"; } /* Mathieu Frechette */ // On peut aussi r\u00e9cup\u00e9rer la cl\u00e9 de chaque \u00e9l\u00e9ment foreach($monTableau as $cle => $valeur) { echo \"$cle = $valeur\\n\"; } /* prenom = Mathieu nom = frechette */ ?>","title":"Boucle sur un tableau"},{"location":"notes_de_cours/revision_php/#deballer-un-tableau","text":"En pr\u00e9fixant le tableau par trois points ( ...$monTableau), le tableau sera \"d\u00e9ball\u00e9\" lors de se d\u00e9finition, c'est \u00e0 dire qu'on aura acc\u00e8s \u00e0 tous les \u00e9l\u00e9ments du tableau. (Disponible depuis PHP 7.4.0) <?php $monTableau = [\"item1\", \"item2\", \"item3\"]; // Copier le tableau $tableau2 = [...$monTableau]; // [\"item1\", \"item2\", \"item3\"] // Ajouter des \u00e9l\u00e9ments au tableau; $tableau3 = [\"item0\", ...$monTableau, \"item4\"]; // [\"item0, \"item1\", \"item2\", \"item3\", \"item4\"] // Fusionner des tableaux $tableau4 = [...$tableau2, ...$tableau3]; // [\"item1\", \"item2\", \"item3\", \"item0, \"item1\", \"item2\", \"item3\", \"item4\"] // On peut aussi l'utiliser avec une fonction qui retourne un tableau function getTableau() { return [\"item5\", \"item6\"]; } $tableau5 = [...getTableau(), \"item7\"]; //[\"item5\", \"item6\", \"item7\"] ?>","title":"D\u00e9baller un tableau"},{"location":"notes_de_cours/revision_php/#array_filter","text":"La fonction array_filter() permet de filter les \u00e9l\u00e9ments d'un tableau par une fonction de Callback. Array_filter() prends en param\u00e8tre le tableau sur lequelle effectuer le traitement la fonction de Callback. On peut appeler une fonction existante ou bien directement la d\u00e9clarer \u00e0 l'int\u00e9rieur de array_map(). <?php // Soit le tableau de nombre suivant $nombres = [1, 2, 3, 4, 5]; // On veut cr\u00e9er un nouveau tableau avec uniquement les nombres impairs $nombresImpair = array_filter($nombres, function ($nombre) { return $nombre % 2 === 1; } ); // [1, 3, 5] ?>","title":"Array_filter()"},{"location":"notes_de_cours/revision_php/#array_map","text":"La fonction array_map() permet d'appliquer une fonction sur chaque \u00e9l\u00e9ment d'un tableau et de retourner un nouveau tableau du r\u00e9sultat. Array_map() prends en param\u00e8tre la fonction de Callback et le tableau sur lequelle effectuer le traitement. On peut appeler une fonction existante ou bien directement la d\u00e9clarer \u00e0 l'int\u00e9rieur de array_map(). <?php // Soit le tableau de nombre suivant $nombres = [10,12,14,13]; // On veut cr\u00e9er un tableau avec de ces nombres doubl\u00e9s $nombresDouble = array_map(function ($nombre) { return $nombre * 2; }, $nombres); // [20, 22, 28, 26] ?> R\u00e9f\u00e9rence : www.php.net/manual/fr/language.types.array.php www.w3schools.com/php/php_ref_array.asp www.php.net/manual/fr/ref.array.php","title":"Array_map()"},{"location":"notes_de_cours/revision_php/#json-en-php","text":"Pour encoder une valeur en format JSON, on utilisera la fonction json_encode(). <?php $monTableau = [ \"prenom\" => \"Mathieu\", \"nom\" => \"Frechette\", ]; echo json_encode($monTableau); /* { \"prenom\":\"Mathieu\", \"nom\":\"Frechette\" } */ $monTableauPlusComplexe = [ \"Resultats\" => [ [ \"prenom\" => \"Mathieu\", \"nom\" => \"Frechette\", ], [ \"prenom\" => \"Anthony\", \"nom\" => \"Frechette\", ], ] ]; echo json_encode($monTableauPlusComplexe); /* { \"Resultats\":[ { \"prenom\":\"Mathieu\", \"nom\":\"Frechette\" }, { \"prenom\":\"Anthony\", \"nom\":\"Frechette\" } ] } */ ?> \u00c0 l'inverse, pour convertir un objet JSON en un objet ou un tableau associatif (avec des cl\u00e9s d\u00e9finies) on utilisera la fonction json_decode(). Elle prend en param\u00eatre l'objet Json \u00e0 convertir et optionnellement un valeur boolean qui indique si on veut que soit cr\u00e9e un tableau associatif ou non. Par d\u00e9faut ce param\u00eatre prend la valeur false, ce qui cr\u00e9e un objet. <?php $jsonData = '{\"prenom\":\"Mathieu\",\"nom\":\"Frechette\"}'; $objetUsager = json_decode($jsonData); echo $objetUsager->prenom; // Mathieu $tableauUsager = json_decode($jsonData, true); echo $tableauUsager[\"prenom\"]; // Mathieu ?>","title":"JSON en PHP"},{"location":"notes_de_cours/revision_php/#effectuer-un-appel-get-a-un-service-web","text":"On peut utiliser la fonction native file_get_contents() pour faire un appel GET \u00e0 un api avec un url. <?php $url = 'https://api.chucknorris.io/jokes/random'; $reponseEnJson = file_get_contents($url); /* { \"categories\": [], \"created_at\": \"2020-01-05 13:42:29.296379\", \"icon_url\": \"https://assets.chucknorris.host/img/avatar/chuck-norris.png\", \"id\": \"bESHJ3YrTEW638ky0rr3Yg\", \"updated_at\": \"2020-01-05 13:42:29.296379\", \"url\": \"https://api.chucknorris.io/jokes/bESHJ3YrTEW638ky0rr3Yg\", \"value\": \"Chuck Norris doesn't need an axe or saw to cut down a tree -- he needs only his foot, or his fist, or his glare.\" } */ $objetReponse = json_decode($reponseEnJson); echo $objetReponse->value; // Chuck Norris doesn't need an axe or saw to cut down a tree -- he needs only his foot, or his fist, or his glare. ?>","title":"Effectuer un appel GET \u00e0 un service web"},{"location":"notes_de_cours/slim_recuperer_params/","text":"R\u00e9cup\u00e9rer les param\u00e8tres d'une requ\u00eate HTTP On a vu qu'il y a plusieurs m\u00e9thodes pour passer des param\u00e8tres dans une requ\u00eate HTML : dans la section \"query\" de l'url, directement dans l'url et dans le corps (body) de la requ\u00eate. SLIM nous permet de facilement r\u00e9cup\u00e9rer ces donn\u00e9es avec l'objet ServerRequestInterface Cette objet est re\u00e7u en param\u00eatre de la fonction _invoke des classes \"action\" de notre api. public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // Avec la variable $request nous avons acc\u00e8s aux param\u00e8tres // ... } Param\u00e8tre de la section \"query\" La fonction getQueryParams() de l'objet ServerRequestInterface nous retourne un tableau associatif qui contient tous les param\u00e8tres. L'exemple suivant avec la route /livres?page=1 nous montres comment r\u00e9cup\u00e9rer la valeur du param\u00e8tre page public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // R\u00e9cup\u00e9ration des param\u00e8tres dans un tableau // S'il n'y a pas de param\u00e8tre, retourne un tableau vide $queryParams = $request->getQueryParams() ?? []; // R\u00e9cup\u00e9ration de la valeur du param\u00e8tre page $page = $queryParams['page'] ?? 1; //... } Param\u00e8tre dans la route La fonction getAttribute('nomDuParam\u00e8tre', valeurPardefaut) de l'objet ServerRequestInterface nous retourne la valeur du param\u00e8tre demand\u00e9. Quand on d\u00e9fini notre route, les valeurs qui seront d\u00e9fini comme param\u00e8tre sont entour\u00e9es d'accolades. Prenons comme exemple la route /livres/13 qui affichera le livre avec le id 13. Dans notre code la route sera d\u00e9finie comme ceci dans le fichier route.php // Le nom de la classe importe peu, ici c'est la description de la route qui est importante $app->get('/livres/{id}', \\App\\Action\\Book\\BookViewByIdAction::class); Exemple d'utilisation de getAttribute() public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // R\u00e9cup\u00e9ration du param\u00e8tre de route 'id' $id = $request->getAttribute('id', 0); // ... } Param\u00e8tre dans le corps de la requ\u00eate La fonction getQueryParams() de l'objet ServerRequestInterface nous retourne un tableau associatif qui contient tous les param\u00e8tres du corps de la requ\u00eate. Prenons comme exemple une requ\u00eate HTTP de cr\u00e9ation d'un livre qui aurait les valeurs suivantes : { \"genreId\": \"1\", \"titre\": \"Mon livre\", \"isbn\": \"123456789\" } Pour r\u00e9cup\u00e9rer le titre avec getQueryParams() public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // R\u00e9cup\u00e9ration des donn\u00e9es du corps de la requ\u00eate $data = (array)$request->getParsedBody(); // R\u00e9cup\u00e9ration de la valeur de titre $titre = $data['titre'] ?? ''; // ... }","title":"R\u00e9cup\u00e9rer les param\u00e8tres d'une requ\u00eate HTTP"},{"location":"notes_de_cours/slim_recuperer_params/#recuperer-les-parametres-dune-requete-http","text":"On a vu qu'il y a plusieurs m\u00e9thodes pour passer des param\u00e8tres dans une requ\u00eate HTML : dans la section \"query\" de l'url, directement dans l'url et dans le corps (body) de la requ\u00eate. SLIM nous permet de facilement r\u00e9cup\u00e9rer ces donn\u00e9es avec l'objet ServerRequestInterface Cette objet est re\u00e7u en param\u00eatre de la fonction _invoke des classes \"action\" de notre api. public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // Avec la variable $request nous avons acc\u00e8s aux param\u00e8tres // ... }","title":"R\u00e9cup\u00e9rer les param\u00e8tres d'une requ\u00eate HTTP"},{"location":"notes_de_cours/slim_recuperer_params/#parametre-de-la-section-query","text":"La fonction getQueryParams() de l'objet ServerRequestInterface nous retourne un tableau associatif qui contient tous les param\u00e8tres. L'exemple suivant avec la route /livres?page=1 nous montres comment r\u00e9cup\u00e9rer la valeur du param\u00e8tre page public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // R\u00e9cup\u00e9ration des param\u00e8tres dans un tableau // S'il n'y a pas de param\u00e8tre, retourne un tableau vide $queryParams = $request->getQueryParams() ?? []; // R\u00e9cup\u00e9ration de la valeur du param\u00e8tre page $page = $queryParams['page'] ?? 1; //... }","title":"Param\u00e8tre de la section \"query\""},{"location":"notes_de_cours/slim_recuperer_params/#parametre-dans-la-route","text":"La fonction getAttribute('nomDuParam\u00e8tre', valeurPardefaut) de l'objet ServerRequestInterface nous retourne la valeur du param\u00e8tre demand\u00e9. Quand on d\u00e9fini notre route, les valeurs qui seront d\u00e9fini comme param\u00e8tre sont entour\u00e9es d'accolades. Prenons comme exemple la route /livres/13 qui affichera le livre avec le id 13. Dans notre code la route sera d\u00e9finie comme ceci dans le fichier route.php // Le nom de la classe importe peu, ici c'est la description de la route qui est importante $app->get('/livres/{id}', \\App\\Action\\Book\\BookViewByIdAction::class); Exemple d'utilisation de getAttribute() public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // R\u00e9cup\u00e9ration du param\u00e8tre de route 'id' $id = $request->getAttribute('id', 0); // ... }","title":"Param\u00e8tre dans la route"},{"location":"notes_de_cours/slim_recuperer_params/#parametre-dans-le-corps-de-la-requete","text":"La fonction getQueryParams() de l'objet ServerRequestInterface nous retourne un tableau associatif qui contient tous les param\u00e8tres du corps de la requ\u00eate. Prenons comme exemple une requ\u00eate HTTP de cr\u00e9ation d'un livre qui aurait les valeurs suivantes : { \"genreId\": \"1\", \"titre\": \"Mon livre\", \"isbn\": \"123456789\" } Pour r\u00e9cup\u00e9rer le titre avec getQueryParams() public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // R\u00e9cup\u00e9ration des donn\u00e9es du corps de la requ\u00eate $data = (array)$request->getParsedBody(); // R\u00e9cup\u00e9ration de la valeur de titre $titre = $data['titre'] ?? ''; // ... }","title":"Param\u00e8tre dans le corps de la requ\u00eate"},{"location":"notes_de_cours/variable_environnement/","text":"","title":"Variable environnement"}]}