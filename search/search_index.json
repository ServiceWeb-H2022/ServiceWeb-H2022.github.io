{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Services Web Hiver 2022 Horaire Lundi 10:15 - 12:05 Local C209 Vendredi 8:15 - 10:05 Local C205","title":"Accueil"},{"location":"#services-web","text":"Hiver 2022","title":"Services Web"},{"location":"#horaire","text":"Lundi 10:15 - 12:05 Local C209 Vendredi 8:15 - 10:05 Local C205","title":"Horaire"},{"location":"exercices/01_utilisation_api/","text":"Exercice 01 - Utilisation d\u2019un service web Points 1 \u00c0 l'aide de l'api disponible sur le site https://excuser.herokuapp.com/ . Pour chaque point je veux avoir l'url que vous avez utilis\u00e9 ainsi que le texte de ou des excuses. Affichez l'excuse dont le id est 184. G\u00e9n\u00e9rez 5 excuses d\u2019une cat\u00e9gorie de votre choix autre que la cat\u00e9gorie \u00ab college \u00bb. Points 2 \u00c0 l'aide de l'api disponible sur le site https://api.chucknorris.io/ r\u00e9pondez aux questions suivantes. Pour chacune des questions je veux avoir aussi l'url que vous avez utilis\u00e9 pour trouver la r\u00e9ponse. Combien il y a de cat\u00e9gorie au total? Combien de blagues contiennent le mot \"beer\"? Points 3 \u00c0 l'aide de l'api disponible sur le site https://xkcd.com/json.html r\u00e9cup\u00e9rez l'image du jour et ins\u00e9rez l\u00e0 dans le document de vos r\u00e9ponses.","title":"01 - Consommer une api"},{"location":"exercices/01_utilisation_api/#exercice-01-utilisation-dun-service-web","text":"","title":"Exercice 01 - Utilisation d\u2019un service web"},{"location":"exercices/01_utilisation_api/#points-1","text":"\u00c0 l'aide de l'api disponible sur le site https://excuser.herokuapp.com/ . Pour chaque point je veux avoir l'url que vous avez utilis\u00e9 ainsi que le texte de ou des excuses. Affichez l'excuse dont le id est 184. G\u00e9n\u00e9rez 5 excuses d\u2019une cat\u00e9gorie de votre choix autre que la cat\u00e9gorie \u00ab college \u00bb.","title":"Points 1"},{"location":"exercices/01_utilisation_api/#points-2","text":"\u00c0 l'aide de l'api disponible sur le site https://api.chucknorris.io/ r\u00e9pondez aux questions suivantes. Pour chacune des questions je veux avoir aussi l'url que vous avez utilis\u00e9 pour trouver la r\u00e9ponse. Combien il y a de cat\u00e9gorie au total? Combien de blagues contiennent le mot \"beer\"?","title":"Points 2"},{"location":"exercices/01_utilisation_api/#points-3","text":"\u00c0 l'aide de l'api disponible sur le site https://xkcd.com/json.html r\u00e9cup\u00e9rez l'image du jour et ins\u00e9rez l\u00e0 dans le document de vos r\u00e9ponses.","title":"Points 3"},{"location":"exercices/02_revision_php/","text":"Exercice 02 - Revision PHP Cr\u00e9er un fichier nomm\u00e9 exercice02.php et ajoutez la structure de base d'un fichier HTML. Faites le n\u00e9cessaire pour ajouter en PHP dans une balise H1 la phrase suivante : \"J'adore le PHP!!!\". Cr\u00e9ez un tableau associatif avec une dizaine de valeurs \u00e0 votre choix. Ajouter un nouvel \u00e9l\u00e9ment dans le tableau dont la cl\u00e9 se nommera \"sous-tableau\". La valeur de celui-ci sera un tableau sans cl\u00e9 avec les valeurs de votre choix. Modifier la valeur d'un des \u00e9l\u00e9ments du tableau du nouvel \u00e9l\u00e9ment que vous venez d'ajouter. Ajouter 10 \u00e9l\u00e9ments dans le tableau de l'\u00e9l\u00e9ment \"sous-tableau\" \u00e0 l'aide d'une boucle. Supprimer le dernier \u00e9l\u00e9ment du tableau de l'\u00e9l\u00e9ment \"sous-tableau\". Afficher le contenu du tableau dans la page web sous la forme d'une liste \u00e0 puces. Les valeurs du tableau de l'\u00e9l\u00e9ment \"sous-tableau\" sera une sous-liste de la premi\u00e8re. Cr\u00e9ez un deuxi\u00e8me tableau associatif et fusionnez le avec le premier en les \"d\u00e9ballants\". Si vous n'avez pas la bonne version de PHP vous pouvez utiliser la fonction array_merge(). Avec l'api de Random User, cr\u00e9ez une requ\u00eate GET qui retournera 50 utilisateurs al\u00e9atoire qui proviennent du Canada. Avec les fonction array_map() et array_filter() cr\u00e9ez un nouveau tableau avec uniquement les valeurs du nom, prenom, adresse courriel et nom d'usager de chacun des utilisateurs qui ont moins de 40 ans. Affichez le r\u00e9sultat dans la page HTML sous la forme d'un tableau. Remettez-moi le fichier exercice02.php une fois termin\u00e9.","title":"02 - Revision PHP"},{"location":"exercices/02_revision_php/#exercice-02-revision-php","text":"Cr\u00e9er un fichier nomm\u00e9 exercice02.php et ajoutez la structure de base d'un fichier HTML. Faites le n\u00e9cessaire pour ajouter en PHP dans une balise H1 la phrase suivante : \"J'adore le PHP!!!\". Cr\u00e9ez un tableau associatif avec une dizaine de valeurs \u00e0 votre choix. Ajouter un nouvel \u00e9l\u00e9ment dans le tableau dont la cl\u00e9 se nommera \"sous-tableau\". La valeur de celui-ci sera un tableau sans cl\u00e9 avec les valeurs de votre choix. Modifier la valeur d'un des \u00e9l\u00e9ments du tableau du nouvel \u00e9l\u00e9ment que vous venez d'ajouter. Ajouter 10 \u00e9l\u00e9ments dans le tableau de l'\u00e9l\u00e9ment \"sous-tableau\" \u00e0 l'aide d'une boucle. Supprimer le dernier \u00e9l\u00e9ment du tableau de l'\u00e9l\u00e9ment \"sous-tableau\". Afficher le contenu du tableau dans la page web sous la forme d'une liste \u00e0 puces. Les valeurs du tableau de l'\u00e9l\u00e9ment \"sous-tableau\" sera une sous-liste de la premi\u00e8re. Cr\u00e9ez un deuxi\u00e8me tableau associatif et fusionnez le avec le premier en les \"d\u00e9ballants\". Si vous n'avez pas la bonne version de PHP vous pouvez utiliser la fonction array_merge(). Avec l'api de Random User, cr\u00e9ez une requ\u00eate GET qui retournera 50 utilisateurs al\u00e9atoire qui proviennent du Canada. Avec les fonction array_map() et array_filter() cr\u00e9ez un nouveau tableau avec uniquement les valeurs du nom, prenom, adresse courriel et nom d'usager de chacun des utilisateurs qui ont moins de 40 ans. Affichez le r\u00e9sultat dans la page HTML sous la forme d'un tableau. Remettez-moi le fichier exercice02.php une fois termin\u00e9.","title":"Exercice 02 - Revision PHP"},{"location":"exercices/03_hello_world_api/","text":"Exercice 03 - HelloWorldApi On va cr\u00e9er notre premi\u00e8re api en PHP de base sans utiliser de framework et le moins de d\u00e9pendance possible. \u00c7a nous permettra de comprendre la base avant de nous lancer dans des projets plus complexes. Quoi de mieux qu'un Hello World pour commencer... Pr\u00e9requis Ampps (ou une autre \"stack\" incluant au minimum Apache, MySQL et PHP) - https://ampps.com/ Composer - https://getcomposer.org/ Description des routes Route Description /greetings/list Afficher toutes les salutations /greetings/random Afficher une salutation al\u00e9atoire /greetings/show/[id] Afficher une salutation selon selon son id Cr\u00e9ation du r\u00e9pertoire du projet Cr\u00e9ez \u00e0 la racine de votre r\u00e9pertoire \"localhost\" de Ampps (par d\u00e9faut \u00e7a sera C:\\Program Files\\Ampps\\www ) un nouveau r\u00e9pertoire pour votre projet nomm\u00e9 helloworldapi . Cr\u00e9ez aussi les sous-r\u00e9pertoire Src et api o\u00f9 vous allez retrouver la plupart des fichiers de l'api. Cr\u00e9ation de la base de donn\u00e9es et insertion des donn\u00e9es Cr\u00e9ez la base de donn\u00e9es helloworldapi . Ex\u00e9cutez le script suivant pour cr\u00e9er la table salutation et y ins\u00e9rer les donn\u00e9es de d\u00e9part. CREATE TABLE IF NOT EXISTS helloworldapi.salutations ( id INT auto_increment NOT NULL, texte varchar(100) NOT NULL, langue varchar(2) NOT NULL, PRIMARY KEY (id) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci; INSERT INTO helloworldapi.salutations (texte,langue) VALUES ('Bonjour le monde','fr'), ('Bon matin','fr'), ('Salut','fr'), ('Bonne nuit je vais travailler','fr'), ('Hello world','en'), ('Good morning','en'), ('Hi','en'), ('Good night, i''m going to work','en'), ('Hola Mundo','es'), ('Buenos dias','es'), ('Hola','es'), ('Buenas noches me voy a trabajar','es'), ('Hallo Welt','de'), ('guten Morgen','de'), ('Hallo','de'), ('Gute Nacht, ich gehe zur Arbei','de'); Ajout des informations de connexion Installez une d\u00e9pendance \u00e0 la biblioth\u00e8que DotEnv dans votre projet : https://github.com/vlucas/phpdotenv . Cr\u00e9ez les trois fichiers suivants : .gitignore .env .env.exemple DB_HOST=localhost DB_PORT=3306 DB_DATABASE= DB_USERNAME= DB_PASSWORD= .env DB_HOST=localhost DB_PORT=3306 DB_DATABASE=helloworldapi DB_USERNAME=votre_usager_mysql DB_PASSWORD=votre_mot_de_passe Connexion \u00e0 la base de donn\u00e9es Cr\u00e9ez le fichier Database.php dans le sous-r\u00e9pertoire Src Copiez le code suivant <?php /* Src/Database.php Gestion de la connexion \u00e0 la base de donn\u00e9es source : https://dev.to/shahbaz17/build-a-simple-rest-api-in-php-2edl */ namespace Src; class Database { private $dbConnection = null; public function __construct() { $host = $_ENV['DB_HOST']; $port = $_ENV['DB_PORT']; $db = $_ENV['DB_DATABASE']; $username = $_ENV['DB_USERNAME']; $password = $_ENV['DB_PASSWORD']; try { $this->dbConnection = new \\PDO( \"mysql:host=$host;port=$port;dbname=$db\", $username, $password ); } catch (\\PDOException $e) { exit($e->getMessage()); } } public function getConnection() { return $this->dbConnection; } } ?> Pour plus d'information sur PDO : www.php.net/manual/fr/book.pdo.php Modification au fichier composer.json Ajoutez un chargement automatique (autoload) du r\u00e9pertoire Src de votre projet dans le fichier composer.json. Votre fichier devrait ressembler \u00e0 ceci : { \"require\": { \"vlucas/phpdotenv\": \"^5.3\" }, // Section \u00e0 ajouter \"autoload\": { \"psr-4\": { \"Src\\\\\": \"src/\" } } } Une fois les modifications effectu\u00e9es, lancez la commande suivante en console composer update Rediriger les routes Nous allons inclure les param\u00e8tres de nos appel directement dans l'url de la requ\u00eate. ex: l'url http://localhost/HelloWorldApi/greetings/show/6/ va afficher la salutation avec le id 6, mais en r\u00e9alit\u00e9 l'url serait plut\u00f4t http://localhost/HelloWorldApi/api/index.php?view=single&id=$6 . Une fa\u00e7on de faire est de cr\u00e9er un fichier .htaccess pour indiquer \u00e0 notre serveur Apache de \"traduire\" l'url vers le bon fichier. Cr\u00e9ez un fichier .htaccess \u00e0 la racine de votre projet et incluez les lignes suivantes : # Activer la r\u00e9\u00e9criture de l'url Options +FollowSymlinks RewriteEngine on # D\u00e9finition des r\u00e8gles de r\u00e9\u00e9criture RewriteRule ^greetings/list api/index.php?view=all [nc,qsa] RewriteRule ^greetings/random api/index.php?view=single&random=1 [nc,qsa] RewriteRule ^greetings/show/([0-9]+) api/index.php?view=single&id=$1 [nc,qsa] Fichier de chargement Cr\u00e9ez le fichier bootstrap.php \u00e0 la racine du projet. Ce fichier s'occuper de charger le n\u00e9cessaire au fonctionnement de notre api. Copiez le code suivant <?php // Chargement des d\u00e9pendances require 'vendor/autoload.php'; use Src\\Database; // Chargement dans les variable d'environnement le contenu du fichier .env // Source : https://github.com/vlucas/phpdotenv $dotenv = Dotenv\\Dotenv::createImmutable(__DIR__); $dotenv->safeLoad(); // Initialisation et r\u00e9cup\u00e9ration de la connexion \u00e0 la base de donn\u00e9es $dbConnection = (new Database())->getConnection(); ?> Cr\u00e9ation de la \"porte d'entr\u00e9e\" Cr\u00e9ez le fichier index.php dans le sous-r\u00e9pertoire api . Ce fichier sera en quelque sorte le point d'entr\u00e9e de notre api. Copiez le code suivant dans le fichier. <?php /* api/index.php */ require(\"../bootstrap.php\"); use Src\\GreetingHandler; // R\u00e9cup\u00e9ration des param\u00eatres de la requ\u00eate $view = $_GET[\"view\"] ?? \"\"; $random = $_GET[\"random\"] ?? 0; $greetingId = $_GET[\"id\"] ?? 0; // Mappage selon les paramtes de l'url switch($view){ case \"all\": // Pour le endpoint /greetings/list $mobileRestHandler = new GreetingHandler($dbConnection); $mobileRestHandler->getAllGreetings(); break; // ... } ?> Cr\u00e9ation d'une classe pour construire la r\u00e9ponse Cr\u00e9ez le fichier SimpleRest.php dans le sous-r\u00e9pertoire Src . Cette classe aidera \u00e0 construire la r\u00e9ponse http \u00e0 la requ\u00eate. Copiez le code suivant dans le fichier. <?php /* Cette classe est utilis\u00e9e pour facilit\u00e9 la cr\u00e9ation de l'ent\u00eate http de la r\u00e9ponse Source : https://phppot.com/php/php-restful-web-service/ */ namespace Src; class SimpleRest { private $httpVersion = \"HTTP/1.1\"; public function setHttpHeaders($contentType, $statusCode){ $statusMessage = $this -> getHttpStatusMessage($statusCode); header($this->httpVersion. \" \". $statusCode .\" \". $statusMessage); $contentType = strpos($contentType,'text/html') !== false ? \"X-Content-Type-Options: nosniff\" : $contentType; header(\"Content-Type:\". $contentType); } public function getHttpStatusMessage($statusCode){ $httpStatus = array( 100 => 'Continue', 101 => 'Switching Protocols', 200 => 'OK', 201 => 'Created', 202 => 'Accepted', 203 => 'Non-Authoritative Information', 204 => 'No Content', 205 => 'Reset Content', 206 => 'Partial Content', 300 => 'Multiple Choices', 301 => 'Moved Permanently', 302 => 'Found', 303 => 'See Other', 304 => 'Not Modified', 305 => 'Use Proxy', 306 => '(Unused)', 307 => 'Temporary Redirect', 400 => 'Bad Request', 401 => 'Unauthorized', 402 => 'Payment Required', 403 => 'Forbidden', 404 => 'Not Found', 405 => 'Method Not Allowed', 406 => 'Not Acceptable', 407 => 'Proxy Authentication Required', 408 => 'Request Timeout', 409 => 'Conflict', 410 => 'Gone', 411 => 'Length Required', 412 => 'Precondition Failed', 413 => 'Request Entity Too Large', 414 => 'Request-URI Too Long', 415 => 'Unsupported Media Type', 416 => 'Requested Range Not Satisfiable', 417 => 'Expectation Failed', 500 => 'Internal Server Error', 501 => 'Not Implemented', 502 => 'Bad Gateway', 503 => 'Service Unavailable', 504 => 'Gateway Timeout', 505 => 'HTTP Version Not Supported'); return ($httpStatus[$statusCode]) ? $httpStatus[$statusCode] : $httpStatus[500]; } } ?> Cr\u00e9ation du contr\u00f4leur de la table salutations Cr\u00e9ez le fichier GreetingHandler.php dans le sous-r\u00e9pertoire Src . Ce fichier sert \u00e0 faire le pont entre les routes et l'acc\u00e8s aux donn\u00e9es de la base de donn\u00e9es. Il s'occupera aussi de cr\u00e9er la r\u00e9ponse \u00e0 retourner \u00e0 l'usager. Copiez le code suivant dans le fichier. <?php /* Src/GreetingHandler.php */ namespace Src; use Src\\SimpleRest; use Src\\Greeting; class GreetingHandler extends SimpleRest { private $db; public function __construct($db) { $this->db = $db; } function getAllGreetings() { $greeting = new Greeting($this->db); $rawData = $greeting->getAllGreetings(); if(empty($rawData)) { $statusCode = 404; $rawData = array('error' => 'Aucune salutations trouv\u00e9es!'); } else { $statusCode = 200; } $this->buildResponse($rawData, $statusCode); } public function buildResponse($data, $statusCode) { $requestContentType = $_SERVER['HTTP_ACCEPT']; $this ->setHttpHeaders($requestContentType, $statusCode); if(strpos($requestContentType,'application/json') !== false) || { $response = $this->encodeJson($data); echo $response; } else if(strpos($requestContentType,'text/html') !== false){ $response = $this->encodeHtml($data); echo $response; } else if(strpos($requestContentType,'application/xml') !== false){ $response = $this->encodeXml($data); echo $response; } else if(strpos($requestContentType,'*/*') !== false) { $response = $this->encodeJson($data); echo $response; } } public function encodeHtml($responseData) { $htmlResponse = \"<table border='1'>\"; $htmlResponse .= \"<tr><th>id</th><th>texte</th><th>langue</th></tr>\"; foreach($responseData as $key=>$value) { $htmlResponse .= \"<tr><td>\". $value[\"id\"] . \"</td><td>\". $value[\"texte\"] . \"</td><td>\" . $value[\"langue\"] . \"</td></tr>\"; } $htmlResponse .= \"</table>\"; return $htmlResponse; } public function encodeJson($responseData) { $jsonResponse = json_encode($responseData); return $jsonResponse; } public function encodeXml($responseData) { // creating object of SimpleXMLElement $xml = new SimpleXMLElement('<?xml version=\"1.0\"?><mobile></mobile>'); foreach($responseData as $key=>$value) { $xml->addChild($key, $value); } return $xml->asXML(); } } ?> Couche d'acc\u00e8s aux donn\u00e9es de la table salutations Cr\u00e9ez le fichier Greeting.php dans le sous-r\u00e9pertoire Src . Ce fichier va ex\u00e9cuter les requ\u00eates \u00e0 la base de donn\u00e9es et retourner les donn\u00e9es brutes au contr\u00f4leur. Copiez le code suivant dans le fichier. <?php namespace Src; class Greeting{ private $db; public function __construct($db) { $this->db = $db; } public function getAllGreetings(){ $query = \"SELECT id, texte, langue FROM salutations;\"; $statement = $this->db->query($query); $result = $statement->fetchAll(\\PDO::FETCH_ASSOC); return $result; } } Test de la route La route /greetings/list est maintenant fonctionnelle, vous pouvez la tester avec l'url complet qui sera http://localhost/HelloWorldApi/greetings/list . Testez la route dans un navigateur. Testez aussi la route avec Postman. Cr\u00e9ation des autres routes En vous basant sur le code du projet, cr\u00e9ez les deux routes restantes : /greetings/random - Affiche une salutation al\u00e9atoire /greetings/show/[id] - Affiche la salutation avec le id sp\u00e9cifi\u00e9 en param\u00e8tre Testez ensuite les nouvelles routes avec Postman. Modification de la route de la salutation al\u00e9atoire Modifiez la route /greetings/random pour qu'elle puisse prendre en param\u00e8tre la langue de la salutation. La r\u00e8gle de r\u00e9\u00e9criture dans le fichier .htaccess deviendra RewriteRule ^greetings/random/?(.*)$ api/index.php?view=single&random=1&langue=$1 [nc,qsa] ?(.*) indique un param\u00e8tre optionnel acceptant n'importe quel caract\u00e8re. langue=$1 indique que le param\u00e8tre sera stock\u00e9 dans la variable langue . Les codes de langue sont dans la base de donn\u00e9es (fr, en, es et de). Si on entre autre chose, soit vous retournez une erreur 404, soit vous n'en tenez pas compte et s\u00e9lectionnez la salutation parmi toute les langues. Au final la route /greetings/random/en retournera une citation al\u00e9atoire en anglais.","title":"03 - HelloWorldApi"},{"location":"exercices/03_hello_world_api/#exercice-03-helloworldapi","text":"On va cr\u00e9er notre premi\u00e8re api en PHP de base sans utiliser de framework et le moins de d\u00e9pendance possible. \u00c7a nous permettra de comprendre la base avant de nous lancer dans des projets plus complexes. Quoi de mieux qu'un Hello World pour commencer...","title":"Exercice 03 - HelloWorldApi"},{"location":"exercices/03_hello_world_api/#prerequis","text":"Ampps (ou une autre \"stack\" incluant au minimum Apache, MySQL et PHP) - https://ampps.com/ Composer - https://getcomposer.org/","title":"Pr\u00e9requis"},{"location":"exercices/03_hello_world_api/#description-des-routes","text":"Route Description /greetings/list Afficher toutes les salutations /greetings/random Afficher une salutation al\u00e9atoire /greetings/show/[id] Afficher une salutation selon selon son id","title":"Description des routes"},{"location":"exercices/03_hello_world_api/#creation-du-repertoire-du-projet","text":"Cr\u00e9ez \u00e0 la racine de votre r\u00e9pertoire \"localhost\" de Ampps (par d\u00e9faut \u00e7a sera C:\\Program Files\\Ampps\\www ) un nouveau r\u00e9pertoire pour votre projet nomm\u00e9 helloworldapi . Cr\u00e9ez aussi les sous-r\u00e9pertoire Src et api o\u00f9 vous allez retrouver la plupart des fichiers de l'api.","title":"Cr\u00e9ation du r\u00e9pertoire du projet"},{"location":"exercices/03_hello_world_api/#creation-de-la-base-de-donnees-et-insertion-des-donnees","text":"Cr\u00e9ez la base de donn\u00e9es helloworldapi . Ex\u00e9cutez le script suivant pour cr\u00e9er la table salutation et y ins\u00e9rer les donn\u00e9es de d\u00e9part. CREATE TABLE IF NOT EXISTS helloworldapi.salutations ( id INT auto_increment NOT NULL, texte varchar(100) NOT NULL, langue varchar(2) NOT NULL, PRIMARY KEY (id) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci; INSERT INTO helloworldapi.salutations (texte,langue) VALUES ('Bonjour le monde','fr'), ('Bon matin','fr'), ('Salut','fr'), ('Bonne nuit je vais travailler','fr'), ('Hello world','en'), ('Good morning','en'), ('Hi','en'), ('Good night, i''m going to work','en'), ('Hola Mundo','es'), ('Buenos dias','es'), ('Hola','es'), ('Buenas noches me voy a trabajar','es'), ('Hallo Welt','de'), ('guten Morgen','de'), ('Hallo','de'), ('Gute Nacht, ich gehe zur Arbei','de');","title":"Cr\u00e9ation de la base de donn\u00e9es et insertion des donn\u00e9es"},{"location":"exercices/03_hello_world_api/#ajout-des-informations-de-connexion","text":"Installez une d\u00e9pendance \u00e0 la biblioth\u00e8que DotEnv dans votre projet : https://github.com/vlucas/phpdotenv . Cr\u00e9ez les trois fichiers suivants : .gitignore .env .env.exemple DB_HOST=localhost DB_PORT=3306 DB_DATABASE= DB_USERNAME= DB_PASSWORD= .env DB_HOST=localhost DB_PORT=3306 DB_DATABASE=helloworldapi DB_USERNAME=votre_usager_mysql DB_PASSWORD=votre_mot_de_passe","title":"Ajout des informations de connexion"},{"location":"exercices/03_hello_world_api/#connexion-a-la-base-de-donnees","text":"Cr\u00e9ez le fichier Database.php dans le sous-r\u00e9pertoire Src Copiez le code suivant <?php /* Src/Database.php Gestion de la connexion \u00e0 la base de donn\u00e9es source : https://dev.to/shahbaz17/build-a-simple-rest-api-in-php-2edl */ namespace Src; class Database { private $dbConnection = null; public function __construct() { $host = $_ENV['DB_HOST']; $port = $_ENV['DB_PORT']; $db = $_ENV['DB_DATABASE']; $username = $_ENV['DB_USERNAME']; $password = $_ENV['DB_PASSWORD']; try { $this->dbConnection = new \\PDO( \"mysql:host=$host;port=$port;dbname=$db\", $username, $password ); } catch (\\PDOException $e) { exit($e->getMessage()); } } public function getConnection() { return $this->dbConnection; } } ?> Pour plus d'information sur PDO : www.php.net/manual/fr/book.pdo.php","title":"Connexion \u00e0 la base de donn\u00e9es"},{"location":"exercices/03_hello_world_api/#modification-au-fichier-composerjson","text":"Ajoutez un chargement automatique (autoload) du r\u00e9pertoire Src de votre projet dans le fichier composer.json. Votre fichier devrait ressembler \u00e0 ceci : { \"require\": { \"vlucas/phpdotenv\": \"^5.3\" }, // Section \u00e0 ajouter \"autoload\": { \"psr-4\": { \"Src\\\\\": \"src/\" } } } Une fois les modifications effectu\u00e9es, lancez la commande suivante en console composer update","title":"Modification au fichier composer.json"},{"location":"exercices/03_hello_world_api/#rediriger-les-routes","text":"Nous allons inclure les param\u00e8tres de nos appel directement dans l'url de la requ\u00eate. ex: l'url http://localhost/HelloWorldApi/greetings/show/6/ va afficher la salutation avec le id 6, mais en r\u00e9alit\u00e9 l'url serait plut\u00f4t http://localhost/HelloWorldApi/api/index.php?view=single&id=$6 . Une fa\u00e7on de faire est de cr\u00e9er un fichier .htaccess pour indiquer \u00e0 notre serveur Apache de \"traduire\" l'url vers le bon fichier. Cr\u00e9ez un fichier .htaccess \u00e0 la racine de votre projet et incluez les lignes suivantes : # Activer la r\u00e9\u00e9criture de l'url Options +FollowSymlinks RewriteEngine on # D\u00e9finition des r\u00e8gles de r\u00e9\u00e9criture RewriteRule ^greetings/list api/index.php?view=all [nc,qsa] RewriteRule ^greetings/random api/index.php?view=single&random=1 [nc,qsa] RewriteRule ^greetings/show/([0-9]+) api/index.php?view=single&id=$1 [nc,qsa]","title":"Rediriger les routes"},{"location":"exercices/03_hello_world_api/#fichier-de-chargement","text":"Cr\u00e9ez le fichier bootstrap.php \u00e0 la racine du projet. Ce fichier s'occuper de charger le n\u00e9cessaire au fonctionnement de notre api. Copiez le code suivant <?php // Chargement des d\u00e9pendances require 'vendor/autoload.php'; use Src\\Database; // Chargement dans les variable d'environnement le contenu du fichier .env // Source : https://github.com/vlucas/phpdotenv $dotenv = Dotenv\\Dotenv::createImmutable(__DIR__); $dotenv->safeLoad(); // Initialisation et r\u00e9cup\u00e9ration de la connexion \u00e0 la base de donn\u00e9es $dbConnection = (new Database())->getConnection(); ?>","title":"Fichier de chargement"},{"location":"exercices/03_hello_world_api/#creation-de-la-porte-dentree","text":"Cr\u00e9ez le fichier index.php dans le sous-r\u00e9pertoire api . Ce fichier sera en quelque sorte le point d'entr\u00e9e de notre api. Copiez le code suivant dans le fichier. <?php /* api/index.php */ require(\"../bootstrap.php\"); use Src\\GreetingHandler; // R\u00e9cup\u00e9ration des param\u00eatres de la requ\u00eate $view = $_GET[\"view\"] ?? \"\"; $random = $_GET[\"random\"] ?? 0; $greetingId = $_GET[\"id\"] ?? 0; // Mappage selon les paramtes de l'url switch($view){ case \"all\": // Pour le endpoint /greetings/list $mobileRestHandler = new GreetingHandler($dbConnection); $mobileRestHandler->getAllGreetings(); break; // ... } ?>","title":"Cr\u00e9ation de la \"porte d'entr\u00e9e\""},{"location":"exercices/03_hello_world_api/#creation-dune-classe-pour-construire-la-reponse","text":"Cr\u00e9ez le fichier SimpleRest.php dans le sous-r\u00e9pertoire Src . Cette classe aidera \u00e0 construire la r\u00e9ponse http \u00e0 la requ\u00eate. Copiez le code suivant dans le fichier. <?php /* Cette classe est utilis\u00e9e pour facilit\u00e9 la cr\u00e9ation de l'ent\u00eate http de la r\u00e9ponse Source : https://phppot.com/php/php-restful-web-service/ */ namespace Src; class SimpleRest { private $httpVersion = \"HTTP/1.1\"; public function setHttpHeaders($contentType, $statusCode){ $statusMessage = $this -> getHttpStatusMessage($statusCode); header($this->httpVersion. \" \". $statusCode .\" \". $statusMessage); $contentType = strpos($contentType,'text/html') !== false ? \"X-Content-Type-Options: nosniff\" : $contentType; header(\"Content-Type:\". $contentType); } public function getHttpStatusMessage($statusCode){ $httpStatus = array( 100 => 'Continue', 101 => 'Switching Protocols', 200 => 'OK', 201 => 'Created', 202 => 'Accepted', 203 => 'Non-Authoritative Information', 204 => 'No Content', 205 => 'Reset Content', 206 => 'Partial Content', 300 => 'Multiple Choices', 301 => 'Moved Permanently', 302 => 'Found', 303 => 'See Other', 304 => 'Not Modified', 305 => 'Use Proxy', 306 => '(Unused)', 307 => 'Temporary Redirect', 400 => 'Bad Request', 401 => 'Unauthorized', 402 => 'Payment Required', 403 => 'Forbidden', 404 => 'Not Found', 405 => 'Method Not Allowed', 406 => 'Not Acceptable', 407 => 'Proxy Authentication Required', 408 => 'Request Timeout', 409 => 'Conflict', 410 => 'Gone', 411 => 'Length Required', 412 => 'Precondition Failed', 413 => 'Request Entity Too Large', 414 => 'Request-URI Too Long', 415 => 'Unsupported Media Type', 416 => 'Requested Range Not Satisfiable', 417 => 'Expectation Failed', 500 => 'Internal Server Error', 501 => 'Not Implemented', 502 => 'Bad Gateway', 503 => 'Service Unavailable', 504 => 'Gateway Timeout', 505 => 'HTTP Version Not Supported'); return ($httpStatus[$statusCode]) ? $httpStatus[$statusCode] : $httpStatus[500]; } } ?>","title":"Cr\u00e9ation d'une classe pour construire la r\u00e9ponse"},{"location":"exercices/03_hello_world_api/#creation-du-controleur-de-la-table-salutations","text":"Cr\u00e9ez le fichier GreetingHandler.php dans le sous-r\u00e9pertoire Src . Ce fichier sert \u00e0 faire le pont entre les routes et l'acc\u00e8s aux donn\u00e9es de la base de donn\u00e9es. Il s'occupera aussi de cr\u00e9er la r\u00e9ponse \u00e0 retourner \u00e0 l'usager. Copiez le code suivant dans le fichier. <?php /* Src/GreetingHandler.php */ namespace Src; use Src\\SimpleRest; use Src\\Greeting; class GreetingHandler extends SimpleRest { private $db; public function __construct($db) { $this->db = $db; } function getAllGreetings() { $greeting = new Greeting($this->db); $rawData = $greeting->getAllGreetings(); if(empty($rawData)) { $statusCode = 404; $rawData = array('error' => 'Aucune salutations trouv\u00e9es!'); } else { $statusCode = 200; } $this->buildResponse($rawData, $statusCode); } public function buildResponse($data, $statusCode) { $requestContentType = $_SERVER['HTTP_ACCEPT']; $this ->setHttpHeaders($requestContentType, $statusCode); if(strpos($requestContentType,'application/json') !== false) || { $response = $this->encodeJson($data); echo $response; } else if(strpos($requestContentType,'text/html') !== false){ $response = $this->encodeHtml($data); echo $response; } else if(strpos($requestContentType,'application/xml') !== false){ $response = $this->encodeXml($data); echo $response; } else if(strpos($requestContentType,'*/*') !== false) { $response = $this->encodeJson($data); echo $response; } } public function encodeHtml($responseData) { $htmlResponse = \"<table border='1'>\"; $htmlResponse .= \"<tr><th>id</th><th>texte</th><th>langue</th></tr>\"; foreach($responseData as $key=>$value) { $htmlResponse .= \"<tr><td>\". $value[\"id\"] . \"</td><td>\". $value[\"texte\"] . \"</td><td>\" . $value[\"langue\"] . \"</td></tr>\"; } $htmlResponse .= \"</table>\"; return $htmlResponse; } public function encodeJson($responseData) { $jsonResponse = json_encode($responseData); return $jsonResponse; } public function encodeXml($responseData) { // creating object of SimpleXMLElement $xml = new SimpleXMLElement('<?xml version=\"1.0\"?><mobile></mobile>'); foreach($responseData as $key=>$value) { $xml->addChild($key, $value); } return $xml->asXML(); } } ?>","title":"Cr\u00e9ation du contr\u00f4leur de la table salutations"},{"location":"exercices/03_hello_world_api/#couche-dacces-aux-donnees-de-la-table-salutations","text":"Cr\u00e9ez le fichier Greeting.php dans le sous-r\u00e9pertoire Src . Ce fichier va ex\u00e9cuter les requ\u00eates \u00e0 la base de donn\u00e9es et retourner les donn\u00e9es brutes au contr\u00f4leur. Copiez le code suivant dans le fichier. <?php namespace Src; class Greeting{ private $db; public function __construct($db) { $this->db = $db; } public function getAllGreetings(){ $query = \"SELECT id, texte, langue FROM salutations;\"; $statement = $this->db->query($query); $result = $statement->fetchAll(\\PDO::FETCH_ASSOC); return $result; } }","title":"Couche d'acc\u00e8s aux donn\u00e9es de la table salutations"},{"location":"exercices/03_hello_world_api/#test-de-la-route","text":"La route /greetings/list est maintenant fonctionnelle, vous pouvez la tester avec l'url complet qui sera http://localhost/HelloWorldApi/greetings/list . Testez la route dans un navigateur. Testez aussi la route avec Postman.","title":"Test de la route"},{"location":"exercices/03_hello_world_api/#creation-des-autres-routes","text":"En vous basant sur le code du projet, cr\u00e9ez les deux routes restantes : /greetings/random - Affiche une salutation al\u00e9atoire /greetings/show/[id] - Affiche la salutation avec le id sp\u00e9cifi\u00e9 en param\u00e8tre Testez ensuite les nouvelles routes avec Postman.","title":"Cr\u00e9ation des autres routes"},{"location":"exercices/03_hello_world_api/#modification-de-la-route-de-la-salutation-aleatoire","text":"Modifiez la route /greetings/random pour qu'elle puisse prendre en param\u00e8tre la langue de la salutation. La r\u00e8gle de r\u00e9\u00e9criture dans le fichier .htaccess deviendra RewriteRule ^greetings/random/?(.*)$ api/index.php?view=single&random=1&langue=$1 [nc,qsa] ?(.*) indique un param\u00e8tre optionnel acceptant n'importe quel caract\u00e8re. langue=$1 indique que le param\u00e8tre sera stock\u00e9 dans la variable langue . Les codes de langue sont dans la base de donn\u00e9es (fr, en, es et de). Si on entre autre chose, soit vous retournez une erreur 404, soit vous n'en tenez pas compte et s\u00e9lectionnez la salutation parmi toute les langues. Au final la route /greetings/random/en retournera une citation al\u00e9atoire en anglais.","title":"Modification de la route de la salutation al\u00e9atoire"},{"location":"exercices/04_libapi/","text":"Exercice 04 - libAPI Pour cet exercice nous allons cr\u00e9er un r\u00e9pertoire de livres. M\u00eame si le sujet est assez simple, nous allons cr\u00e9er une api un peu plus \u00e9toffer gr\u00e2ce au framework SLIM . Cet exercice va \u00eatre utiliser sur plusieurs cours, on va y int\u00e9grer petit \u00e0 petit plusieurs notions essentielles, alors il est important de suivre chaque \u00e9tape et de les compl\u00e9ter. Pr\u00e9requis Ampps (ou une autre \"stack\" incluant au minimum Apache, MySQL et PHP) - https://ampps.com/ Composer - https://getcomposer.org/ Installation Cloner le d\u00e9pot suivant \u00e0 la racine de votre r\u00e9pertoire \"localhost\" de Ampps (par d\u00e9faut \u00e7a sera C:\\Program Files\\Ampps\\www ) : https://github.com/ServiceWeb-H2022/base-slim-skeleton Renommez le r\u00e9pertoire cr\u00e9\u00e9 (base-slim-skeleton) pour libapi . Roulez la commande composer update dans le r\u00e9pertoire de votre projet. Cr\u00e9ez une base de donn\u00e9es nomm\u00e9e aussi libapi Modifier les informations de connexion \u00e0 la base de donn\u00e9es dans le fichier config/settings.php. Rouler le script ressource/sql/createUserTable.sql dans la base de donn\u00e9es cr\u00e9e pour tester la cr\u00e9ation d'un usager. Test de l'installation Vous devriez avoir acc\u00e8s maintenant aux routes suivantes. Testez les avec Postman et un navigateur pour la route de la documentation. M\u00e9thodes Route Description GET / Message de bienvenue GET /docs Documentation de l'api POST /users Cr\u00e9ation d'un usager Pour la cr\u00e9ation d'un usager, ajouter dans le body de la requ\u00eate l'information en JSON : { \"username\" : \"[username]\", \"first_name\" : \"[first_name]\", \"last_name\" : \"[last_name]\", \"email\" : \"[email]\" } Structure du projet /config Bootstrap.php Point d\u2019entr\u00e9e Routes.php C\u2019est ici qu\u2019on va d\u00e9finir les routes Settings.php Constantes de configuration. Par exemple les informations pour se connecter \u00e0 la bd Container.php Fonctions \u201cinject\u00e9es\u201d dans le constructeur. Middleware.php Code qui s\u2019execute automatiquement avant ou apr\u00e8s les requ\u00eates. (Authentication) /src /action Les controlleurs, un fichier par \u201caction\u201d /domain /user S\u00e9parer la logique application de l\u2019acc\u00e8s aux donn\u00e9es /Repository Acc\u00e8s aux donn\u00e9es /Service Logique de l\u2019api. Chaque classe doit n\u2019avoir qu\u2019une seule responsabilit\u00e9e La route appelle une classe action, ensuite le bon service est appel\u00e9. Le service va chercher les donn\u00e9es avec la classe repository correspondante. Exercices Premi\u00e8re partie - Routes Cr\u00e9ez les routes suivantes pour compl\u00e9ter la gestion des utilisateurs : M\u00e9thodes Route Description GET /users Lister tous les usagers GET /users/{id} Lister seulement l'usager avec le id en param\u00e8tre PUT /users/{id} Modifier l'usager avec le id en param\u00e8tre DELETE /users/{id} Supprimer l'usager avec le id en param\u00e8tre Pour chaque route, cr\u00e9ez une classe \"action\", \"service\" et \"repository\". Testez ensuite vos routes avec Postman. Deuxi\u00e8me partie - Documentation Cr\u00e9ez la documentation pour les routes d\u00e9j\u00e0 existantes. \u00c0 partir de maintenant, pour chaque route que nous allons ajouter, on va cr\u00e9er en m\u00eame temps la documentation. Renommez le fichier de documentation resources/docs/base_slim_skeleton_v1.yaml pour libapi.yaml . C'est dans ce fichier que vous allez \u00e9crire la documentation. Il y a d\u00e9j\u00e0 une partie de fait pour les routes qui \u00e9tait d\u00e9j\u00e0 pr\u00e9sente. Modifiez le code du fichier src/Action/Docs/SwaggerUiAction.php pour que la variable $yamlFile fasse r\u00e9f\u00e9rence \u00e0 votre fichier renomm\u00e9. En vous inspirant de ce qui est d\u00e9j\u00e0 pr\u00e9sent dans le fichier de documentation et du site swagger.io , r\u00e9digez la documentation pour les 4 routes que vous avez cr\u00e9\u00e9 dans la premi\u00e8re partie. Une fois termin\u00e9 elle devrait apparaitre dans la page affich\u00e9 quand vous utilisez la route / Troisi\u00e8me partie - Filtre, tri, s\u00e9lection et pagination \u00c0 l'aide des notes de cours sur les bonnes pratiques de conception d'un api, r\u00e9visez ce que vous avez fait jusqu'\u00e0 maintenant et apporter des corrections \u00e0 votre projet si n\u00e9cessaire. Ajouter les options de filtre, tri, s\u00e9lection de champs et de pagination seulement pour la route GET /users Quatri\u00e8me partie - R\u00e9vision et formatage de la r\u00e9ponse Dans le r\u00e9pertoire resources/sql vous devriez avoir un fichier nomm\u00e9 books_insert_data.zip . S'il n'est pas pr\u00e9sent vous pouvez le r\u00e9cup\u00e9rer depuis le liens suivant : books_insert_data.zip . Le fichier contient deux scripts SQL \u00e0 ex\u00e9cuter, un de cr\u00e9ation de la table books et un autre d'insertion de donn\u00e9es dans cette table. Une fois les donn\u00e9es import\u00e9es, ajoutez les routes suivantes \u00e0 votre API Afficher la liste de tous les livres M\u00e9thode Route Description GET /livres Liste de tous les livres Vous devez ajouter une pagination \u00e0 la route. L'usager doit pouvoir entrer le num\u00e9ro de page qu'il souhaite, s'il n'entre rien la page 1 sera affich\u00e9e par d\u00e9faut. Le nombre de livre \u00e0 afficher par page est de 20 et vous devez commencer au premier enregistrement. Ex : /livres?page=2 affichera les livres 21 \u00e0 40. Par d\u00e9faut la liste sera afficher par ordre alphab\u00e9tique selon le titre du livre, permettez de pouvoir afficher la liste selon un tri alphab\u00e9tique invers\u00e9. La r\u00e9ponse devra \u00eatre en format JSON et respecter la structure suivante : { \"livres\" : [ { \"id\" : \"24876258\", \"title\" : \"The Aeronaut's Windlass\", \"series\" : \"(The Cinder Spires #1)\", \"cover_link\" : \"https://i.gr-assets.com/images/S/compressed.ph...\", \"author\" : \"Jim Butcher\", \"average_rating\" : \"4,17\", \"isbn\" : \"0451466802\", \"isbn13\" : \"9780451466808\" }, { ... } ], \"page\" : 1, \"page_total\" : 247 } Afficher la description d'un livre M\u00e9thode Route Description GET /livres/[id]/description Affiche la description d'un livre selon son id La route doit permettre d'afficher la description d'un livre selon son id. Si le id n'existe pas, le code de statut 404 doit \u00eatre retourn\u00e9 et un message d'erreur dans la r\u00e9ponse. Format de la r\u00e9ponse quand le id existe : { \"id\" : \"24876258\", \"title\" : \"The Aeronaut's Windlass\", \"description\" : \"Jim Butcher, the #1 New York Times bestselling author ...\" } Format de la r\u00e9ponse si le id n'existe pas : { \"errors\" : { \"code\" : \"404\", \"message\" : \"Le id [id] n'existe pas\" } } Cinqui\u00e8me partie - Utilisation de Monolog Avant de continuer, faites un commit des modifications que vous avez apport\u00e9 \u00e0 votre projet jusqu'\u00e0 maintenant : Le message du commit doit \u00eatre \"Exercice 04 partie 4 termin\u00e9\" Faites un push du commit sur votre d\u00e9p\u00f4t GitHub Cr\u00e9er maintenant une branche \u00e0 votre projet nomm\u00e9e Exercice04-5 . \u00c0 l'aide des notes de cours sur l'utilisation de Monolog, faites en sorte qu'\u00e0 chaque fois qu'on modifie un usager, un message d'\u00e9v\u00e9nement s'inscrit dans un fichier de log avec les configurations suivantes : Nom du fichier de log : usersLog Identification du message : updateUser Niveau de s\u00e9v\u00e9rit\u00e9 : INFO Message : \"L'usager username a \u00e9t\u00e9 modifi\u00e9 : { les nouvelles valeur de l'usager }\" Exemple de r\u00e9sultat [2022-02-11T06:43:08.169802+01:00] updateUser.INFO: L'usager mathProf a \u00e9t\u00e9 modifi\u00e9 : {\"username\" : \"mathProf\",\"first_name\" : \"Mathieu\",\"last_name\" : \"Fr\u00e9chette\",\"email\" : \"frechette.mathieu@cegepvicto.ca\" } Une fois termin\u00e9, fusionner votre branche au projet principal en suivant ces \u00e9tapes : Faites un commit des modifications avec le message \"Exercice 04 partie 5 termin\u00e9\" Changer de branche pour revenir \u00e0 la branche principale Fusionner la branche Exercice04-5 dans la branche principale Faites un push du commit sur votre d\u00e9p\u00f4t GitHub Sixi\u00e8me partie - Middleware Faites le n\u00e9cessaire pour qu'\u00e0 chaque requ\u00eate HTTP vers votre projet, les informations suivantes soit inscrite dans un fichier de log : L'identificateur de la ligne sera RouteLogMiddleware Le niveau de s\u00e9v\u00e9rit\u00e9 est INFO Ensuite ajoutez la m\u00e9thode HTTP (GET, POST, PUT, PATCH, DELETE) utilis\u00e9e Suivra le nom de la route, les param\u00e8tres de la section \"query\" s'il y en a et le contenu du body Exemple [2022-01-30T13:44:25.145185-05:00] RouteLogMiddleware.INFO: GET /libapi/docs [2022-01-30T13:44:25.145185-05:00] RouteLogMiddleware.INFO: GET /libapi/livres?page=3 [2022-02-14T06:49:19.833744+01:00] RouteLogMiddleware.INFO: GET /libapi/ {\"cle1\":\"Valeur1\",\"cle2\":\"Valeur2\"} Quelques pistes de solution Cr\u00e9er un fichier php dans le r\u00e9pertoire src/Middleware qui contiendra votre code Invoquer cette classe au niveau de l'application Dans votre classe \"middleware\", la structure de la fonction __invoke() devrait ressembler \u00e0 ceci : public function __invoke( Request $request, RequestHandler $handler): Response { // Cette ligne ex\u00e9cute la requ\u00eate $response = $handler->handle($request); // Votre code ... return $response; } Pour r\u00e9cup\u00e9rer les informations g\u00e9n\u00e9rales de la route https://www.slimframework.com/docs/v4/cookbook/retrieving-current-route.html Pour les param\u00e8tres dans la route https://www.slimframework.com/docs/v4/objects/request.html#the-request-uri Pour le contenu du body, on l'a d\u00e9j\u00e0 vu quand on le r\u00e9cup\u00e8re pour traiter un requ\u00eate POST. https://www.slimframework.com/docs/v3/objects/request.html#the-request-body","title":"04 - LibAPI"},{"location":"exercices/04_libapi/#exercice-04-libapi","text":"Pour cet exercice nous allons cr\u00e9er un r\u00e9pertoire de livres. M\u00eame si le sujet est assez simple, nous allons cr\u00e9er une api un peu plus \u00e9toffer gr\u00e2ce au framework SLIM . Cet exercice va \u00eatre utiliser sur plusieurs cours, on va y int\u00e9grer petit \u00e0 petit plusieurs notions essentielles, alors il est important de suivre chaque \u00e9tape et de les compl\u00e9ter.","title":"Exercice 04 - libAPI"},{"location":"exercices/04_libapi/#prerequis","text":"Ampps (ou une autre \"stack\" incluant au minimum Apache, MySQL et PHP) - https://ampps.com/ Composer - https://getcomposer.org/","title":"Pr\u00e9requis"},{"location":"exercices/04_libapi/#installation","text":"Cloner le d\u00e9pot suivant \u00e0 la racine de votre r\u00e9pertoire \"localhost\" de Ampps (par d\u00e9faut \u00e7a sera C:\\Program Files\\Ampps\\www ) : https://github.com/ServiceWeb-H2022/base-slim-skeleton Renommez le r\u00e9pertoire cr\u00e9\u00e9 (base-slim-skeleton) pour libapi . Roulez la commande composer update dans le r\u00e9pertoire de votre projet. Cr\u00e9ez une base de donn\u00e9es nomm\u00e9e aussi libapi Modifier les informations de connexion \u00e0 la base de donn\u00e9es dans le fichier config/settings.php. Rouler le script ressource/sql/createUserTable.sql dans la base de donn\u00e9es cr\u00e9e pour tester la cr\u00e9ation d'un usager.","title":"Installation"},{"location":"exercices/04_libapi/#test-de-linstallation","text":"Vous devriez avoir acc\u00e8s maintenant aux routes suivantes. Testez les avec Postman et un navigateur pour la route de la documentation. M\u00e9thodes Route Description GET / Message de bienvenue GET /docs Documentation de l'api POST /users Cr\u00e9ation d'un usager Pour la cr\u00e9ation d'un usager, ajouter dans le body de la requ\u00eate l'information en JSON : { \"username\" : \"[username]\", \"first_name\" : \"[first_name]\", \"last_name\" : \"[last_name]\", \"email\" : \"[email]\" }","title":"Test de l'installation"},{"location":"exercices/04_libapi/#structure-du-projet","text":"/config Bootstrap.php Point d\u2019entr\u00e9e Routes.php C\u2019est ici qu\u2019on va d\u00e9finir les routes Settings.php Constantes de configuration. Par exemple les informations pour se connecter \u00e0 la bd Container.php Fonctions \u201cinject\u00e9es\u201d dans le constructeur. Middleware.php Code qui s\u2019execute automatiquement avant ou apr\u00e8s les requ\u00eates. (Authentication) /src /action Les controlleurs, un fichier par \u201caction\u201d /domain /user S\u00e9parer la logique application de l\u2019acc\u00e8s aux donn\u00e9es /Repository Acc\u00e8s aux donn\u00e9es /Service Logique de l\u2019api. Chaque classe doit n\u2019avoir qu\u2019une seule responsabilit\u00e9e La route appelle une classe action, ensuite le bon service est appel\u00e9. Le service va chercher les donn\u00e9es avec la classe repository correspondante.","title":"Structure du projet"},{"location":"exercices/04_libapi/#exercices","text":"","title":"Exercices"},{"location":"exercices/04_libapi/#premiere-partie-routes","text":"Cr\u00e9ez les routes suivantes pour compl\u00e9ter la gestion des utilisateurs : M\u00e9thodes Route Description GET /users Lister tous les usagers GET /users/{id} Lister seulement l'usager avec le id en param\u00e8tre PUT /users/{id} Modifier l'usager avec le id en param\u00e8tre DELETE /users/{id} Supprimer l'usager avec le id en param\u00e8tre Pour chaque route, cr\u00e9ez une classe \"action\", \"service\" et \"repository\". Testez ensuite vos routes avec Postman.","title":"Premi\u00e8re partie - Routes"},{"location":"exercices/04_libapi/#deuxieme-partie-documentation","text":"Cr\u00e9ez la documentation pour les routes d\u00e9j\u00e0 existantes. \u00c0 partir de maintenant, pour chaque route que nous allons ajouter, on va cr\u00e9er en m\u00eame temps la documentation. Renommez le fichier de documentation resources/docs/base_slim_skeleton_v1.yaml pour libapi.yaml . C'est dans ce fichier que vous allez \u00e9crire la documentation. Il y a d\u00e9j\u00e0 une partie de fait pour les routes qui \u00e9tait d\u00e9j\u00e0 pr\u00e9sente. Modifiez le code du fichier src/Action/Docs/SwaggerUiAction.php pour que la variable $yamlFile fasse r\u00e9f\u00e9rence \u00e0 votre fichier renomm\u00e9. En vous inspirant de ce qui est d\u00e9j\u00e0 pr\u00e9sent dans le fichier de documentation et du site swagger.io , r\u00e9digez la documentation pour les 4 routes que vous avez cr\u00e9\u00e9 dans la premi\u00e8re partie. Une fois termin\u00e9 elle devrait apparaitre dans la page affich\u00e9 quand vous utilisez la route /","title":"Deuxi\u00e8me partie - Documentation"},{"location":"exercices/04_libapi/#troisieme-partie-filtre-tri-selection-et-pagination","text":"\u00c0 l'aide des notes de cours sur les bonnes pratiques de conception d'un api, r\u00e9visez ce que vous avez fait jusqu'\u00e0 maintenant et apporter des corrections \u00e0 votre projet si n\u00e9cessaire. Ajouter les options de filtre, tri, s\u00e9lection de champs et de pagination seulement pour la route GET /users","title":"Troisi\u00e8me partie - Filtre, tri, s\u00e9lection et pagination"},{"location":"exercices/04_libapi/#quatrieme-partie-revision-et-formatage-de-la-reponse","text":"Dans le r\u00e9pertoire resources/sql vous devriez avoir un fichier nomm\u00e9 books_insert_data.zip . S'il n'est pas pr\u00e9sent vous pouvez le r\u00e9cup\u00e9rer depuis le liens suivant : books_insert_data.zip . Le fichier contient deux scripts SQL \u00e0 ex\u00e9cuter, un de cr\u00e9ation de la table books et un autre d'insertion de donn\u00e9es dans cette table. Une fois les donn\u00e9es import\u00e9es, ajoutez les routes suivantes \u00e0 votre API Afficher la liste de tous les livres M\u00e9thode Route Description GET /livres Liste de tous les livres Vous devez ajouter une pagination \u00e0 la route. L'usager doit pouvoir entrer le num\u00e9ro de page qu'il souhaite, s'il n'entre rien la page 1 sera affich\u00e9e par d\u00e9faut. Le nombre de livre \u00e0 afficher par page est de 20 et vous devez commencer au premier enregistrement. Ex : /livres?page=2 affichera les livres 21 \u00e0 40. Par d\u00e9faut la liste sera afficher par ordre alphab\u00e9tique selon le titre du livre, permettez de pouvoir afficher la liste selon un tri alphab\u00e9tique invers\u00e9. La r\u00e9ponse devra \u00eatre en format JSON et respecter la structure suivante : { \"livres\" : [ { \"id\" : \"24876258\", \"title\" : \"The Aeronaut's Windlass\", \"series\" : \"(The Cinder Spires #1)\", \"cover_link\" : \"https://i.gr-assets.com/images/S/compressed.ph...\", \"author\" : \"Jim Butcher\", \"average_rating\" : \"4,17\", \"isbn\" : \"0451466802\", \"isbn13\" : \"9780451466808\" }, { ... } ], \"page\" : 1, \"page_total\" : 247 } Afficher la description d'un livre M\u00e9thode Route Description GET /livres/[id]/description Affiche la description d'un livre selon son id La route doit permettre d'afficher la description d'un livre selon son id. Si le id n'existe pas, le code de statut 404 doit \u00eatre retourn\u00e9 et un message d'erreur dans la r\u00e9ponse. Format de la r\u00e9ponse quand le id existe : { \"id\" : \"24876258\", \"title\" : \"The Aeronaut's Windlass\", \"description\" : \"Jim Butcher, the #1 New York Times bestselling author ...\" } Format de la r\u00e9ponse si le id n'existe pas : { \"errors\" : { \"code\" : \"404\", \"message\" : \"Le id [id] n'existe pas\" } }","title":"Quatri\u00e8me partie - R\u00e9vision et formatage de la r\u00e9ponse"},{"location":"exercices/04_libapi/#cinquieme-partie-utilisation-de-monolog","text":"Avant de continuer, faites un commit des modifications que vous avez apport\u00e9 \u00e0 votre projet jusqu'\u00e0 maintenant : Le message du commit doit \u00eatre \"Exercice 04 partie 4 termin\u00e9\" Faites un push du commit sur votre d\u00e9p\u00f4t GitHub Cr\u00e9er maintenant une branche \u00e0 votre projet nomm\u00e9e Exercice04-5 . \u00c0 l'aide des notes de cours sur l'utilisation de Monolog, faites en sorte qu'\u00e0 chaque fois qu'on modifie un usager, un message d'\u00e9v\u00e9nement s'inscrit dans un fichier de log avec les configurations suivantes : Nom du fichier de log : usersLog Identification du message : updateUser Niveau de s\u00e9v\u00e9rit\u00e9 : INFO Message : \"L'usager username a \u00e9t\u00e9 modifi\u00e9 : { les nouvelles valeur de l'usager }\" Exemple de r\u00e9sultat [2022-02-11T06:43:08.169802+01:00] updateUser.INFO: L'usager mathProf a \u00e9t\u00e9 modifi\u00e9 : {\"username\" : \"mathProf\",\"first_name\" : \"Mathieu\",\"last_name\" : \"Fr\u00e9chette\",\"email\" : \"frechette.mathieu@cegepvicto.ca\" } Une fois termin\u00e9, fusionner votre branche au projet principal en suivant ces \u00e9tapes : Faites un commit des modifications avec le message \"Exercice 04 partie 5 termin\u00e9\" Changer de branche pour revenir \u00e0 la branche principale Fusionner la branche Exercice04-5 dans la branche principale Faites un push du commit sur votre d\u00e9p\u00f4t GitHub","title":"Cinqui\u00e8me partie - Utilisation de Monolog"},{"location":"exercices/04_libapi/#sixieme-partie-middleware","text":"Faites le n\u00e9cessaire pour qu'\u00e0 chaque requ\u00eate HTTP vers votre projet, les informations suivantes soit inscrite dans un fichier de log : L'identificateur de la ligne sera RouteLogMiddleware Le niveau de s\u00e9v\u00e9rit\u00e9 est INFO Ensuite ajoutez la m\u00e9thode HTTP (GET, POST, PUT, PATCH, DELETE) utilis\u00e9e Suivra le nom de la route, les param\u00e8tres de la section \"query\" s'il y en a et le contenu du body Exemple [2022-01-30T13:44:25.145185-05:00] RouteLogMiddleware.INFO: GET /libapi/docs [2022-01-30T13:44:25.145185-05:00] RouteLogMiddleware.INFO: GET /libapi/livres?page=3 [2022-02-14T06:49:19.833744+01:00] RouteLogMiddleware.INFO: GET /libapi/ {\"cle1\":\"Valeur1\",\"cle2\":\"Valeur2\"} Quelques pistes de solution Cr\u00e9er un fichier php dans le r\u00e9pertoire src/Middleware qui contiendra votre code Invoquer cette classe au niveau de l'application Dans votre classe \"middleware\", la structure de la fonction __invoke() devrait ressembler \u00e0 ceci : public function __invoke( Request $request, RequestHandler $handler): Response { // Cette ligne ex\u00e9cute la requ\u00eate $response = $handler->handle($request); // Votre code ... return $response; } Pour r\u00e9cup\u00e9rer les informations g\u00e9n\u00e9rales de la route https://www.slimframework.com/docs/v4/cookbook/retrieving-current-route.html Pour les param\u00e8tres dans la route https://www.slimframework.com/docs/v4/objects/request.html#the-request-uri Pour le contenu du body, on l'a d\u00e9j\u00e0 vu quand on le r\u00e9cup\u00e8re pour traiter un requ\u00eate POST. https://www.slimframework.com/docs/v3/objects/request.html#the-request-body","title":"Sixi\u00e8me partie - Middleware"},{"location":"exercices/05_heroku/","text":"Exercice 05 - H\u00e9bergement d'un api avec Heroku En vous aidant des notes de cours, faites une mise en ligne de votre exercice 04 sur un compte Heroku. Vous devez me remettre ensuite l'url de votre api via le devoir sur Teams.","title":"05 - H\u00e9bergement avec Heroku"},{"location":"exercices/05_heroku/#exercice-05-hebergement-dun-api-avec-heroku","text":"En vous aidant des notes de cours, faites une mise en ligne de votre exercice 04 sur un compte Heroku. Vous devez me remettre ensuite l'url de votre api via le devoir sur Teams.","title":"Exercice 05 - H\u00e9bergement d'un api avec Heroku"},{"location":"exercices/06_react_component/","text":"Exercice 06 - Composants et props Installation Cr\u00e9er un nouveau projet React nomm\u00e9 mybooks (en minuscule). Remplacez le code du fichier App.js par celui-ci import logo from './logo.svg'; import './App.css'; import React from 'react'; class App extends React.Component { render(){ return ( <div className=\"App\"> <header className=\"App-header\"> <h1>MyBooks</h1> <h3>Liste des livres</h3> <table className=\"BooksTable\"> <thead> <tr> <th>id</th> <th>Titre</th> </tr> </thead> <tbody> <tr> <td>1</td> <td>Fondation</td> </tr> <tr> <td>2</td> <td>Les montagnes hallucin\u00c3\u00a9es</td> </tr> <tr> <td>3</td> <td>Blade Runner</td> </tr> </tbody> </table> </header> </div> ); } } export default (App); Au d\u00e9but de la fonction render() de la classe App, ajoutez le tableau suivant d'objets \"livre\". const books = [ {id:1, titre:'Fondation'}, {id:2, titre:'Les montagnes hallucin\u00e9es'}, {id:3, titre:'Blade Runner'} ]; Ajoutez les lignes suivante \u00e0 la fin du fichier App.css .BooksTable th, .BooksTable td { text-align: left; padding-right: 15px; } Maintenant lancer l'application avec la commande npm start et vous devriez avoir ce r\u00e9sultat \u00c0 faire ensuite Cr\u00e9ez les composantes suivantes en dans des fichiers s\u00e9par\u00e9s situ\u00e9s dans le r\u00e9pertoire src/components Une composante Titre qui va remplacer la balise <h3> dans le fichier App.js . Elle recevra un param\u00e8tre texte qui sera le texte \u00e0 afficher. La composante retournera une balise <h3> avec la valeur du param\u00e8tre re\u00e7u. Une composante nomm\u00e9e Tableau . Cette composante va remplacer la balise <table> dans le fichier App.js . Elle recevra un param\u00e8tre livres qui est le tableau de livres qu\u2019on a d\u00e9fini plus haut. Elle va retourner le code html pour afficher le tableau. Une composante LigneTableau . Cette composante va \u00eatre utilis\u00e9 dans la composante Tableau pour afficher une ligne du tableau. Elle recevra un param\u00e8tre livre qui repr\u00e9sente un objet du tableau livres. Elle va retourner le code html pour afficher un ligne du tableau (une balise <tr> et son contenu) avec les valeurs re\u00e7ues en param\u00e8tres. Modifiez le fichier App.js pour utiliser les composantes cr\u00e9\u00e9s.","title":"06 - React - Composants et props"},{"location":"exercices/06_react_component/#exercice-06-composants-et-props","text":"","title":"Exercice 06 - Composants et props"},{"location":"exercices/06_react_component/#installation","text":"Cr\u00e9er un nouveau projet React nomm\u00e9 mybooks (en minuscule). Remplacez le code du fichier App.js par celui-ci import logo from './logo.svg'; import './App.css'; import React from 'react'; class App extends React.Component { render(){ return ( <div className=\"App\"> <header className=\"App-header\"> <h1>MyBooks</h1> <h3>Liste des livres</h3> <table className=\"BooksTable\"> <thead> <tr> <th>id</th> <th>Titre</th> </tr> </thead> <tbody> <tr> <td>1</td> <td>Fondation</td> </tr> <tr> <td>2</td> <td>Les montagnes hallucin\u00c3\u00a9es</td> </tr> <tr> <td>3</td> <td>Blade Runner</td> </tr> </tbody> </table> </header> </div> ); } } export default (App); Au d\u00e9but de la fonction render() de la classe App, ajoutez le tableau suivant d'objets \"livre\". const books = [ {id:1, titre:'Fondation'}, {id:2, titre:'Les montagnes hallucin\u00e9es'}, {id:3, titre:'Blade Runner'} ]; Ajoutez les lignes suivante \u00e0 la fin du fichier App.css .BooksTable th, .BooksTable td { text-align: left; padding-right: 15px; } Maintenant lancer l'application avec la commande npm start et vous devriez avoir ce r\u00e9sultat","title":"Installation"},{"location":"exercices/06_react_component/#a-faire-ensuite","text":"Cr\u00e9ez les composantes suivantes en dans des fichiers s\u00e9par\u00e9s situ\u00e9s dans le r\u00e9pertoire src/components Une composante Titre qui va remplacer la balise <h3> dans le fichier App.js . Elle recevra un param\u00e8tre texte qui sera le texte \u00e0 afficher. La composante retournera une balise <h3> avec la valeur du param\u00e8tre re\u00e7u. Une composante nomm\u00e9e Tableau . Cette composante va remplacer la balise <table> dans le fichier App.js . Elle recevra un param\u00e8tre livres qui est le tableau de livres qu\u2019on a d\u00e9fini plus haut. Elle va retourner le code html pour afficher le tableau. Une composante LigneTableau . Cette composante va \u00eatre utilis\u00e9 dans la composante Tableau pour afficher une ligne du tableau. Elle recevra un param\u00e8tre livre qui repr\u00e9sente un objet du tableau livres. Elle va retourner le code html pour afficher un ligne du tableau (une balise <tr> et son contenu) avec les valeurs re\u00e7ues en param\u00e8tres. Modifiez le fichier App.js pour utiliser les composantes cr\u00e9\u00e9s.","title":"\u00c0 faire ensuite"},{"location":"exercices/07_react_state/","text":"Exercice 07 - L'\u00e9tat local Pour mettre en pratique ce qu'on a vu \u00e0 propos de l'\u00e9tat local d'un composant (l'objet state), nous allons cr\u00e9er les trois composant suivant qui vont interagir entre eux en modifiant les titres de chacun. Mise en place Vous devez cr\u00e9er les trois composants suivant : MainBox MiddleBox EditBox Chaque composante contient le suivant (MainBox est le parent de MiddleBox qui est lui-m\u00eame parent de EditBox). Je vous donne une partie du code HTML que la fonction render() va retourner ainsi que le style css. App.js import './App.css'; import MainBox from './MainBox'; function App() { return ( <div className=\"App\"> <MainBox /> </div> ); } export default App; MainBox.js render() { return ( <div className='box'> <h1>{this.state.boxTitle}</h1> <div className='box_saisie box_saisie_main'> <label htmlFor='titreMainBox'>Titre Box </label> <input type=\"text\" id=\"titreMainBox\" name=\"titreMainBox\" /> </div> <MiddleBox /> </div> ); } MiddleBox.js render() { return ( <div className='box'> <h2>{this.state.boxTitle}</h2> <div className='box_saisie box_saisie_middle'> <label htmlFor='titreMiddleBox'>Titre Box </label> <input type=\"text\" id=\"titreMiddleBox\" name=\"titreMiddleBox\" /> </div> <EditBox /> </div> ); } EditBox.js render() { return ( <div className='box'> <h3>{this.state.boxTitle}</h3> <div> <div className='box_saisie'> <label htmlFor='titreMainBox'>Titre MainBox </label> <input type=\"text\" id=\"titreMainBox\" name=\"titreMainBox\" /> </div> <div className='box_saisie'> <label htmlFor='titreMiddleBox'>Titre MiddleBox </label> <input type=\"text\" id=\"titreMiddleBox\" name=\"titreMiddleBox\" /> </div> <div className='box_saisie'> <label htmlFor='boxTitle'>Titre EditBox </label> <input type=\"text\" id=\"boxTitle\" name=\"boxTitle\" /> </div> </div> </div> ); } App.css .App { text-align: center; background-color: #282c34; min-height: 100vh; display: flex; flex-direction: column; align-items: center; justify-content: center; font-size: calc(10px + 2vmin); color: white; } .box { border: 2px solid #61dafb; padding: 10px; border-radius: 5px; } .box_saisie { display: flex; justify-content: space-between; padding-bottom: 2px; gap: 10px } .box_saisie_main { padding: 0 20px 10px 20px; } .box_saisie_middle { padding: 0 10px 10px 10px; } h1, h2, h3 { margin: 20px 0; } Instruction D\u00e8s qu'on modifie la valeur d'une des zones de saisie, le texte doit \u00eatre modifi\u00e9 dans tous les champs correspondants (zone de saisie, titre). Ex si je modifie dans le composant EditBox la valeur dans le champ de saisie pour le composant MainBox, la valeur sera aussi modifi\u00e9 dans le champ de saisie du composant MainBox ainsi que son titre. Compl\u00e9tez les fonctions render() de chaque composant avec ce qui manque et ajouter les fonctions de retour au bon endroit. Inspirez-vous des notes de cours, toutes les r\u00e9ponses y sont.","title":"07 - React - L'\u00e9tat local"},{"location":"exercices/07_react_state/#exercice-07-letat-local","text":"Pour mettre en pratique ce qu'on a vu \u00e0 propos de l'\u00e9tat local d'un composant (l'objet state), nous allons cr\u00e9er les trois composant suivant qui vont interagir entre eux en modifiant les titres de chacun.","title":"Exercice 07 - L'\u00e9tat local"},{"location":"exercices/07_react_state/#mise-en-place","text":"Vous devez cr\u00e9er les trois composants suivant : MainBox MiddleBox EditBox Chaque composante contient le suivant (MainBox est le parent de MiddleBox qui est lui-m\u00eame parent de EditBox). Je vous donne une partie du code HTML que la fonction render() va retourner ainsi que le style css. App.js import './App.css'; import MainBox from './MainBox'; function App() { return ( <div className=\"App\"> <MainBox /> </div> ); } export default App; MainBox.js render() { return ( <div className='box'> <h1>{this.state.boxTitle}</h1> <div className='box_saisie box_saisie_main'> <label htmlFor='titreMainBox'>Titre Box </label> <input type=\"text\" id=\"titreMainBox\" name=\"titreMainBox\" /> </div> <MiddleBox /> </div> ); } MiddleBox.js render() { return ( <div className='box'> <h2>{this.state.boxTitle}</h2> <div className='box_saisie box_saisie_middle'> <label htmlFor='titreMiddleBox'>Titre Box </label> <input type=\"text\" id=\"titreMiddleBox\" name=\"titreMiddleBox\" /> </div> <EditBox /> </div> ); } EditBox.js render() { return ( <div className='box'> <h3>{this.state.boxTitle}</h3> <div> <div className='box_saisie'> <label htmlFor='titreMainBox'>Titre MainBox </label> <input type=\"text\" id=\"titreMainBox\" name=\"titreMainBox\" /> </div> <div className='box_saisie'> <label htmlFor='titreMiddleBox'>Titre MiddleBox </label> <input type=\"text\" id=\"titreMiddleBox\" name=\"titreMiddleBox\" /> </div> <div className='box_saisie'> <label htmlFor='boxTitle'>Titre EditBox </label> <input type=\"text\" id=\"boxTitle\" name=\"boxTitle\" /> </div> </div> </div> ); } App.css .App { text-align: center; background-color: #282c34; min-height: 100vh; display: flex; flex-direction: column; align-items: center; justify-content: center; font-size: calc(10px + 2vmin); color: white; } .box { border: 2px solid #61dafb; padding: 10px; border-radius: 5px; } .box_saisie { display: flex; justify-content: space-between; padding-bottom: 2px; gap: 10px } .box_saisie_main { padding: 0 20px 10px 20px; } .box_saisie_middle { padding: 0 10px 10px 10px; } h1, h2, h3 { margin: 20px 0; }","title":"Mise en place"},{"location":"exercices/07_react_state/#instruction","text":"D\u00e8s qu'on modifie la valeur d'une des zones de saisie, le texte doit \u00eatre modifi\u00e9 dans tous les champs correspondants (zone de saisie, titre). Ex si je modifie dans le composant EditBox la valeur dans le champ de saisie pour le composant MainBox, la valeur sera aussi modifi\u00e9 dans le champ de saisie du composant MainBox ainsi que son titre. Compl\u00e9tez les fonctions render() de chaque composant avec ce qui manque et ajouter les fonctions de retour au bon endroit. Inspirez-vous des notes de cours, toutes les r\u00e9ponses y sont.","title":"Instruction"},{"location":"exercices/08_axios/","text":"Exercice 08 - Consommer une api avec Axios En vous inspirant de l'affichage pr\u00e9sent\u00e9 sur le site https://randomuser.me/ , cr\u00e9ez une application React qui affichera certaines informations d'un utilisateur obtenu gr\u00e2ce \u00e0 un appel \u00e0 l'api du m\u00eame site. Instructions Cr\u00e9ez un nouveau projet avec Create React App que vous nommerez ex08_nom_prenom et faite le n\u00e9cessaire le relier \u00e0 un d\u00e9p\u00f4t Github sur votre compte personnelle. \u00c0 l'affichage et au rafraichissement de la page, votre application doit faire un appel \u00e0 l'api de RandomUser et afficher les informations obtenues dans un composant \"carte\". Je vous laisse \"d\u00e9couper\" la carte en composant comme bon vous semble mais \u00e7a vous prends minimalement les composants suivants : Card : Le composant \"maitre\" qui va englober les autres. Avatar : Il s'occupe d'afficher uniquement la photo. Information : La zone du bas o\u00f9 sont affich\u00e9 les informations de l'usager Le composant doit \u00eatre autonome, c'est-\u00e0-dire que si je l'inclus 2 fois dans la page, deux appels diff\u00e9rent \u00e0 l'api seront fait. Consulter la documentation du site https://randomuser.me/api/ pour conna\u00eetre l'url \u00e0 utiliser et connaitre le format de la r\u00e9ponse. Dans la section information, quand on clique sur un des icones, l'information affich\u00e9e sous la photo doit \u00eatre modifi\u00e9 en cons\u00e9quence. R\u00e9f\u00e9rez-vous \u00e0 l'affichage fait sur https://randomuser.me/ . Une fois l'exercice termin\u00e9, poussez votre projet sur GitHub et retournez le devoir Teams associ\u00e9 avec l'url de votre d\u00e9p\u00f4t. Exemple de r\u00e9sultat","title":"08 - React - Consommer une api avec Axios"},{"location":"exercices/08_axios/#exercice-08-consommer-une-api-avec-axios","text":"En vous inspirant de l'affichage pr\u00e9sent\u00e9 sur le site https://randomuser.me/ , cr\u00e9ez une application React qui affichera certaines informations d'un utilisateur obtenu gr\u00e2ce \u00e0 un appel \u00e0 l'api du m\u00eame site.","title":"Exercice 08 - Consommer une api avec Axios"},{"location":"exercices/08_axios/#instructions","text":"Cr\u00e9ez un nouveau projet avec Create React App que vous nommerez ex08_nom_prenom et faite le n\u00e9cessaire le relier \u00e0 un d\u00e9p\u00f4t Github sur votre compte personnelle. \u00c0 l'affichage et au rafraichissement de la page, votre application doit faire un appel \u00e0 l'api de RandomUser et afficher les informations obtenues dans un composant \"carte\". Je vous laisse \"d\u00e9couper\" la carte en composant comme bon vous semble mais \u00e7a vous prends minimalement les composants suivants : Card : Le composant \"maitre\" qui va englober les autres. Avatar : Il s'occupe d'afficher uniquement la photo. Information : La zone du bas o\u00f9 sont affich\u00e9 les informations de l'usager Le composant doit \u00eatre autonome, c'est-\u00e0-dire que si je l'inclus 2 fois dans la page, deux appels diff\u00e9rent \u00e0 l'api seront fait. Consulter la documentation du site https://randomuser.me/api/ pour conna\u00eetre l'url \u00e0 utiliser et connaitre le format de la r\u00e9ponse. Dans la section information, quand on clique sur un des icones, l'information affich\u00e9e sous la photo doit \u00eatre modifi\u00e9 en cons\u00e9quence. R\u00e9f\u00e9rez-vous \u00e0 l'affichage fait sur https://randomuser.me/ . Une fois l'exercice termin\u00e9, poussez votre projet sur GitHub et retournez le devoir Teams associ\u00e9 avec l'url de votre d\u00e9p\u00f4t. Exemple de r\u00e9sultat","title":"Instructions"},{"location":"notes_de_cours/code_statut_http/","text":"Les codes de statut HTTP Il n'y a pas de consensus clair au sujet du type de codes de statut \u00e0 retourner dans la r\u00e9ponse selon la requ\u00eate HTTP effectu\u00e9e. D'un c\u00f4t\u00e9 Most didn't mention, but using the HTTP error codes can lead to problems regarding the main cause of a problem. HTTP is the transport protocol and a 404 should indicate, that there was a problem with the URLon transport level (e. g. wrong path). If the application can not find a dataset by its id, this is an application level error (not a transport level error) and a 404, as suggested by restful http status code users, might lead to a wrong conclusion. Generally I don't like the mixup of transport and application layer in using the status codes","title":"Les codes de statut HTTP"},{"location":"notes_de_cours/code_statut_http/#les-codes-de-statut-http","text":"Il n'y a pas de consensus clair au sujet du type de codes de statut \u00e0 retourner dans la r\u00e9ponse selon la requ\u00eate HTTP effectu\u00e9e. D'un c\u00f4t\u00e9 Most didn't mention, but using the HTTP error codes can lead to problems regarding the main cause of a problem. HTTP is the transport protocol and a 404 should indicate, that there was a problem with the URLon transport level (e. g. wrong path). If the application can not find a dataset by its id, this is an application level error (not a transport level error) and a 404, as suggested by restful http status code users, might lead to a wrong conclusion. Generally I don't like the mixup of transport and application layer in using the status codes","title":"Les codes de statut HTTP"},{"location":"notes_de_cours/methode_http/","text":"Les m\u00e9thodes HTTP","title":"Les m\u00e9thodes HTTP"},{"location":"notes_de_cours/methode_http/#les-methodes-http","text":"","title":"Les m\u00e9thodes HTTP"},{"location":"notes_de_cours/php_methode_magique/","text":"Les m\u00e9thodes magiques __construct() __invoke() https://www.php.net/manual/fr/language.oop5.magic.php https://www.phptutorial.net/php-oop/php-__invoke/","title":"Les m\u00e9thodes magiques"},{"location":"notes_de_cours/php_methode_magique/#les-methodes-magiques","text":"","title":"Les m\u00e9thodes magiques"},{"location":"notes_de_cours/php_methode_magique/#__construct","text":"","title":"__construct()"},{"location":"notes_de_cours/php_methode_magique/#__invoke","text":"https://www.php.net/manual/fr/language.oop5.magic.php https://www.phptutorial.net/php-oop/php-__invoke/","title":"__invoke()"},{"location":"notes_de_cours/reponse_requete/","text":"","title":"Reponse requete"},{"location":"notes_de_cours/variable_environnement/","text":"","title":"Variable environnement"},{"location":"notes_de_cours/api/authentification/","text":"Authentification et autorisation R\u00e9f\u00e9rence https://blog.restcase.com/4-most-used-rest-api-authentication-methods/ https://stackoverflow.blog/2021/10/06/best-practices-for-authentication-and-authorization-for-rest-apis/ https://www.cqlcorp.com/insights/best-practices-for-securing-your-rest-api-authentication-options/ https://restfulapi.net/security-essentials/","title":"Authentification et autorisation"},{"location":"notes_de_cours/api/authentification/#authentification-et-autorisation","text":"","title":"Authentification et autorisation"},{"location":"notes_de_cours/api/authentification/#reference","text":"https://blog.restcase.com/4-most-used-rest-api-authentication-methods/ https://stackoverflow.blog/2021/10/06/best-practices-for-authentication-and-authorization-for-rest-apis/ https://www.cqlcorp.com/insights/best-practices-for-securing-your-rest-api-authentication-options/ https://restfulapi.net/security-essentials/","title":"R\u00e9f\u00e9rence"},{"location":"notes_de_cours/api/bonnes_pratiques/","text":"Les bonnes pratiques dans la conception d'un API Utiliser le format JSON Le format \u00e0 pr\u00e9coniser pour recevoir et retourner de l'information de notre api est le format JSON. C'est de loin le plus utilis\u00e9 aujourd'hui et la grande majorit\u00e9 des langages de programmation on des fonctions natives pour le manipuler. Utiliser des noms au lieu de verbes pour les routes Quand on nomme les routes de notre api, on ne devrait pas utiliser de verbe. L'emploi d'un nom significatif est \u00e0 privil\u00e9gier. Par exemple notre api nous permet de retourner une liste d'utilisateurs ou d'en cr\u00e9er un, on serait tent\u00e9 d'utiliser comme nom de route https://monApi/getUtilisateurs https://monApi/createUtilisateurs mais il est pr\u00e9f\u00e9rable d'utiliser dans les deux cas https://monApi/utilisateurs Un m\u00eame route peut avoir plus d'une fonctionnalit\u00e9, c'est la m\u00e9thode HTTP qui nous permet de les diff\u00e9renci\u00e9es. Utiliser la m\u00e9thode HTTP pour d\u00e9crire la fonctionnalit\u00e9 de la ressource En lien avec le point suivant, utiliser la bonne m\u00e9thode HTTP pour indiquer ce que la fonctionnalit\u00e9 de la route. Il existe une m\u00e9thode qui correspondante \u00e0 chaque op\u00e9ration CRUD. Op\u00e9ration dans la BD M\u00e9thode http Lire GET Ins\u00e9rer POST Modifier PUT Modifier partiellement PATCH Supprimer DELETE On ne doit jamais modifier une ressource avec une action GET. Les actions de modification PUT et PATCH sont tr\u00e8s similaires, la diff\u00e9rence est que PUT est utilis\u00e9 pour modifier toutes les valeurs de la ressource alors que PATCH l'est pour une modification partielle. Autre distinction de PUT, si la ressource n'est pas trouv\u00e9, elle sera cr\u00e9\u00e9e. Prenons l'exemple suivant, on veut pouvoir modifier un utilisateur ayant ces informations { \"id\" : \"1\", \"username\" : \"[username]\", \"first_name\" : \"[first_name]\", \"last_name\" : \"[last_name]\", \"email\" : \"[email]\" } Avec PUT on doit envoyer toutes ces informations dans la requ\u00eate, alors qu'avec PATCH on pourrait permettre seulement d'envoyer et de modifier le email . L'utilisation de la bonne m\u00e9thode HTTP nous permet d'utiliser la m\u00eame route pour plus d'une fonction. M\u00e9thode Route Description GET /utilisateurs Retourne la liste de tous les utilisateurs POST /utilisateurs Cr\u00e9ation d'un utilisateur PUT /utilisateurs/21 Modification de l'utilisateur avec le id 21 DELETE /utilisateurs/21 Suppression de l'utilisateur avec le id 21 voir Les m\u00e9thodes HTTP Utiliser les codes de statut HTTP Dans la r\u00e9ponse de la requ\u00eate \u00e0 votre API utilisez une code de statut HTTP appropri\u00e9 \u00e0 la situation. 200 - 299 indique un succ\u00e8s 400 - 499 Il y a eu une erreur c\u00f4t\u00e9 client 500 - 599 Il y a eu une erreur c\u00f4t\u00e9 serveur R\u00e9sum\u00e9 des m\u00e9thodes avec le code de statut sugg\u00e9r\u00e9 M\u00e9thode GLOBAL (/utilisateurs) Sur un element (/utilisateurs/{id}) POST 201 Created - La ressource est cr\u00e9\u00e9e et est retourn\u00e9e dans la r\u00e9ponse - GET 200 OK 200 OK 404 Not Found - La ressource n'a pas \u00e9t\u00e9 trouv\u00e9e, ex: le id utilisateur est invalide. PUT 405 Method Not Allowed - On ne devrait pas permettre de modifier toutes les ressources en une action 200 OK - La ressource est modifi\u00e9e et est retourn\u00e9e dans la r\u00e9ponse. 201 Created - La ressource a \u00e9t\u00e9 cr\u00e9\u00e9 car elle etait inexistante. PATCH 405 Method Not Allowed - On ne devrait pas permettre de modifier toutes les ressources en une action 200 OK - La ressource est modifi\u00e9e et est retourn\u00e9e dans la r\u00e9ponse. 404 Not Found - La ressource \u00e0 modifier n'a pas \u00e9t\u00e9 trouv\u00e9e, ex: le id utilisateur est invalide. DELETE 405 Method Not Allowed - On ne devrait pas permettre de supprimer toutes les ressources en une action. Si oui utilisez le code 200. 204 No Content - La ressource est a \u00e9t\u00e9 supprim\u00e9 et aucune information n'est retourn\u00e9e dans la r\u00e9ponse. 200 OK - La ressource est supprim\u00e9 et est retourn\u00e9e dans la r\u00e9ponse. Codes \u00e0 utiliser pour les erreurs Code Utilisation 401 - Unauthorized Le client ne s'est pas encore authentifier pour acc\u00e9der \u00e0 l'api. 403 - Forbidden Le client est authentifi\u00e9 mais n'a pas les autorisations pour acc\u00e9der \u00e0 la ressource. 404 - Not Found L'url utilis\u00e9 est invalide, le client demande une ressource qui n'existe pas. 500 - Internal Server Error Une erreur est survenu c\u00f4t\u00e9 serveur. Retournez de l'information sur l'erreur dans la r\u00e9ponse. Utiliser l'imbrication dans les routes Quand des ressources de votre api peuvent \u00eatre reli\u00e9es, utilisez l'imbrication pour cr\u00e9er des urls significatifs. Par exemple un auteur peut avoir \u00e9crit plusieurs livres, on pourrait avoir une route nomm\u00e9e /{auteurs}/livres qui retourne tous les livres de l'auteur en param\u00e8tre. Il faut cependant faire attention \u00e0 ne pas trop surcharger la route en allant trop profond\u00e9ment avec l'imbrication. Permettre les filtres, le tri, s\u00e9lection des champs retourn\u00e9s et la pagination Pour permettre \u00e0 l'utilisateur un meilleur contr\u00f4le sur les donn\u00e9es r\u00e9cup\u00e9r\u00e9es, permettez l'utilisation de filtres, de tri et de pagination dans vos requ\u00eate. Les param\u00e8tres devraient \u00eatre situ\u00e9 dans la section \"requ\u00eate\" de l'url Filtre Utilisez un nom de param\u00e8tre significatif. Pour saisir plusieurs valeurs, on doit les s\u00e9parer par une virgule. Exemple : /livres?categorie=roman pour afficher tous les livres de la cat\u00e9gorie roman. /livres?categorie=roman,documentaire pour afficher tous les livres de la cat\u00e9gorie roman et documentaire. tri Utilisez comme valeur du param\u00e8tre le nom du champ avec un code pr\u00e9d\u00e9fini en pr\u00e9fixe ( + et - par exemple) qui indiquera si le tri est ascendant ou descendant. Le tri sur plus d'un champ devrait aussi \u00eatre permis. Exemple : /livres?tri=+titre,-prix pour trier par les livres titre de mani\u00e8re ascendante et par prix de mani\u00e8re descendante. S\u00e9lection des champs retourn\u00e9s Il peut aussi \u00eatre pertinent de permettre au client de pouvoir s\u00e9lectionner uniquement les champs qu'il veut avoir dans la r\u00e9ponse \u00e0 la requ\u00eate. Exemple : /livres?champs=titre,isbn retournera la liste de tous les livres mais seulement le titres et isbn de chacun. Pagination Il n'est pas rare qu'une ressource comporte plusieurs centaines sinon milliers d'enregistrement. On devrait permettre au client de pouvoir s\u00e9lectionner seulement une partie des enregistrements en d\u00e9finissant un point de d\u00e9part (offset) et un nombre d'enregistrement (limit). Si on utilise la pagination, on devrait d\u00e9finir des valeurs par d\u00e9faut au param\u00e8tre offset et limit (g\u00e9n\u00e9ralement offset sera \u00e9gale \u00e0 0 pour le premier enregistrement). Exemple : /livres?limit=50&offset=100 En partant du centi\u00e8me enregistrement, affiche les 50 livres suivants. Pour faciliter le traitement des donn\u00e9es, on devrait ajouter dans la r\u00e9ponse le nombre total d'enregistrements ainsi que les valeurs de limit et offset. Une autre technique est d'avoir un nombre d'enregistrement fixe par page et de seulement permettre \u00e0 l'usager de choisir la page qu'il veut afficher. Exemple, on d\u00e9cide d'afficher 30 enregistrements par page, l'url suivant va afficher les enregistrement 61 \u00e0 90 : /livres?page=3 On peut bien sur combiner les deux m\u00e9thodes comme c'est souvent le cas dans les sites d'achats en lignes (On peut choisir la page et le nombre d'articles affich\u00e9s par page). Source https://www.moesif.com/blog/api-guide/api-design-guidelines/ https://www.freecodecamp.org/news/rest-api-best-practices-rest-endpoint-design-examples/ https://medium.com/@mwaysolutions/10-best-practices-for-better-restful-api-cbe81b06f291","title":"Les bonnes pratiques dans la conception d'un API"},{"location":"notes_de_cours/api/bonnes_pratiques/#les-bonnes-pratiques-dans-la-conception-dun-api","text":"","title":"Les bonnes pratiques dans la conception d'un API"},{"location":"notes_de_cours/api/bonnes_pratiques/#utiliser-le-format-json","text":"Le format \u00e0 pr\u00e9coniser pour recevoir et retourner de l'information de notre api est le format JSON. C'est de loin le plus utilis\u00e9 aujourd'hui et la grande majorit\u00e9 des langages de programmation on des fonctions natives pour le manipuler.","title":"Utiliser le format JSON"},{"location":"notes_de_cours/api/bonnes_pratiques/#utiliser-des-noms-au-lieu-de-verbes-pour-les-routes","text":"Quand on nomme les routes de notre api, on ne devrait pas utiliser de verbe. L'emploi d'un nom significatif est \u00e0 privil\u00e9gier. Par exemple notre api nous permet de retourner une liste d'utilisateurs ou d'en cr\u00e9er un, on serait tent\u00e9 d'utiliser comme nom de route https://monApi/getUtilisateurs https://monApi/createUtilisateurs mais il est pr\u00e9f\u00e9rable d'utiliser dans les deux cas https://monApi/utilisateurs Un m\u00eame route peut avoir plus d'une fonctionnalit\u00e9, c'est la m\u00e9thode HTTP qui nous permet de les diff\u00e9renci\u00e9es.","title":"Utiliser des noms au lieu de verbes pour les routes"},{"location":"notes_de_cours/api/bonnes_pratiques/#utiliser-la-methode-http-pour-decrire-la-fonctionnalite-de-la-ressource","text":"En lien avec le point suivant, utiliser la bonne m\u00e9thode HTTP pour indiquer ce que la fonctionnalit\u00e9 de la route. Il existe une m\u00e9thode qui correspondante \u00e0 chaque op\u00e9ration CRUD. Op\u00e9ration dans la BD M\u00e9thode http Lire GET Ins\u00e9rer POST Modifier PUT Modifier partiellement PATCH Supprimer DELETE On ne doit jamais modifier une ressource avec une action GET. Les actions de modification PUT et PATCH sont tr\u00e8s similaires, la diff\u00e9rence est que PUT est utilis\u00e9 pour modifier toutes les valeurs de la ressource alors que PATCH l'est pour une modification partielle. Autre distinction de PUT, si la ressource n'est pas trouv\u00e9, elle sera cr\u00e9\u00e9e. Prenons l'exemple suivant, on veut pouvoir modifier un utilisateur ayant ces informations { \"id\" : \"1\", \"username\" : \"[username]\", \"first_name\" : \"[first_name]\", \"last_name\" : \"[last_name]\", \"email\" : \"[email]\" } Avec PUT on doit envoyer toutes ces informations dans la requ\u00eate, alors qu'avec PATCH on pourrait permettre seulement d'envoyer et de modifier le email . L'utilisation de la bonne m\u00e9thode HTTP nous permet d'utiliser la m\u00eame route pour plus d'une fonction. M\u00e9thode Route Description GET /utilisateurs Retourne la liste de tous les utilisateurs POST /utilisateurs Cr\u00e9ation d'un utilisateur PUT /utilisateurs/21 Modification de l'utilisateur avec le id 21 DELETE /utilisateurs/21 Suppression de l'utilisateur avec le id 21 voir Les m\u00e9thodes HTTP","title":"Utiliser la m\u00e9thode HTTP pour d\u00e9crire la fonctionnalit\u00e9 de la ressource"},{"location":"notes_de_cours/api/bonnes_pratiques/#utiliser-les-codes-de-statut-http","text":"Dans la r\u00e9ponse de la requ\u00eate \u00e0 votre API utilisez une code de statut HTTP appropri\u00e9 \u00e0 la situation. 200 - 299 indique un succ\u00e8s 400 - 499 Il y a eu une erreur c\u00f4t\u00e9 client 500 - 599 Il y a eu une erreur c\u00f4t\u00e9 serveur","title":"Utiliser les codes de statut HTTP"},{"location":"notes_de_cours/api/bonnes_pratiques/#resume-des-methodes-avec-le-code-de-statut-suggere","text":"M\u00e9thode GLOBAL (/utilisateurs) Sur un element (/utilisateurs/{id}) POST 201 Created - La ressource est cr\u00e9\u00e9e et est retourn\u00e9e dans la r\u00e9ponse - GET 200 OK 200 OK 404 Not Found - La ressource n'a pas \u00e9t\u00e9 trouv\u00e9e, ex: le id utilisateur est invalide. PUT 405 Method Not Allowed - On ne devrait pas permettre de modifier toutes les ressources en une action 200 OK - La ressource est modifi\u00e9e et est retourn\u00e9e dans la r\u00e9ponse. 201 Created - La ressource a \u00e9t\u00e9 cr\u00e9\u00e9 car elle etait inexistante. PATCH 405 Method Not Allowed - On ne devrait pas permettre de modifier toutes les ressources en une action 200 OK - La ressource est modifi\u00e9e et est retourn\u00e9e dans la r\u00e9ponse. 404 Not Found - La ressource \u00e0 modifier n'a pas \u00e9t\u00e9 trouv\u00e9e, ex: le id utilisateur est invalide. DELETE 405 Method Not Allowed - On ne devrait pas permettre de supprimer toutes les ressources en une action. Si oui utilisez le code 200. 204 No Content - La ressource est a \u00e9t\u00e9 supprim\u00e9 et aucune information n'est retourn\u00e9e dans la r\u00e9ponse. 200 OK - La ressource est supprim\u00e9 et est retourn\u00e9e dans la r\u00e9ponse.","title":"R\u00e9sum\u00e9 des m\u00e9thodes avec le code de statut sugg\u00e9r\u00e9"},{"location":"notes_de_cours/api/bonnes_pratiques/#codes-a-utiliser-pour-les-erreurs","text":"Code Utilisation 401 - Unauthorized Le client ne s'est pas encore authentifier pour acc\u00e9der \u00e0 l'api. 403 - Forbidden Le client est authentifi\u00e9 mais n'a pas les autorisations pour acc\u00e9der \u00e0 la ressource. 404 - Not Found L'url utilis\u00e9 est invalide, le client demande une ressource qui n'existe pas. 500 - Internal Server Error Une erreur est survenu c\u00f4t\u00e9 serveur. Retournez de l'information sur l'erreur dans la r\u00e9ponse.","title":"Codes \u00e0 utiliser pour les erreurs"},{"location":"notes_de_cours/api/bonnes_pratiques/#utiliser-limbrication-dans-les-routes","text":"Quand des ressources de votre api peuvent \u00eatre reli\u00e9es, utilisez l'imbrication pour cr\u00e9er des urls significatifs. Par exemple un auteur peut avoir \u00e9crit plusieurs livres, on pourrait avoir une route nomm\u00e9e /{auteurs}/livres qui retourne tous les livres de l'auteur en param\u00e8tre. Il faut cependant faire attention \u00e0 ne pas trop surcharger la route en allant trop profond\u00e9ment avec l'imbrication.","title":"Utiliser l'imbrication dans les routes"},{"location":"notes_de_cours/api/bonnes_pratiques/#permettre-les-filtres-le-tri-selection-des-champs-retournes-et-la-pagination","text":"Pour permettre \u00e0 l'utilisateur un meilleur contr\u00f4le sur les donn\u00e9es r\u00e9cup\u00e9r\u00e9es, permettez l'utilisation de filtres, de tri et de pagination dans vos requ\u00eate. Les param\u00e8tres devraient \u00eatre situ\u00e9 dans la section \"requ\u00eate\" de l'url","title":"Permettre les filtres, le tri, s\u00e9lection des champs retourn\u00e9s et la pagination"},{"location":"notes_de_cours/api/bonnes_pratiques/#filtre","text":"Utilisez un nom de param\u00e8tre significatif. Pour saisir plusieurs valeurs, on doit les s\u00e9parer par une virgule. Exemple : /livres?categorie=roman pour afficher tous les livres de la cat\u00e9gorie roman. /livres?categorie=roman,documentaire pour afficher tous les livres de la cat\u00e9gorie roman et documentaire.","title":"Filtre"},{"location":"notes_de_cours/api/bonnes_pratiques/#tri","text":"Utilisez comme valeur du param\u00e8tre le nom du champ avec un code pr\u00e9d\u00e9fini en pr\u00e9fixe ( + et - par exemple) qui indiquera si le tri est ascendant ou descendant. Le tri sur plus d'un champ devrait aussi \u00eatre permis. Exemple : /livres?tri=+titre,-prix pour trier par les livres titre de mani\u00e8re ascendante et par prix de mani\u00e8re descendante.","title":"tri"},{"location":"notes_de_cours/api/bonnes_pratiques/#selection-des-champs-retournes","text":"Il peut aussi \u00eatre pertinent de permettre au client de pouvoir s\u00e9lectionner uniquement les champs qu'il veut avoir dans la r\u00e9ponse \u00e0 la requ\u00eate. Exemple : /livres?champs=titre,isbn retournera la liste de tous les livres mais seulement le titres et isbn de chacun.","title":"S\u00e9lection des champs retourn\u00e9s"},{"location":"notes_de_cours/api/bonnes_pratiques/#pagination","text":"Il n'est pas rare qu'une ressource comporte plusieurs centaines sinon milliers d'enregistrement. On devrait permettre au client de pouvoir s\u00e9lectionner seulement une partie des enregistrements en d\u00e9finissant un point de d\u00e9part (offset) et un nombre d'enregistrement (limit). Si on utilise la pagination, on devrait d\u00e9finir des valeurs par d\u00e9faut au param\u00e8tre offset et limit (g\u00e9n\u00e9ralement offset sera \u00e9gale \u00e0 0 pour le premier enregistrement). Exemple : /livres?limit=50&offset=100 En partant du centi\u00e8me enregistrement, affiche les 50 livres suivants. Pour faciliter le traitement des donn\u00e9es, on devrait ajouter dans la r\u00e9ponse le nombre total d'enregistrements ainsi que les valeurs de limit et offset. Une autre technique est d'avoir un nombre d'enregistrement fixe par page et de seulement permettre \u00e0 l'usager de choisir la page qu'il veut afficher. Exemple, on d\u00e9cide d'afficher 30 enregistrements par page, l'url suivant va afficher les enregistrement 61 \u00e0 90 : /livres?page=3 On peut bien sur combiner les deux m\u00e9thodes comme c'est souvent le cas dans les sites d'achats en lignes (On peut choisir la page et le nombre d'articles affich\u00e9s par page).","title":"Pagination"},{"location":"notes_de_cours/api/bonnes_pratiques/#source","text":"https://www.moesif.com/blog/api-guide/api-design-guidelines/ https://www.freecodecamp.org/news/rest-api-best-practices-rest-endpoint-design-examples/ https://medium.com/@mwaysolutions/10-best-practices-for-better-restful-api-cbe81b06f291","title":"Source"},{"location":"notes_de_cours/api/documentation_api/","text":"Documentation de l'API Comme il destin\u00e9 \u00e0 \u00eatre utilis\u00e9 par des utilisateurs externes, il est primordial de bien documenter notre API. Il existe plusieurs fa\u00e7on de faire, la plus simple \u00e9tant de seulement lister toutes les routes possibles en indiquant leur fonction. Nous allons y allons de fa\u00e7on plus professionnel en utilisant le standard OpenAPI. OpenAPI nous permet de d\u00e9crire l\u2019api dans son ensemble, les routes (endpoints), les requ\u00eates et les formats de r\u00e9ponse, la m\u00e9thode d\u2019authentification, etc. Le d\u00e9finition peut \u00eatre \u00e9crite en JSON ou YAML, nous allons pour notre par utiliser le format YAML. Utilisation de Swagger.io On va utiliser les services du site Swagger.io qui nous offre un \u00e9diteur OpenAPI gratuit. Cr\u00e9er vous un compte gratuit sur https://swagger.io/ Ensuite dans myHub, cr\u00e9ez un nouvel api avec les configurations suivantes : OpenApiVersion : 3.0.0 Template : none Name, Title, description : Ce que vous voulez Version : 1.0.0 Auto Mock API : Off Une fois la documentation r\u00e9dig\u00e9e dans l'\u00e9diteur de Swagger, vous pouvez l'exporter dans plusieurs format ou simplement la recopier dans le fichier YAML de votre projet. Source https://oai.github.io/Documentation/start-here.html https://swagger.io/docs/specification/about/","title":"Documentation de l'API"},{"location":"notes_de_cours/api/documentation_api/#documentation-de-lapi","text":"Comme il destin\u00e9 \u00e0 \u00eatre utilis\u00e9 par des utilisateurs externes, il est primordial de bien documenter notre API. Il existe plusieurs fa\u00e7on de faire, la plus simple \u00e9tant de seulement lister toutes les routes possibles en indiquant leur fonction. Nous allons y allons de fa\u00e7on plus professionnel en utilisant le standard OpenAPI. OpenAPI nous permet de d\u00e9crire l\u2019api dans son ensemble, les routes (endpoints), les requ\u00eates et les formats de r\u00e9ponse, la m\u00e9thode d\u2019authentification, etc. Le d\u00e9finition peut \u00eatre \u00e9crite en JSON ou YAML, nous allons pour notre par utiliser le format YAML.","title":"Documentation de l'API"},{"location":"notes_de_cours/api/documentation_api/#utilisation-de-swaggerio","text":"On va utiliser les services du site Swagger.io qui nous offre un \u00e9diteur OpenAPI gratuit. Cr\u00e9er vous un compte gratuit sur https://swagger.io/ Ensuite dans myHub, cr\u00e9ez un nouvel api avec les configurations suivantes : OpenApiVersion : 3.0.0 Template : none Name, Title, description : Ce que vous voulez Version : 1.0.0 Auto Mock API : Off Une fois la documentation r\u00e9dig\u00e9e dans l'\u00e9diteur de Swagger, vous pouvez l'exporter dans plusieurs format ou simplement la recopier dans le fichier YAML de votre projet.","title":"Utilisation de Swagger.io"},{"location":"notes_de_cours/api/documentation_api/#source","text":"https://oai.github.io/Documentation/start-here.html https://swagger.io/docs/specification/about/","title":"Source"},{"location":"notes_de_cours/heroku/heroku/","text":"H\u00e9bergement d'un api avec Heroku Heroku est une plateforme permettant de d\u00e9ployer rapidement nos applications web pour pouvoir les tester gratuitement. Nous allons utiliser ses services dans le cadre du cours pour mettre en ligne nos api ainsi que les clients qu'on va d\u00e9velopper pour les interroger. Marche \u00e0 suivre Cr\u00e9ation d'un compte Heroku Connexion \u00e0 Heroku depuis un terminal Cr\u00e9ation d'un projet Heroku Mise en ligne du projet Configuration de la base de donn\u00e9es MySQL Test du d\u00e9ploiement \u00c0 partir de maintenant vos application devrait \u00eatre fonctionnelles. Vous pouvez acc\u00e9der \u00e0 vos route depuis postman ou un navigagteur en modifiant le nom de domaine de l'url.","title":"Mise en ligne avec Heroku"},{"location":"notes_de_cours/heroku/heroku/#hebergement-dun-api-avec-heroku","text":"Heroku est une plateforme permettant de d\u00e9ployer rapidement nos applications web pour pouvoir les tester gratuitement. Nous allons utiliser ses services dans le cadre du cours pour mettre en ligne nos api ainsi que les clients qu'on va d\u00e9velopper pour les interroger.","title":"H\u00e9bergement d'un api avec Heroku"},{"location":"notes_de_cours/heroku/heroku/#marche-a-suivre","text":"Cr\u00e9ation d'un compte Heroku Connexion \u00e0 Heroku depuis un terminal Cr\u00e9ation d'un projet Heroku Mise en ligne du projet Configuration de la base de donn\u00e9es MySQL","title":"Marche \u00e0 suivre"},{"location":"notes_de_cours/heroku/heroku/#test-du-deploiement","text":"\u00c0 partir de maintenant vos application devrait \u00eatre fonctionnelles. Vous pouvez acc\u00e9der \u00e0 vos route depuis postman ou un navigagteur en modifiant le nom de domaine de l'url.","title":"Test du d\u00e9ploiement"},{"location":"notes_de_cours/heroku/heroku_compte/","text":"Cr\u00e9ation d'un compte Heroku Cr\u00e9ez-vous un compte gratuit sur le site de Heroku T\u00e9l\u00e9charger ensuite le CLI Heroku Une fois connect\u00e9 \u00e0 votre compte, vous avez un lien \u00ab documentation \u00bb \u00e0 cliquer dans le bas de la page. Ensuite dans la section Heroku Essentials, cliquez sur \u00ab The Heroku CLI \u00bb. S\u00e9lectionnez le bon installateur selon votre syst\u00e8me d\u2019exploitation. Une fois le client install\u00e9, lancer la commande heroku -v depuis un terminal pour valider l\u2019installation. $ heroku -v","title":"Cr\u00e9ation d'un compte Heroku"},{"location":"notes_de_cours/heroku/heroku_compte/#creation-dun-compte-heroku","text":"Cr\u00e9ez-vous un compte gratuit sur le site de Heroku T\u00e9l\u00e9charger ensuite le CLI Heroku Une fois connect\u00e9 \u00e0 votre compte, vous avez un lien \u00ab documentation \u00bb \u00e0 cliquer dans le bas de la page. Ensuite dans la section Heroku Essentials, cliquez sur \u00ab The Heroku CLI \u00bb. S\u00e9lectionnez le bon installateur selon votre syst\u00e8me d\u2019exploitation. Une fois le client install\u00e9, lancer la commande heroku -v depuis un terminal pour valider l\u2019installation. $ heroku -v","title":"Cr\u00e9ation d'un compte Heroku"},{"location":"notes_de_cours/heroku/heroku_connexion/","text":"Connexion \u00e0 Heroku depuis un terminal Dans la console, faire la commande heroku login $ heroku login Apr\u00e8s avoir appuy\u00e9 sur une touche, un \u00e9cran de connexion s\u2019ouvrira dans votre navigateur. Une fois connect\u00e9 depuis le navigateur, une confirmation s\u2019affichera dans la console.","title":"Connexion \u00e0 Heroku depuis un terminal"},{"location":"notes_de_cours/heroku/heroku_connexion/#connexion-a-heroku-depuis-un-terminal","text":"Dans la console, faire la commande heroku login $ heroku login Apr\u00e8s avoir appuy\u00e9 sur une touche, un \u00e9cran de connexion s\u2019ouvrira dans votre navigateur. Une fois connect\u00e9 depuis le navigateur, une confirmation s\u2019affichera dans la console.","title":"Connexion \u00e0 Heroku depuis un terminal"},{"location":"notes_de_cours/heroku/heroku_creation_projet/","text":"Cr\u00e9ation d'un projet Heroku Dans la console \u00e0 la racine de votre application, entrez la commande suivant heroku create $ heroku create Une adresse url de votre projet sera g\u00e9n\u00e9r\u00e9e automatiquement. Un d\u00e9p\u00f4t Git sera aussi cr\u00e9\u00e9 sur les serveurs de Heroku. Ce d\u00e9p\u00f4t sera utilis\u00e9 pour mettre en ligne votre projet. Url du projet (en bleu) : https://secret-escarpment-53166.herokuapp.com/ Url du d\u00e9p\u00f4t (en vert) : https://git.heroku.com/secret-escarpment-53166.git Vous pouvez valider que le d\u00e9p\u00f4t git de Heroku est bien associ\u00e9 \u00e0 votre projet en faisant la commande git remote -v Modifier l'url du projet et du d\u00e9p\u00f4t git Vous pouvez modifier l'url de votre projet depuis le tableau de bord du site de Heroku. Depuis le tableau de bord, s\u00e9lectionnez votre projet Cliquez sur l'onglet Settings Dans la section App Information , modifiez la valeur de App Name pour le nouveau nom de votre projet et cliquez sur Save Attention, vous devrez ensuite modifier l'url du \"remote\" sur votre branche locale de git. Copier le nouveau url g\u00e9n\u00e9r\u00e9, il est affich\u00e9 dans la m\u00eame section sous Heroku git URL Dans le terminal \u00e0 la racine de votre projet faites la commande git remote set-url heroku votre-url-heroku Revalidez ensuite avec la commande git remote -v , les urls associ\u00e9s \u00e0 heroku devrait avoir \u00e9t\u00e9 chang\u00e9.","title":"Cr\u00e9ation d'un projet Heroku"},{"location":"notes_de_cours/heroku/heroku_creation_projet/#creation-dun-projet-heroku","text":"Dans la console \u00e0 la racine de votre application, entrez la commande suivant heroku create $ heroku create Une adresse url de votre projet sera g\u00e9n\u00e9r\u00e9e automatiquement. Un d\u00e9p\u00f4t Git sera aussi cr\u00e9\u00e9 sur les serveurs de Heroku. Ce d\u00e9p\u00f4t sera utilis\u00e9 pour mettre en ligne votre projet. Url du projet (en bleu) : https://secret-escarpment-53166.herokuapp.com/ Url du d\u00e9p\u00f4t (en vert) : https://git.heroku.com/secret-escarpment-53166.git Vous pouvez valider que le d\u00e9p\u00f4t git de Heroku est bien associ\u00e9 \u00e0 votre projet en faisant la commande git remote -v","title":"Cr\u00e9ation d'un projet Heroku"},{"location":"notes_de_cours/heroku/heroku_creation_projet/#modifier-lurl-du-projet-et-du-depot-git","text":"Vous pouvez modifier l'url de votre projet depuis le tableau de bord du site de Heroku. Depuis le tableau de bord, s\u00e9lectionnez votre projet Cliquez sur l'onglet Settings Dans la section App Information , modifiez la valeur de App Name pour le nouveau nom de votre projet et cliquez sur Save Attention, vous devrez ensuite modifier l'url du \"remote\" sur votre branche locale de git. Copier le nouveau url g\u00e9n\u00e9r\u00e9, il est affich\u00e9 dans la m\u00eame section sous Heroku git URL Dans le terminal \u00e0 la racine de votre projet faites la commande git remote set-url heroku votre-url-heroku Revalidez ensuite avec la commande git remote -v , les urls associ\u00e9s \u00e0 heroku devrait avoir \u00e9t\u00e9 chang\u00e9.","title":"Modifier l'url du projet et du d\u00e9p\u00f4t git"},{"location":"notes_de_cours/heroku/heroku_mise_en_ligne/","text":"Mise en ligne du projet Dans la console \u00e0 la racine de votre application, entrez la commande suivante $ git push heroku main Selon la configuration de votre repository GitHub, \u00e7a pourrait \u00eatre aussi Master au lieu de main. Apr\u00e8s l\u2019installation de votre application (le premier git push), vous pourrez voir les changements en acc\u00e9dant \u00e0 l\u2019url que Heroku vous a g\u00e9n\u00e9r\u00e9. (pour l\u2019instant la bd MySQL n\u2019est pas configur\u00e9e, donc l\u2019acc\u00e8s \u00e0 vos routes ne fonctionnera pas. Mais la route pour la documentation sera fonctionnel.) \u00c0 partir de maintenant, pour d\u00e9ployer notre projet, on relance la commande git push heroku main . Quand on a cr\u00e9\u00e9 le projet Heroku, un repository git s\u2019est cr\u00e9er pour heroku. Il faudra garder \u00e0 l\u2019esprit qu\u2019il est s\u00e9par\u00e9 de notre repo github. Donc quand on fait git push heroku main , on pousse les changements sur le d\u00e9p\u00f4t pour le projet Heroku mais pas sur notre github. Une bonne fa\u00e7on de proc\u00e9der est de continuer \u00e0 \u00ab pusher \u00bb sur notre github et quand on est pr\u00eat \u00e0 mettre le code en ligne, on \u00ab push \u00bb sur Heroku.","title":"Mise en ligne du projet"},{"location":"notes_de_cours/heroku/heroku_mise_en_ligne/#mise-en-ligne-du-projet","text":"Dans la console \u00e0 la racine de votre application, entrez la commande suivante $ git push heroku main Selon la configuration de votre repository GitHub, \u00e7a pourrait \u00eatre aussi Master au lieu de main. Apr\u00e8s l\u2019installation de votre application (le premier git push), vous pourrez voir les changements en acc\u00e9dant \u00e0 l\u2019url que Heroku vous a g\u00e9n\u00e9r\u00e9. (pour l\u2019instant la bd MySQL n\u2019est pas configur\u00e9e, donc l\u2019acc\u00e8s \u00e0 vos routes ne fonctionnera pas. Mais la route pour la documentation sera fonctionnel.) \u00c0 partir de maintenant, pour d\u00e9ployer notre projet, on relance la commande git push heroku main . Quand on a cr\u00e9\u00e9 le projet Heroku, un repository git s\u2019est cr\u00e9er pour heroku. Il faudra garder \u00e0 l\u2019esprit qu\u2019il est s\u00e9par\u00e9 de notre repo github. Donc quand on fait git push heroku main , on pousse les changements sur le d\u00e9p\u00f4t pour le projet Heroku mais pas sur notre github. Une bonne fa\u00e7on de proc\u00e9der est de continuer \u00e0 \u00ab pusher \u00bb sur notre github et quand on est pr\u00eat \u00e0 mettre le code en ligne, on \u00ab push \u00bb sur Heroku.","title":"Mise en ligne du projet"},{"location":"notes_de_cours/heroku/heroku_mysql/","text":"Configuration de la base de donn\u00e9es MySQL Pour permettre l'utilisation d'une base de donn\u00e9e MySQL avec Heroku, il faut ajouter l' Add-on ClearDB \u00e0 notre projet. Acc\u00e9dez \u00e0 la section account settings sur le site de heroku (cliquez sur la photo de profil pour ouvrir le menu) M\u00eame si le service qu\u2019on utilise est gratuit, vous allez devoir entrer les informations d\u2019une carte de cr\u00e9dit dans l\u2019onglet billing Une fois la carte de cr\u00e9dit saisie, acc\u00e9der \u00e0 la page de votre projet en revenant au tableau de bord (page principale) et en cliquant sur le nom du projet Dans la section installed add-ons cliquez sur configure add-ons Faites une recherche pour clearDB mysql et choisissez ignite-free comme plan et cliquez sur Submit Order Form Une fois l'ajout termin\u00e9, vous devriez avoir ClearDB dans les add-ons R\u00e9cup\u00e9rer des informations de connexion Dans la console \u00e0 la racine de votre application, entrez la commande suivante $ heroku config R\u00e9sultat de la commande \u00c0 la ligne CLEARDB_DATABASE_URL vous trouverez les informations de connexion \u00e0 la BD. Les diff\u00e9rentes valeurs ont une position bien pr\u00e9cise dans la cha\u00eene de texte. Variable Position dans la cha\u00eene Valeur selon l'exemple username entre // et : b4692d61f95260 password entre : et @ 06aee1da host entre @ et / us-cdbr-east-05.cleardb.net database entre / et ? heroku_330c927d2db0d16 Vous pouvez maintenant cr\u00e9er une connexion avec un gestionnaire de base de donn\u00e9es (workbench, dbeaver, etc\u2026) Importer une base de donn\u00e9es Dans un terminal lancez la commande suivante pour faire un backup de la base de donn\u00e9es MySQL $ mysqldump -h localhost -u root -pmysql --opt --routines --triggers libapi > db_create.sql Modifier les valeurs de l'usager ( root ), du mot de passe ( mysql ) et du nom de la base de donn\u00e9es ( libapi ) selon votre configuration Le fichier db_create.sql va \u00eatre cr\u00e9\u00e9 dans le r\u00e9pertoire o\u00f9 vous avez lanc\u00e9 la commande. Ensuite encore en console on peut faire la commande suivante pour importer le script sql dans notre base de donn\u00e9es en ligne. $ mysql -u b5ca43976743b6 -h us-cdbr-east-03.cleardb.com -p3fba289e heroku_85142f7d498789b < db_create.sql En modifiant selon les informations de connexion obtenues auparavant avec la commande heroku config . Si vous avez l'erreur suivante ERROR 1071 (42000) at line 25: Specified key was too long; max key length is 767 bytes modifiez dans la base de donn\u00e9es le type de donn\u00e9es du champs username de la table users pour varchar(50) au lieu de varchar(255) Stocker les informations de connexion Pour nous simplifier la vie, on va stocker les informations dans un fichier php qui selon une constante retournera les bonnes valeurs. Cr\u00e9ation du fichier env.php Dans le r\u00e9pertoire config de votre projet cr\u00e9ez les fichier env.php Entrez ensuite vos informations de connexion \u00e0 la base de donn\u00e9es MySQL en local et sur heroku La structure du fichier est la suivante <?php // Constante du mode de l'application // dev : variables utilis\u00e9es en local // prod : pour le d\u00e9ploiement de l'api en production define(\"MODE\", \"prod\"); switch (MODE) { case \"dev\": // Configuration BD en local $_ENV['host'] = 'localhost'; $_ENV['username'] = 'root'; $_ENV['database'] = 'libapi'; $_ENV['password'] = 'mysql'; break; case \"prod\": // Configuration BD pour Heroku $_ENV['host'] = 'us-cdbr-east-05.cleardb.net'; $_ENV['username'] = 'b4692d61f95260'; $_ENV['database'] = 'heroku_330c927d2db0d16'; $_ENV['password'] = '06aee1da'; break; }; Vous n'avez ensuite quand changer la valeur de la constante MODE \u00e0 la ligne 6 selon les valeurs que vous voulez utiliser. dev pour la base de donn\u00e9es local prod pour la base de donn\u00e9es Heroku Modification au fichier bootstrap.php Pour charger les variables d\u2019environnements du fichier env.php , ajoutez la ligne suivante dans le fichier config/bootstrap.php . <?php use DI\\ContainerBuilder; use Slim\\App; require_once __DIR__ . '/../vendor/autoload.php'; // Chargement des variables d'environnement require_once __DIR__ . '/env.php'; // Ligne \u00e0 ajouter $containerBuilder = new ContainerBuilder(); Modification au fichier settings.php Modifier la section db du fichier config/settings.php pour utiliser les variables d\u2019environnement. // ... // Database settings $settings['db'] = [ 'driver' => 'mysql', 'host' => $_ENV['host'], 'username' => $_ENV['username'], 'database' => $_ENV['database'], 'password' => $_ENV['password'], 'charset' => 'utf8', 'collation' => 'utf8_general_ci', 'flags' => [ // Turn off persistent connections PDO::ATTR_PERSISTENT => false, // Enable exceptions PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION, // Emulate prepared statements PDO::ATTR_EMULATE_PREPARES => true, // Set default fetch mode to array PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC, // Set character set PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES utf8 COLLATE utf8_general_ci' ], ]; // ... Source https://devcenter.heroku.com/articles/cleardb {target=_blank}","title":"Configuration de la base de donn\u00e9es MySQL"},{"location":"notes_de_cours/heroku/heroku_mysql/#configuration-de-la-base-de-donnees-mysql","text":"Pour permettre l'utilisation d'une base de donn\u00e9e MySQL avec Heroku, il faut ajouter l' Add-on ClearDB \u00e0 notre projet. Acc\u00e9dez \u00e0 la section account settings sur le site de heroku (cliquez sur la photo de profil pour ouvrir le menu) M\u00eame si le service qu\u2019on utilise est gratuit, vous allez devoir entrer les informations d\u2019une carte de cr\u00e9dit dans l\u2019onglet billing Une fois la carte de cr\u00e9dit saisie, acc\u00e9der \u00e0 la page de votre projet en revenant au tableau de bord (page principale) et en cliquant sur le nom du projet Dans la section installed add-ons cliquez sur configure add-ons Faites une recherche pour clearDB mysql et choisissez ignite-free comme plan et cliquez sur Submit Order Form Une fois l'ajout termin\u00e9, vous devriez avoir ClearDB dans les add-ons","title":"Configuration de la base de donn\u00e9es MySQL"},{"location":"notes_de_cours/heroku/heroku_mysql/#recuperer-des-informations-de-connexion","text":"Dans la console \u00e0 la racine de votre application, entrez la commande suivante $ heroku config R\u00e9sultat de la commande \u00c0 la ligne CLEARDB_DATABASE_URL vous trouverez les informations de connexion \u00e0 la BD. Les diff\u00e9rentes valeurs ont une position bien pr\u00e9cise dans la cha\u00eene de texte. Variable Position dans la cha\u00eene Valeur selon l'exemple username entre // et : b4692d61f95260 password entre : et @ 06aee1da host entre @ et / us-cdbr-east-05.cleardb.net database entre / et ? heroku_330c927d2db0d16 Vous pouvez maintenant cr\u00e9er une connexion avec un gestionnaire de base de donn\u00e9es (workbench, dbeaver, etc\u2026)","title":"R\u00e9cup\u00e9rer des informations de connexion"},{"location":"notes_de_cours/heroku/heroku_mysql/#importer-une-base-de-donnees","text":"Dans un terminal lancez la commande suivante pour faire un backup de la base de donn\u00e9es MySQL $ mysqldump -h localhost -u root -pmysql --opt --routines --triggers libapi > db_create.sql Modifier les valeurs de l'usager ( root ), du mot de passe ( mysql ) et du nom de la base de donn\u00e9es ( libapi ) selon votre configuration Le fichier db_create.sql va \u00eatre cr\u00e9\u00e9 dans le r\u00e9pertoire o\u00f9 vous avez lanc\u00e9 la commande. Ensuite encore en console on peut faire la commande suivante pour importer le script sql dans notre base de donn\u00e9es en ligne. $ mysql -u b5ca43976743b6 -h us-cdbr-east-03.cleardb.com -p3fba289e heroku_85142f7d498789b < db_create.sql En modifiant selon les informations de connexion obtenues auparavant avec la commande heroku config . Si vous avez l'erreur suivante ERROR 1071 (42000) at line 25: Specified key was too long; max key length is 767 bytes modifiez dans la base de donn\u00e9es le type de donn\u00e9es du champs username de la table users pour varchar(50) au lieu de varchar(255)","title":"Importer une base de donn\u00e9es"},{"location":"notes_de_cours/heroku/heroku_mysql/#stocker-les-informations-de-connexion","text":"Pour nous simplifier la vie, on va stocker les informations dans un fichier php qui selon une constante retournera les bonnes valeurs.","title":"Stocker les informations de connexion"},{"location":"notes_de_cours/heroku/heroku_mysql/#creation-du-fichier-envphp","text":"Dans le r\u00e9pertoire config de votre projet cr\u00e9ez les fichier env.php Entrez ensuite vos informations de connexion \u00e0 la base de donn\u00e9es MySQL en local et sur heroku La structure du fichier est la suivante <?php // Constante du mode de l'application // dev : variables utilis\u00e9es en local // prod : pour le d\u00e9ploiement de l'api en production define(\"MODE\", \"prod\"); switch (MODE) { case \"dev\": // Configuration BD en local $_ENV['host'] = 'localhost'; $_ENV['username'] = 'root'; $_ENV['database'] = 'libapi'; $_ENV['password'] = 'mysql'; break; case \"prod\": // Configuration BD pour Heroku $_ENV['host'] = 'us-cdbr-east-05.cleardb.net'; $_ENV['username'] = 'b4692d61f95260'; $_ENV['database'] = 'heroku_330c927d2db0d16'; $_ENV['password'] = '06aee1da'; break; }; Vous n'avez ensuite quand changer la valeur de la constante MODE \u00e0 la ligne 6 selon les valeurs que vous voulez utiliser. dev pour la base de donn\u00e9es local prod pour la base de donn\u00e9es Heroku","title":"Cr\u00e9ation du fichier env.php"},{"location":"notes_de_cours/heroku/heroku_mysql/#modification-au-fichier-bootstrapphp","text":"Pour charger les variables d\u2019environnements du fichier env.php , ajoutez la ligne suivante dans le fichier config/bootstrap.php . <?php use DI\\ContainerBuilder; use Slim\\App; require_once __DIR__ . '/../vendor/autoload.php'; // Chargement des variables d'environnement require_once __DIR__ . '/env.php'; // Ligne \u00e0 ajouter $containerBuilder = new ContainerBuilder();","title":"Modification au fichier bootstrap.php"},{"location":"notes_de_cours/heroku/heroku_mysql/#modification-au-fichier-settingsphp","text":"Modifier la section db du fichier config/settings.php pour utiliser les variables d\u2019environnement. // ... // Database settings $settings['db'] = [ 'driver' => 'mysql', 'host' => $_ENV['host'], 'username' => $_ENV['username'], 'database' => $_ENV['database'], 'password' => $_ENV['password'], 'charset' => 'utf8', 'collation' => 'utf8_general_ci', 'flags' => [ // Turn off persistent connections PDO::ATTR_PERSISTENT => false, // Enable exceptions PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION, // Emulate prepared statements PDO::ATTR_EMULATE_PREPARES => true, // Set default fetch mode to array PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC, // Set character set PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES utf8 COLLATE utf8_general_ci' ], ]; // ...","title":"Modification au fichier settings.php"},{"location":"notes_de_cours/heroku/heroku_mysql/#source","text":"https://devcenter.heroku.com/articles/cleardb {target=_blank}","title":"Source"},{"location":"notes_de_cours/php/revision_php/","text":"R\u00e9vision PHP Syntaxe Un script PHP doit \u00eatre d\u00e9buter par <?php et ce termin\u00e9 par ?> Chaque ligne de code se termine par un point-virgule. Les noms de variable d\u00e9butent par le symbole $ Ex\u00e9cuter un script en ligne de commande Pour lancer un script depuis la ligne de commande # Si le chemin vers l'interpreteur PHP est dans les variables d'environnement > php monScript.php # Sinon il faut sp\u00e9cifier le chemin en entier > 'C:\\Program Files\\Ampps\\php-7.3\\php.exe' monScript.php Op\u00e9rateur de coalescence des nuls ( ?? ) ?? est un op\u00e9rateur logique qui retourne la premi\u00e8re valeur qui existe et qui est non null. Il est possible d'encha\u00eener plusieurs op\u00e9rateurs de coalescence \u00e0 la suite. <?php // Si $_GET['utilisateur'] n'est pas d\u00e9fini ou vaut null, $utilisateur vaudra 'aucun' $utilisateur = $_GET['utilisateur'] ?? 'aucun'; // On peut encha\u00eener plusieurs ?? comme ceci $utilisateur = $_GET['utilisateur'] ?? $_POST['utilisateur'] ?? 'aucun'; ?> Tableau D\u00e9claration d'un tableau Pour d\u00e9clarer un tableau, on peut utiliser la fonction array() ou en notation courte utiliser [] <?php // D\u00e9claration d'un tableau avec la fonction array() $monTableau = array(\"item1\", \"item2\", \"item3\"); // D\u00e9claration d'un tableau avec la notation courte $monTableau = [\"item1\", \"item2\", \"item3\"]; ?> Chaque \u00e9l\u00e9ment du tableau est associ\u00e9 \u00e0 une cl\u00e9 (son index dans le tableau). Si la cl\u00e9 n'est pas sp\u00e9cifi\u00e9, comme dans l'exemple plus haut, elle sera autog\u00e9n\u00e9r\u00e9 de fa\u00e7on incr\u00e9mentiel (0, 1, 2, etc...). Il est aussi possible de d\u00e9finir la cl\u00e9 de chaque item. <?php $monTableau = array( 1 => \"item1\", 2 => \"item2\", 3 => \"item3\", ); $monTableau = [ \"fruits\" => [\"banane\", \"pomme\", \"raisin\"], \"legumes\" => [\"carotte\", \"patate\", \"navet\"], ]; ?> Acc\u00e8s aux \u00e9l\u00e9ments d'un tableau On acc\u00e8de \u00e0 la valeur d'un \u00e9l\u00e9ment du tableau par sa cl\u00e9 <?php $monTableau = [\"item1\", \"item2\", \"item3\"]; echo $monTableau[0]; // \"item1\" $monTableau = [ \"fruits\" => [\"banane\", \"pomme\", \"raisin\"], \"legumes\" => [\"carotte\", \"patate\", \"navet\"], ]; echo $monTableau[\"legumes\"][1]; // \"patate\" ?> Ajouter/modifier/supprimer un \u00e9l\u00e9ment <?php $monTableau = [\"item1\", \"item2\", \"item3\"]; // Pour ajouter un \u00e9l\u00e9ment au tableau, on donne ou non une cl\u00e9 libre $monTableau[] = \"item4\"; $monTableau[4] = \"item5\"; // Pour modifier un \u00e9l\u00e9ment, on doit donner la cl\u00e9 de l'\u00e9l\u00e9ment \u00e0 modifier $monTableau[4] = \"item5 modifi\u00e9\" // On supprime un item avec la fonction unset en sp\u00e9cifiant la cl\u00e9 de l'\u00e9l\u00e9ment \u00e0 supprimer unset($monTableau[4]); // Attention, si aucune cl\u00e9 n'est donn\u00e9e, c'est tout le tableau qui sera supprim\u00e9 unset($monTableau); ?> Boucle sur un tableau Pour boucler sur les \u00e9l\u00e9ments d'un tableau, on utilise foreach <?php $monTableau = [ \"prenom\" => \"Mathieu\", \"nom\" => \"Frechette\", ]; foreach($monTableau as $item) { echo \"$item\\n\"; } /* Mathieu Frechette */ // On peut aussi r\u00e9cup\u00e9rer la cl\u00e9 de chaque \u00e9l\u00e9ment foreach($monTableau as $cle => $valeur) { echo \"$cle = $valeur\\n\"; } /* prenom = Mathieu nom = frechette */ ?> D\u00e9baller un tableau En pr\u00e9fixant le tableau par trois points ( ...$monTableau), le tableau sera \"d\u00e9ball\u00e9\" lors de se d\u00e9finition, c'est \u00e0 dire qu'on aura acc\u00e8s \u00e0 tous les \u00e9l\u00e9ments du tableau. (Disponible depuis PHP 7.4.0) <?php $monTableau = [\"item1\", \"item2\", \"item3\"]; // Copier le tableau $tableau2 = [...$monTableau]; // [\"item1\", \"item2\", \"item3\"] // Ajouter des \u00e9l\u00e9ments au tableau; $tableau3 = [\"item0\", ...$monTableau, \"item4\"]; // [\"item0, \"item1\", \"item2\", \"item3\", \"item4\"] // Fusionner des tableaux $tableau4 = [...$tableau2, ...$tableau3]; // [\"item1\", \"item2\", \"item3\", \"item0, \"item1\", \"item2\", \"item3\", \"item4\"] // On peut aussi l'utiliser avec une fonction qui retourne un tableau function getTableau() { return [\"item5\", \"item6\"]; } $tableau5 = [...getTableau(), \"item7\"]; //[\"item5\", \"item6\", \"item7\"] ?> Array_filter() La fonction array_filter() permet de filter les \u00e9l\u00e9ments d'un tableau par une fonction de Callback. Array_filter() prends en param\u00e8tre le tableau sur lequelle effectuer le traitement la fonction de Callback. On peut appeler une fonction existante ou bien directement la d\u00e9clarer \u00e0 l'int\u00e9rieur de array_map(). <?php // Soit le tableau de nombre suivant $nombres = [1, 2, 3, 4, 5]; // On veut cr\u00e9er un nouveau tableau avec uniquement les nombres impairs $nombresImpair = array_filter($nombres, function ($nombre) { return $nombre % 2 === 1; } ); // [1, 3, 5] ?> Array_map() La fonction array_map() permet d'appliquer une fonction sur chaque \u00e9l\u00e9ment d'un tableau et de retourner un nouveau tableau du r\u00e9sultat. Array_map() prends en param\u00e8tre la fonction de Callback et le tableau sur lequelle effectuer le traitement. On peut appeler une fonction existante ou bien directement la d\u00e9clarer \u00e0 l'int\u00e9rieur de array_map(). <?php // Soit le tableau de nombre suivant $nombres = [10,12,14,13]; // On veut cr\u00e9er un tableau avec de ces nombres doubl\u00e9s $nombresDouble = array_map(function ($nombre) { return $nombre * 2; }, $nombres); // [20, 22, 28, 26] ?> R\u00e9f\u00e9rence : www.php.net/manual/fr/language.types.array.php www.w3schools.com/php/php_ref_array.asp www.php.net/manual/fr/ref.array.php JSON en PHP Pour encoder une valeur en format JSON, on utilisera la fonction json_encode(). <?php $monTableau = [ \"prenom\" => \"Mathieu\", \"nom\" => \"Frechette\", ]; echo json_encode($monTableau); /* { \"prenom\":\"Mathieu\", \"nom\":\"Frechette\" } */ $monTableauPlusComplexe = [ \"Resultats\" => [ [ \"prenom\" => \"Mathieu\", \"nom\" => \"Frechette\", ], [ \"prenom\" => \"Anthony\", \"nom\" => \"Frechette\", ], ] ]; echo json_encode($monTableauPlusComplexe); /* { \"Resultats\":[ { \"prenom\":\"Mathieu\", \"nom\":\"Frechette\" }, { \"prenom\":\"Anthony\", \"nom\":\"Frechette\" } ] } */ ?> \u00c0 l'inverse, pour convertir un objet JSON en un objet ou un tableau associatif (avec des cl\u00e9s d\u00e9finies) on utilisera la fonction json_decode(). Elle prend en param\u00eatre l'objet Json \u00e0 convertir et optionnellement un valeur boolean qui indique si on veut que soit cr\u00e9e un tableau associatif ou non. Par d\u00e9faut ce param\u00eatre prend la valeur false, ce qui cr\u00e9e un objet. <?php $jsonData = '{\"prenom\":\"Mathieu\",\"nom\":\"Frechette\"}'; $objetUsager = json_decode($jsonData); echo $objetUsager->prenom; // Mathieu $tableauUsager = json_decode($jsonData, true); echo $tableauUsager[\"prenom\"]; // Mathieu ?> Effectuer un appel GET \u00e0 un service web On peut utiliser la fonction native file_get_contents() pour faire un appel GET \u00e0 un api avec un url. <?php $url = 'https://api.chucknorris.io/jokes/random'; $reponseEnJson = file_get_contents($url); /* { \"categories\": [], \"created_at\": \"2020-01-05 13:42:29.296379\", \"icon_url\": \"https://assets.chucknorris.host/img/avatar/chuck-norris.png\", \"id\": \"bESHJ3YrTEW638ky0rr3Yg\", \"updated_at\": \"2020-01-05 13:42:29.296379\", \"url\": \"https://api.chucknorris.io/jokes/bESHJ3YrTEW638ky0rr3Yg\", \"value\": \"Chuck Norris doesn't need an axe or saw to cut down a tree -- he needs only his foot, or his fist, or his glare.\" } */ $objetReponse = json_decode($reponseEnJson); echo $objetReponse->value; // Chuck Norris doesn't need an axe or saw to cut down a tree -- he needs only his foot, or his fist, or his glare. ?>","title":"Revision PHP"},{"location":"notes_de_cours/php/revision_php/#revision-php","text":"","title":"R\u00e9vision PHP"},{"location":"notes_de_cours/php/revision_php/#syntaxe","text":"Un script PHP doit \u00eatre d\u00e9buter par <?php et ce termin\u00e9 par ?> Chaque ligne de code se termine par un point-virgule. Les noms de variable d\u00e9butent par le symbole $","title":"Syntaxe"},{"location":"notes_de_cours/php/revision_php/#executer-un-script-en-ligne-de-commande","text":"Pour lancer un script depuis la ligne de commande # Si le chemin vers l'interpreteur PHP est dans les variables d'environnement > php monScript.php # Sinon il faut sp\u00e9cifier le chemin en entier > 'C:\\Program Files\\Ampps\\php-7.3\\php.exe' monScript.php","title":"Ex\u00e9cuter un script en ligne de commande"},{"location":"notes_de_cours/php/revision_php/#operateur-de-coalescence-des-nuls","text":"?? est un op\u00e9rateur logique qui retourne la premi\u00e8re valeur qui existe et qui est non null. Il est possible d'encha\u00eener plusieurs op\u00e9rateurs de coalescence \u00e0 la suite. <?php // Si $_GET['utilisateur'] n'est pas d\u00e9fini ou vaut null, $utilisateur vaudra 'aucun' $utilisateur = $_GET['utilisateur'] ?? 'aucun'; // On peut encha\u00eener plusieurs ?? comme ceci $utilisateur = $_GET['utilisateur'] ?? $_POST['utilisateur'] ?? 'aucun'; ?>","title":"Op\u00e9rateur de coalescence des nuls ( ?? )"},{"location":"notes_de_cours/php/revision_php/#tableau","text":"","title":"Tableau"},{"location":"notes_de_cours/php/revision_php/#declaration-dun-tableau","text":"Pour d\u00e9clarer un tableau, on peut utiliser la fonction array() ou en notation courte utiliser [] <?php // D\u00e9claration d'un tableau avec la fonction array() $monTableau = array(\"item1\", \"item2\", \"item3\"); // D\u00e9claration d'un tableau avec la notation courte $monTableau = [\"item1\", \"item2\", \"item3\"]; ?> Chaque \u00e9l\u00e9ment du tableau est associ\u00e9 \u00e0 une cl\u00e9 (son index dans le tableau). Si la cl\u00e9 n'est pas sp\u00e9cifi\u00e9, comme dans l'exemple plus haut, elle sera autog\u00e9n\u00e9r\u00e9 de fa\u00e7on incr\u00e9mentiel (0, 1, 2, etc...). Il est aussi possible de d\u00e9finir la cl\u00e9 de chaque item. <?php $monTableau = array( 1 => \"item1\", 2 => \"item2\", 3 => \"item3\", ); $monTableau = [ \"fruits\" => [\"banane\", \"pomme\", \"raisin\"], \"legumes\" => [\"carotte\", \"patate\", \"navet\"], ]; ?>","title":"D\u00e9claration d'un tableau"},{"location":"notes_de_cours/php/revision_php/#acces-aux-elements-dun-tableau","text":"On acc\u00e8de \u00e0 la valeur d'un \u00e9l\u00e9ment du tableau par sa cl\u00e9 <?php $monTableau = [\"item1\", \"item2\", \"item3\"]; echo $monTableau[0]; // \"item1\" $monTableau = [ \"fruits\" => [\"banane\", \"pomme\", \"raisin\"], \"legumes\" => [\"carotte\", \"patate\", \"navet\"], ]; echo $monTableau[\"legumes\"][1]; // \"patate\" ?>","title":"Acc\u00e8s aux \u00e9l\u00e9ments d'un tableau"},{"location":"notes_de_cours/php/revision_php/#ajoutermodifiersupprimer-un-element","text":"<?php $monTableau = [\"item1\", \"item2\", \"item3\"]; // Pour ajouter un \u00e9l\u00e9ment au tableau, on donne ou non une cl\u00e9 libre $monTableau[] = \"item4\"; $monTableau[4] = \"item5\"; // Pour modifier un \u00e9l\u00e9ment, on doit donner la cl\u00e9 de l'\u00e9l\u00e9ment \u00e0 modifier $monTableau[4] = \"item5 modifi\u00e9\" // On supprime un item avec la fonction unset en sp\u00e9cifiant la cl\u00e9 de l'\u00e9l\u00e9ment \u00e0 supprimer unset($monTableau[4]); // Attention, si aucune cl\u00e9 n'est donn\u00e9e, c'est tout le tableau qui sera supprim\u00e9 unset($monTableau); ?>","title":"Ajouter/modifier/supprimer un \u00e9l\u00e9ment"},{"location":"notes_de_cours/php/revision_php/#boucle-sur-un-tableau","text":"Pour boucler sur les \u00e9l\u00e9ments d'un tableau, on utilise foreach <?php $monTableau = [ \"prenom\" => \"Mathieu\", \"nom\" => \"Frechette\", ]; foreach($monTableau as $item) { echo \"$item\\n\"; } /* Mathieu Frechette */ // On peut aussi r\u00e9cup\u00e9rer la cl\u00e9 de chaque \u00e9l\u00e9ment foreach($monTableau as $cle => $valeur) { echo \"$cle = $valeur\\n\"; } /* prenom = Mathieu nom = frechette */ ?>","title":"Boucle sur un tableau"},{"location":"notes_de_cours/php/revision_php/#deballer-un-tableau","text":"En pr\u00e9fixant le tableau par trois points ( ...$monTableau), le tableau sera \"d\u00e9ball\u00e9\" lors de se d\u00e9finition, c'est \u00e0 dire qu'on aura acc\u00e8s \u00e0 tous les \u00e9l\u00e9ments du tableau. (Disponible depuis PHP 7.4.0) <?php $monTableau = [\"item1\", \"item2\", \"item3\"]; // Copier le tableau $tableau2 = [...$monTableau]; // [\"item1\", \"item2\", \"item3\"] // Ajouter des \u00e9l\u00e9ments au tableau; $tableau3 = [\"item0\", ...$monTableau, \"item4\"]; // [\"item0, \"item1\", \"item2\", \"item3\", \"item4\"] // Fusionner des tableaux $tableau4 = [...$tableau2, ...$tableau3]; // [\"item1\", \"item2\", \"item3\", \"item0, \"item1\", \"item2\", \"item3\", \"item4\"] // On peut aussi l'utiliser avec une fonction qui retourne un tableau function getTableau() { return [\"item5\", \"item6\"]; } $tableau5 = [...getTableau(), \"item7\"]; //[\"item5\", \"item6\", \"item7\"] ?>","title":"D\u00e9baller un tableau"},{"location":"notes_de_cours/php/revision_php/#array_filter","text":"La fonction array_filter() permet de filter les \u00e9l\u00e9ments d'un tableau par une fonction de Callback. Array_filter() prends en param\u00e8tre le tableau sur lequelle effectuer le traitement la fonction de Callback. On peut appeler une fonction existante ou bien directement la d\u00e9clarer \u00e0 l'int\u00e9rieur de array_map(). <?php // Soit le tableau de nombre suivant $nombres = [1, 2, 3, 4, 5]; // On veut cr\u00e9er un nouveau tableau avec uniquement les nombres impairs $nombresImpair = array_filter($nombres, function ($nombre) { return $nombre % 2 === 1; } ); // [1, 3, 5] ?>","title":"Array_filter()"},{"location":"notes_de_cours/php/revision_php/#array_map","text":"La fonction array_map() permet d'appliquer une fonction sur chaque \u00e9l\u00e9ment d'un tableau et de retourner un nouveau tableau du r\u00e9sultat. Array_map() prends en param\u00e8tre la fonction de Callback et le tableau sur lequelle effectuer le traitement. On peut appeler une fonction existante ou bien directement la d\u00e9clarer \u00e0 l'int\u00e9rieur de array_map(). <?php // Soit le tableau de nombre suivant $nombres = [10,12,14,13]; // On veut cr\u00e9er un tableau avec de ces nombres doubl\u00e9s $nombresDouble = array_map(function ($nombre) { return $nombre * 2; }, $nombres); // [20, 22, 28, 26] ?> R\u00e9f\u00e9rence : www.php.net/manual/fr/language.types.array.php www.w3schools.com/php/php_ref_array.asp www.php.net/manual/fr/ref.array.php","title":"Array_map()"},{"location":"notes_de_cours/php/revision_php/#json-en-php","text":"Pour encoder une valeur en format JSON, on utilisera la fonction json_encode(). <?php $monTableau = [ \"prenom\" => \"Mathieu\", \"nom\" => \"Frechette\", ]; echo json_encode($monTableau); /* { \"prenom\":\"Mathieu\", \"nom\":\"Frechette\" } */ $monTableauPlusComplexe = [ \"Resultats\" => [ [ \"prenom\" => \"Mathieu\", \"nom\" => \"Frechette\", ], [ \"prenom\" => \"Anthony\", \"nom\" => \"Frechette\", ], ] ]; echo json_encode($monTableauPlusComplexe); /* { \"Resultats\":[ { \"prenom\":\"Mathieu\", \"nom\":\"Frechette\" }, { \"prenom\":\"Anthony\", \"nom\":\"Frechette\" } ] } */ ?> \u00c0 l'inverse, pour convertir un objet JSON en un objet ou un tableau associatif (avec des cl\u00e9s d\u00e9finies) on utilisera la fonction json_decode(). Elle prend en param\u00eatre l'objet Json \u00e0 convertir et optionnellement un valeur boolean qui indique si on veut que soit cr\u00e9e un tableau associatif ou non. Par d\u00e9faut ce param\u00eatre prend la valeur false, ce qui cr\u00e9e un objet. <?php $jsonData = '{\"prenom\":\"Mathieu\",\"nom\":\"Frechette\"}'; $objetUsager = json_decode($jsonData); echo $objetUsager->prenom; // Mathieu $tableauUsager = json_decode($jsonData, true); echo $tableauUsager[\"prenom\"]; // Mathieu ?>","title":"JSON en PHP"},{"location":"notes_de_cours/php/revision_php/#effectuer-un-appel-get-a-un-service-web","text":"On peut utiliser la fonction native file_get_contents() pour faire un appel GET \u00e0 un api avec un url. <?php $url = 'https://api.chucknorris.io/jokes/random'; $reponseEnJson = file_get_contents($url); /* { \"categories\": [], \"created_at\": \"2020-01-05 13:42:29.296379\", \"icon_url\": \"https://assets.chucknorris.host/img/avatar/chuck-norris.png\", \"id\": \"bESHJ3YrTEW638ky0rr3Yg\", \"updated_at\": \"2020-01-05 13:42:29.296379\", \"url\": \"https://api.chucknorris.io/jokes/bESHJ3YrTEW638ky0rr3Yg\", \"value\": \"Chuck Norris doesn't need an axe or saw to cut down a tree -- he needs only his foot, or his fist, or his glare.\" } */ $objetReponse = json_decode($reponseEnJson); echo $objetReponse->value; // Chuck Norris doesn't need an axe or saw to cut down a tree -- he needs only his foot, or his fist, or his glare. ?>","title":"Effectuer un appel GET \u00e0 un service web"},{"location":"notes_de_cours/react/classes/","text":"","title":"Classes"},{"location":"notes_de_cours/react/classes_vs_hooks/","text":"R\u00e9f\u00e9rences https://www.twilio.com/blog/react-choose-functional-components https://stackoverflow.com/questions/36097965/when-to-use-es6-class-based-react-components-vs-functional-es6-react-components","title":"Classes vs hooks"},{"location":"notes_de_cours/react/classes_vs_hooks/#references","text":"https://www.twilio.com/blog/react-choose-functional-components https://stackoverflow.com/questions/36097965/when-to-use-es6-class-based-react-components-vs-functional-es6-react-components","title":"R\u00e9f\u00e9rences"},{"location":"notes_de_cours/react/component/","text":"Les composantes Une composante est un module r\u00e9utilisable qui \u00ab affiche \u00bb une partie de l\u2019application. Par exemple, un composant \u00ab Tableau \u00bb qui est form\u00e9 de composant \u00ab Ligne de d\u00e9tail \u00bb qui sont compos\u00e9es de texte et de composants \u00ab Boutons \u00bb d\u2019actions. En r\u00e9sum\u00e9, c\u2019est une classe qui retourne du code html \u00e9crit en JSX via une fonction render(). Un nom de composante doit commencer par une lettre majuscule . La classe est compos\u00e9 de trois partie de \u00ab base \u00bb : Une section import Ex: Import React from \u2018react\u2019; , pour utiliser les commandes react avec l\u2019Alias React (React.component par exemple) La d\u00e9finition de la classe qui \u00ab extends \u00bb React.component et qui contient une fonction render() . On pourra aussi y d\u00e9finir d\u2019autres fonctions et d\u00e9clarer des variables selon nos besoin. Une section export qui rendra accessible la classe ailleurs dans l'application. export default (NomDeLaClasse); Attention, la fonction render() doit retourner qu'un \u00e9l\u00e9ment HTML \"parent\". Par contre cet \u00e9l\u00e9ment peut contenir plusieurs \"enfants\". // le return est invalide car il y a deux \u00e9l\u00e9ment au m\u00eame niveau render() { return ( <h1>Hello World</h1> <p>Vive React!</p> ) } // Un fa\u00e7on de r\u00e9gler le probl\u00e8me serait d'englober les deux \u00e9l\u00e9ments // dans un autre render() { return ( <div> <h1>Hello World</h1> <p>Vive React!</p> </div> ) } Pour utiliser un composante, on \u00e9crit son nom comme pour une balise html <NomDeLaClasse /> Exemple de composant simple import React from 'react'; class HelloWorld extends React.Component { render() { return ( <h1>Hello World</h1> ) } } export default (HelloWorld);","title":"Les composantes"},{"location":"notes_de_cours/react/component/#les-composantes","text":"Une composante est un module r\u00e9utilisable qui \u00ab affiche \u00bb une partie de l\u2019application. Par exemple, un composant \u00ab Tableau \u00bb qui est form\u00e9 de composant \u00ab Ligne de d\u00e9tail \u00bb qui sont compos\u00e9es de texte et de composants \u00ab Boutons \u00bb d\u2019actions. En r\u00e9sum\u00e9, c\u2019est une classe qui retourne du code html \u00e9crit en JSX via une fonction render(). Un nom de composante doit commencer par une lettre majuscule . La classe est compos\u00e9 de trois partie de \u00ab base \u00bb : Une section import Ex: Import React from \u2018react\u2019; , pour utiliser les commandes react avec l\u2019Alias React (React.component par exemple) La d\u00e9finition de la classe qui \u00ab extends \u00bb React.component et qui contient une fonction render() . On pourra aussi y d\u00e9finir d\u2019autres fonctions et d\u00e9clarer des variables selon nos besoin. Une section export qui rendra accessible la classe ailleurs dans l'application. export default (NomDeLaClasse); Attention, la fonction render() doit retourner qu'un \u00e9l\u00e9ment HTML \"parent\". Par contre cet \u00e9l\u00e9ment peut contenir plusieurs \"enfants\". // le return est invalide car il y a deux \u00e9l\u00e9ment au m\u00eame niveau render() { return ( <h1>Hello World</h1> <p>Vive React!</p> ) } // Un fa\u00e7on de r\u00e9gler le probl\u00e8me serait d'englober les deux \u00e9l\u00e9ments // dans un autre render() { return ( <div> <h1>Hello World</h1> <p>Vive React!</p> </div> ) } Pour utiliser un composante, on \u00e9crit son nom comme pour une balise html <NomDeLaClasse /> Exemple de composant simple import React from 'react'; class HelloWorld extends React.Component { render() { return ( <h1>Hello World</h1> ) } } export default (HelloWorld);","title":"Les composantes"},{"location":"notes_de_cours/react/creation_projet/","text":"Cr\u00e9ation d'un projet React Il y a plusieurs fa\u00e7on d'utiliser React dans nos application web. Dans le cadre de ce cours nous allons utiliser Create React App qui va cr\u00e9er pour nous on projet de \"d\u00e9part\" \u00e0 partir duquel nous pourrons construire nos application React. Pr\u00e9requis node.js un terminal qui permet d'utiliser des commandes plus avanc\u00e9es (Git bash) Initialiser notre application Il y a deux fa\u00e7on d'utiliser Create React App : En l'installant globalement sur notre ordinateur ou en l'ex\u00e9cutant sans installation pour cr\u00e9er un projet directement. Installation globale Ex\u00e9cuter la commande suivante dans un terminal pour proc\u00e9der \u00e0 l'installation npm install -g create-react-app Une fois l'installation termin\u00e9, vous aurez acc\u00e8s \u00e0 la commande create-react-app dans n'importe quel terminal. Maintenant pour cr\u00e9er un projet entrez la commande suivante depuis le terminal: create-react-app nomduprojet Ex\u00e9cution sans installation Cette m\u00e9thode est \u00e0 privil\u00e9gier selon moi car elle nous assure de toujours utiliser la derni\u00e8re version de Create React App . Notez qu'on utilise la commande npx et non npm ici. Npx va t\u00e9l\u00e9charger le paquet demand\u00e9, l'ex\u00e9cuter et ensuite le supprimer. Il ne restera aucune trace du paquet sur le disque. npx create-react-app nomDuProjet Peut importe la m\u00e9thode que vous aurez utilis\u00e9, un r\u00e9pertoire nomm\u00e9e nomduprojet sera cr\u00e9\u00e9 \u00e0 l'endroit o\u00f9 la commande a \u00e9t\u00e9 lanc\u00e9 avec \u00e0 l'int\u00e9rieur les fichiers de base de l'application React. Ensuite dans le r\u00e9pertoire du projet, la commande npm start va lancer l\u2019application. Structure du projet Le point d\u2019entr\u00e9e de l\u2019application est le fichier src/index.js La page public/index.html sert quand \u00e0 elle de \u00ab support \u00bb pour le projet. La majeur partie du d\u00e9veloppement de l\u2019application se fera dans le r\u00e9pertoire src/ . On va entre autre y cr\u00e9er les fichiers de composantes, id\u00e9alement dans un r\u00e9pertoire d\u00e9di\u00e9, src/components par exemple. Le fichier app.js est le composant maitre, on peut le laisser o\u00f9 il est. Certains fichiers des r\u00e9pertoires public et src ne sont pas n\u00e9cessaire, mais src/index.js et public/index.html doivent \u00eatre pr\u00e9sent. Pour les autres, c\u2019est selon vos besoin mais pour l\u2019instant on va les laisser l\u00e0. Lancer le projet Pour lancer l'application React, entrez la commande suivante dans un terminal \u00e0 la racine du projet npm start Attention, on ne peut avoir qu'une application React qui \"roule\" en m\u00eame temps. Quitter l'application Pour pouvoir fermer le serveur de d\u00e9veloppement en tout temps, on va ajouter un script dans le fichier package.json . Dans la section scripts ajouter la ligne suivante \"stop\": \"taskkill -F -IM node.exe\" \"scripts\": { ... \"stop\": \"taskkill -F -IM node.exe\" } Pour fermer le serveur de d\u00e9veloppement et \"quitter\" l'application, vous n'avez qu'\u00e0 faire ctrl+c dans la m\u00eame fen\u00eatre de terminal qui roule le serveur. Si vous n'avez plus acc\u00e8s au terminal qui \u00e0 lancer le serveur, ouvrez un nouveau terminal et faites la commande npm stop R\u00e9f\u00e9rences Create React App npm vs npx","title":"Cr\u00e9ation d'un projet"},{"location":"notes_de_cours/react/creation_projet/#creation-dun-projet-react","text":"Il y a plusieurs fa\u00e7on d'utiliser React dans nos application web. Dans le cadre de ce cours nous allons utiliser Create React App qui va cr\u00e9er pour nous on projet de \"d\u00e9part\" \u00e0 partir duquel nous pourrons construire nos application React.","title":"Cr\u00e9ation d'un projet React"},{"location":"notes_de_cours/react/creation_projet/#prerequis","text":"node.js un terminal qui permet d'utiliser des commandes plus avanc\u00e9es (Git bash)","title":"Pr\u00e9requis"},{"location":"notes_de_cours/react/creation_projet/#initialiser-notre-application","text":"Il y a deux fa\u00e7on d'utiliser Create React App : En l'installant globalement sur notre ordinateur ou en l'ex\u00e9cutant sans installation pour cr\u00e9er un projet directement.","title":"Initialiser notre application"},{"location":"notes_de_cours/react/creation_projet/#installation-globale","text":"Ex\u00e9cuter la commande suivante dans un terminal pour proc\u00e9der \u00e0 l'installation npm install -g create-react-app Une fois l'installation termin\u00e9, vous aurez acc\u00e8s \u00e0 la commande create-react-app dans n'importe quel terminal. Maintenant pour cr\u00e9er un projet entrez la commande suivante depuis le terminal: create-react-app nomduprojet","title":"Installation globale"},{"location":"notes_de_cours/react/creation_projet/#execution-sans-installation","text":"Cette m\u00e9thode est \u00e0 privil\u00e9gier selon moi car elle nous assure de toujours utiliser la derni\u00e8re version de Create React App . Notez qu'on utilise la commande npx et non npm ici. Npx va t\u00e9l\u00e9charger le paquet demand\u00e9, l'ex\u00e9cuter et ensuite le supprimer. Il ne restera aucune trace du paquet sur le disque. npx create-react-app nomDuProjet Peut importe la m\u00e9thode que vous aurez utilis\u00e9, un r\u00e9pertoire nomm\u00e9e nomduprojet sera cr\u00e9\u00e9 \u00e0 l'endroit o\u00f9 la commande a \u00e9t\u00e9 lanc\u00e9 avec \u00e0 l'int\u00e9rieur les fichiers de base de l'application React. Ensuite dans le r\u00e9pertoire du projet, la commande npm start va lancer l\u2019application.","title":"Ex\u00e9cution sans installation"},{"location":"notes_de_cours/react/creation_projet/#structure-du-projet","text":"Le point d\u2019entr\u00e9e de l\u2019application est le fichier src/index.js La page public/index.html sert quand \u00e0 elle de \u00ab support \u00bb pour le projet. La majeur partie du d\u00e9veloppement de l\u2019application se fera dans le r\u00e9pertoire src/ . On va entre autre y cr\u00e9er les fichiers de composantes, id\u00e9alement dans un r\u00e9pertoire d\u00e9di\u00e9, src/components par exemple. Le fichier app.js est le composant maitre, on peut le laisser o\u00f9 il est. Certains fichiers des r\u00e9pertoires public et src ne sont pas n\u00e9cessaire, mais src/index.js et public/index.html doivent \u00eatre pr\u00e9sent. Pour les autres, c\u2019est selon vos besoin mais pour l\u2019instant on va les laisser l\u00e0.","title":"Structure du projet"},{"location":"notes_de_cours/react/creation_projet/#lancer-le-projet","text":"Pour lancer l'application React, entrez la commande suivante dans un terminal \u00e0 la racine du projet npm start Attention, on ne peut avoir qu'une application React qui \"roule\" en m\u00eame temps.","title":"Lancer le projet"},{"location":"notes_de_cours/react/creation_projet/#quitter-lapplication","text":"Pour pouvoir fermer le serveur de d\u00e9veloppement en tout temps, on va ajouter un script dans le fichier package.json . Dans la section scripts ajouter la ligne suivante \"stop\": \"taskkill -F -IM node.exe\" \"scripts\": { ... \"stop\": \"taskkill -F -IM node.exe\" } Pour fermer le serveur de d\u00e9veloppement et \"quitter\" l'application, vous n'avez qu'\u00e0 faire ctrl+c dans la m\u00eame fen\u00eatre de terminal qui roule le serveur. Si vous n'avez plus acc\u00e8s au terminal qui \u00e0 lancer le serveur, ouvrez un nouveau terminal et faites la commande npm stop","title":"Quitter l'application"},{"location":"notes_de_cours/react/creation_projet/#references","text":"Create React App npm vs npx","title":"R\u00e9f\u00e9rences"},{"location":"notes_de_cours/react/cycle_de_vie/","text":"Le cycle de vie d'un composant Chaque composante a un cycle de vie qu\u2019on peut diviser en trois grandes \u00e9tapes : Chargement (Mounting) : C\u2019est ici que les composantes sont ajout\u00e9es au DOM et affich\u00e9es dans la page. Mise-\u00e0-jour (Updating) : Cette \u00e9tape est lanc\u00e9e quand l\u2019objet state ou props de la composante est modifi\u00e9. D\u00e9chargement (Unmounting) : Si on enl\u00e8ve une composante du DOM, cette \u00e9tape est alors effectu\u00e9e. Chargement (Mounting) Il y a quatres m\u00e9thodes qui sont ex\u00e9cut\u00e9s dans cette ordre lors du chargement constructor(props) : Le constructeur de la classe, on y d\u00e9fini entre autre les valeurs initiales de l\u2019objet state. getDerivedStateFromProps(props, state) : Appel\u00e9 juste avant d\u2019afficher la composante dans le DOM. render() : Affiche la composante dans la page. componentDidMount() : Appel\u00e9 apr\u00e8s avoir affich\u00e9 la composante dans le DOM. On y place le traitement \u00e0 faire une fois que la composante fait partie du DOM. R\u00e9f\u00e9rences https://fr.reactjs.org/docs/state-and-lifecycle.html https://www.w3schools.com/react/react_state.asp","title":"Cycle de vie d'une application"},{"location":"notes_de_cours/react/cycle_de_vie/#le-cycle-de-vie-dun-composant","text":"Chaque composante a un cycle de vie qu\u2019on peut diviser en trois grandes \u00e9tapes : Chargement (Mounting) : C\u2019est ici que les composantes sont ajout\u00e9es au DOM et affich\u00e9es dans la page. Mise-\u00e0-jour (Updating) : Cette \u00e9tape est lanc\u00e9e quand l\u2019objet state ou props de la composante est modifi\u00e9. D\u00e9chargement (Unmounting) : Si on enl\u00e8ve une composante du DOM, cette \u00e9tape est alors effectu\u00e9e.","title":"Le cycle de vie d'un composant"},{"location":"notes_de_cours/react/cycle_de_vie/#chargement-mounting","text":"Il y a quatres m\u00e9thodes qui sont ex\u00e9cut\u00e9s dans cette ordre lors du chargement constructor(props) : Le constructeur de la classe, on y d\u00e9fini entre autre les valeurs initiales de l\u2019objet state. getDerivedStateFromProps(props, state) : Appel\u00e9 juste avant d\u2019afficher la composante dans le DOM. render() : Affiche la composante dans la page. componentDidMount() : Appel\u00e9 apr\u00e8s avoir affich\u00e9 la composante dans le DOM. On y place le traitement \u00e0 faire une fois que la composante fait partie du DOM.","title":"Chargement (Mounting)"},{"location":"notes_de_cours/react/cycle_de_vie/#references","text":"https://fr.reactjs.org/docs/state-and-lifecycle.html https://www.w3schools.com/react/react_state.asp","title":"R\u00e9f\u00e9rences"},{"location":"notes_de_cours/react/fetch_api/","text":"Consommer un service Web en React On consomme un service web au moyen d\u2019un appel Ajax (asynchronous JavaScript and XML). Il y a plusieurs biblioth\u00e8ques de disponibles qu\u2019on peut utiliser avec notre application React : Axios, Jquery Ajax et Fetch Axios est simple d\u2019utilisation et est tr\u00e8s complet. Il dispose \u00e9galement d\u2019une bonne couverture m\u00eame sur les navigateurs plus anciens. Utilisation de Axios Pour l'installation de Axios, ouvrez un terminal et \u00e0 la racine du projet dans lequel vous voulez l'utiliser entrez la commande suivante : npm install axios Il faut ensuite importer axios dans les fichiers js o\u00f9 on veut l\u2019utiliser. import axios from 'axios\u2019; Voici un exemple de la structure d'un appel \u00e0 un \"endpoint\" d'un api avec Axios axios.get('/maroute') .then(function(response) { // Traitement si succ\u00e8s }) .catch(function(error) { // Traitement si erreur }) .then(function(){ // Traitement qui sera toujours ex\u00e9cut\u00e9 }) Quand faire l\u2019Appel AJAX? Quand on voudra obtenir nos informations pour les afficher dans une composantes. Habituellement on va le faire dans la m\u00e9thode componentDidMount. Une fois les donn\u00e9es r\u00e9cup\u00e9r\u00e9es, on va utiliser setState pour mettre \u00e0 jour la composante. Exemple de r\u00e9cup\u00e9ration de donn\u00e9es au chargement du composant On importe axios dans l\u2019ent\u00eate du fichier Dans le constructeur, on cr\u00e9e un tableau vide qui va recevoir le r\u00e9sultat de l\u2019appel. On ajoute la m\u00e9thode componentDidMount() qui va faire l\u2019appel via Axios. Quand l\u2019appel r\u00e9ussi, on utilise setState() pour mettre \u00e0 jour notre tableau et la composante. import React from 'react'; // On importe la biblioth\u00e8que Axios import axios from \"axios\"; class ListeUtilisasteur extends React.Component { constructor(props) { super(props); this.state = { // On initialise ici un tableau vide qui va contenir notre r\u00e9sultat utilisateurs : [], } } componentDidMount() { axios.get('https://jsonplaceholder.typicode.com/users') .then(function(response) { const utilisateurs = response.data; // On r\u00e9cup\u00e8re les donn\u00e9es re\u00e7ues et on modifie le tableau dans l'\u00e9tat this.setState({utilisateurs : utilisateurs}) }) } Syntaxe Il y a deux syntaxes possible pour l'utilisation de Axios, c'est selon votre pr\u00e9f\u00e9rence M\u00e9thode #1 axios.post('urlDeLaRoute', { // donn\u00e9es en param\u00eatre dans le body titre: 'Nouveau livre', isbn: '123456' }) .then((resultat) => { // Traitement si l'appel a r\u00e9ussi }) M\u00e9thode #2 axios({ method: 'post', url: 'urlDeLaRoute', data: { titre: 'Nouveau livre', isbn: '123456' } }) .then((resultat) => { // Traitement si l'appel a r\u00e9ussi }) Ajouter des informations dans l'ent\u00eate de la requ\u00e8te Pour ajouter des informations dans l\u2019ent\u00eate de la requ\u00eate, comme par exemple pour l\u2019authentification, il suffit d\u2019utiliser la cl\u00e9 headers . axios({ method: 'post', url: 'urlDeLaRoute', data: { titre: 'Nouveau livre', isbn: '123456' }, headers: { Authorization : 'Bearer monToken' } }) .then((resultat) => { // Traitement si l'appel a r\u00e9ussi }) Cr\u00e9er une instance d\u2019axios Permet de ne sp\u00e9cifier par exemple qu\u2019une fois l\u2019url de base et d\u2019ensuite n\u2019ajouter que la route Cr\u00e9ez-vous un fichier Javascript qui contiendra le code de l\u2019instance, ex. utils/Api.js // Api.js import axios from \"axios\"; export default axios.create({ baseURL: \"https://swh2022-libapi.herokuapp.com\", responseType: \"json\", }) Ensuite on importe le fichier et on peut qu\u2019ajouter la route lors de l\u2019appel // La localisation du fichier est \u00e0 ajuster import api from '../utils/Api'; // ... componentDidMount() { // Ici on change axios pour api, le terme qu'on a d\u00e9fini dans le import api({ method: 'post', // c'est ici qu'on peut seulement entrer la derni\u00e8re partie de l'url qui // repr\u00e9sente la route au lieu d'avoir \u00e0 \u00e9crire // https://swh2022-libapi.herokuapp.com/livres url: '/livres', data: { titre: 'Nouveau livre', isbn: '123456' } }) .then((resultat) => { // Traitement si l'appel a r\u00e9ussi }) } // ... Votre code sera plus clair et lisible mais l'avantage majeur est que si l'api change de serveur, vous aurez \u00e0 changer l'information qu'\u00e0 un endroit dans le code.","title":"Consommer une api avec Axios"},{"location":"notes_de_cours/react/fetch_api/#consommer-un-service-web-en-react","text":"On consomme un service web au moyen d\u2019un appel Ajax (asynchronous JavaScript and XML). Il y a plusieurs biblioth\u00e8ques de disponibles qu\u2019on peut utiliser avec notre application React : Axios, Jquery Ajax et Fetch Axios est simple d\u2019utilisation et est tr\u00e8s complet. Il dispose \u00e9galement d\u2019une bonne couverture m\u00eame sur les navigateurs plus anciens.","title":"Consommer un service Web en React"},{"location":"notes_de_cours/react/fetch_api/#utilisation-de-axios","text":"Pour l'installation de Axios, ouvrez un terminal et \u00e0 la racine du projet dans lequel vous voulez l'utiliser entrez la commande suivante : npm install axios Il faut ensuite importer axios dans les fichiers js o\u00f9 on veut l\u2019utiliser. import axios from 'axios\u2019; Voici un exemple de la structure d'un appel \u00e0 un \"endpoint\" d'un api avec Axios axios.get('/maroute') .then(function(response) { // Traitement si succ\u00e8s }) .catch(function(error) { // Traitement si erreur }) .then(function(){ // Traitement qui sera toujours ex\u00e9cut\u00e9 })","title":"Utilisation de Axios"},{"location":"notes_de_cours/react/fetch_api/#quand-faire-lappel-ajax","text":"Quand on voudra obtenir nos informations pour les afficher dans une composantes. Habituellement on va le faire dans la m\u00e9thode componentDidMount. Une fois les donn\u00e9es r\u00e9cup\u00e9r\u00e9es, on va utiliser setState pour mettre \u00e0 jour la composante. Exemple de r\u00e9cup\u00e9ration de donn\u00e9es au chargement du composant On importe axios dans l\u2019ent\u00eate du fichier Dans le constructeur, on cr\u00e9e un tableau vide qui va recevoir le r\u00e9sultat de l\u2019appel. On ajoute la m\u00e9thode componentDidMount() qui va faire l\u2019appel via Axios. Quand l\u2019appel r\u00e9ussi, on utilise setState() pour mettre \u00e0 jour notre tableau et la composante. import React from 'react'; // On importe la biblioth\u00e8que Axios import axios from \"axios\"; class ListeUtilisasteur extends React.Component { constructor(props) { super(props); this.state = { // On initialise ici un tableau vide qui va contenir notre r\u00e9sultat utilisateurs : [], } } componentDidMount() { axios.get('https://jsonplaceholder.typicode.com/users') .then(function(response) { const utilisateurs = response.data; // On r\u00e9cup\u00e8re les donn\u00e9es re\u00e7ues et on modifie le tableau dans l'\u00e9tat this.setState({utilisateurs : utilisateurs}) }) }","title":"Quand faire l\u2019Appel AJAX?"},{"location":"notes_de_cours/react/fetch_api/#syntaxe","text":"Il y a deux syntaxes possible pour l'utilisation de Axios, c'est selon votre pr\u00e9f\u00e9rence M\u00e9thode #1 axios.post('urlDeLaRoute', { // donn\u00e9es en param\u00eatre dans le body titre: 'Nouveau livre', isbn: '123456' }) .then((resultat) => { // Traitement si l'appel a r\u00e9ussi }) M\u00e9thode #2 axios({ method: 'post', url: 'urlDeLaRoute', data: { titre: 'Nouveau livre', isbn: '123456' } }) .then((resultat) => { // Traitement si l'appel a r\u00e9ussi })","title":"Syntaxe"},{"location":"notes_de_cours/react/fetch_api/#ajouter-des-informations-dans-lentete-de-la-requete","text":"Pour ajouter des informations dans l\u2019ent\u00eate de la requ\u00eate, comme par exemple pour l\u2019authentification, il suffit d\u2019utiliser la cl\u00e9 headers . axios({ method: 'post', url: 'urlDeLaRoute', data: { titre: 'Nouveau livre', isbn: '123456' }, headers: { Authorization : 'Bearer monToken' } }) .then((resultat) => { // Traitement si l'appel a r\u00e9ussi })","title":"Ajouter des informations dans l'ent\u00eate de la requ\u00e8te"},{"location":"notes_de_cours/react/fetch_api/#creer-une-instance-daxios","text":"Permet de ne sp\u00e9cifier par exemple qu\u2019une fois l\u2019url de base et d\u2019ensuite n\u2019ajouter que la route Cr\u00e9ez-vous un fichier Javascript qui contiendra le code de l\u2019instance, ex. utils/Api.js // Api.js import axios from \"axios\"; export default axios.create({ baseURL: \"https://swh2022-libapi.herokuapp.com\", responseType: \"json\", }) Ensuite on importe le fichier et on peut qu\u2019ajouter la route lors de l\u2019appel // La localisation du fichier est \u00e0 ajuster import api from '../utils/Api'; // ... componentDidMount() { // Ici on change axios pour api, le terme qu'on a d\u00e9fini dans le import api({ method: 'post', // c'est ici qu'on peut seulement entrer la derni\u00e8re partie de l'url qui // repr\u00e9sente la route au lieu d'avoir \u00e0 \u00e9crire // https://swh2022-libapi.herokuapp.com/livres url: '/livres', data: { titre: 'Nouveau livre', isbn: '123456' } }) .then((resultat) => { // Traitement si l'appel a r\u00e9ussi }) } // ... Votre code sera plus clair et lisible mais l'avantage majeur est que si l'api change de serveur, vous aurez \u00e0 changer l'information qu'\u00e0 un endroit dans le code.","title":"Cr\u00e9er une instance d\u2019axios"},{"location":"notes_de_cours/react/hooks/","text":"","title":"Hooks"},{"location":"notes_de_cours/react/introduction/","text":"Introduction \u00e0 React Une librairie \"front-end\" Essentiellement React est une librairie javascript \u00ab front-end \u00bb qui se concentre sur la gestion de l\u2019interface utilisateur. C\u2019est un projet \u00ab open-source \u00bb pilot\u00e9 par Facebook depuis 2013. Le concept g\u00e9n\u00e9ral de React est de permettre la cr\u00e9ation d'application web dont on peut \"rafraichir\" seulement le contenu d\u00e9sir\u00e9. React propose une approche bas\u00e9e sur des composantes Un application React sera en fait une arborescence de composants r\u00e9utilisables. DOM virtuel Utilise le concept de DOM virtuel : les changements au DOM r\u00e9el ne sont appliqu\u00e9s qu\u2019au bon moment en minimisant le nombres d\u2019op\u00e9rations pour optimiser les performances. Applique le principe \u00ab Les donn\u00e9es descendent, l\u2019\u00e9tat remonte\u00bb Un composant parent peut \"passer\" des donn\u00e9es \u00e0 un composant enfant, mais le composant enfant ne peut faire \"remonter\" ces donn\u00e9es. On va utiliser plut\u00f4t utiliser des fonctions. React Developper Tools Pour vous aider dans le d\u00e9veloppement, installez l\u2019extension React Developper Tools pour votre navigateur. R\u00e9f\u00e9rences Documentation officiel https://fr.reactjs.org/ Tutoriels https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started https://www.w3schools.com/react/default.asp https://fr.reactjs.org/tutorial/tutorial.html https://www.freecodecamp.org/learn/front-end-development-libraries/react/ Cours en ligne https://openclassrooms.com/fr/courses/4664381-realisez-une-application-web-avec-react-js/4664388-decouvrez-lutilite-et-les-concepts-cles-de-react","title":"Introduction \u00e0 React"},{"location":"notes_de_cours/react/introduction/#introduction-a-react","text":"Une librairie \"front-end\" Essentiellement React est une librairie javascript \u00ab front-end \u00bb qui se concentre sur la gestion de l\u2019interface utilisateur. C\u2019est un projet \u00ab open-source \u00bb pilot\u00e9 par Facebook depuis 2013. Le concept g\u00e9n\u00e9ral de React est de permettre la cr\u00e9ation d'application web dont on peut \"rafraichir\" seulement le contenu d\u00e9sir\u00e9. React propose une approche bas\u00e9e sur des composantes Un application React sera en fait une arborescence de composants r\u00e9utilisables. DOM virtuel Utilise le concept de DOM virtuel : les changements au DOM r\u00e9el ne sont appliqu\u00e9s qu\u2019au bon moment en minimisant le nombres d\u2019op\u00e9rations pour optimiser les performances. Applique le principe \u00ab Les donn\u00e9es descendent, l\u2019\u00e9tat remonte\u00bb Un composant parent peut \"passer\" des donn\u00e9es \u00e0 un composant enfant, mais le composant enfant ne peut faire \"remonter\" ces donn\u00e9es. On va utiliser plut\u00f4t utiliser des fonctions. React Developper Tools Pour vous aider dans le d\u00e9veloppement, installez l\u2019extension React Developper Tools pour votre navigateur.","title":"Introduction \u00e0 React"},{"location":"notes_de_cours/react/introduction/#references","text":"","title":"R\u00e9f\u00e9rences"},{"location":"notes_de_cours/react/introduction/#documentation-officiel","text":"https://fr.reactjs.org/","title":"Documentation officiel"},{"location":"notes_de_cours/react/introduction/#tutoriels","text":"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started https://www.w3schools.com/react/default.asp https://fr.reactjs.org/tutorial/tutorial.html https://www.freecodecamp.org/learn/front-end-development-libraries/react/","title":"Tutoriels"},{"location":"notes_de_cours/react/introduction/#cours-en-ligne","text":"https://openclassrooms.com/fr/courses/4664381-realisez-une-application-web-avec-react-js/4664388-decouvrez-lutilite-et-les-concepts-cles-de-react","title":"Cours en ligne"},{"location":"notes_de_cours/react/jsx/","text":"","title":"Jsx"},{"location":"notes_de_cours/react/liste_component/","text":"Afficher une liste de composantes identiques Comment afficher une s\u00e9rie de composants au moyen d\u2019une boucle? Quand on veut afficher une s\u00e9rie de composantes identiques, il est plus pertinent de le faire au moyen d\u2019une boucle que de r\u00e9p\u00e9ter x fois la balise du composant. C\u2019est d\u2019autant plus vrai quand on ne connait pas d\u2019avance le nombre de composants qu\u2019on voudra afficher. Le principe est de cr\u00e9er un tableau de composants et d\u2019ensuite l\u2019appeler quand on veut l\u2019afficher. Pour \u00ab remplir \u00bb le tableau, on peut utiliser une boucle for , foreach ou bien array.map selon la situation. On doit aussi ajouter un attribut key avec une valeur unique quand on ajoute la composante pour permettre \u00e0 React de bien les diff\u00e9rencier. Exemple <Todo id={task.id} name={task.name} completed={task.completed} key={task.id} /> L'erreur qui est affich\u00e9 si on ne donne pas le param\u00e8tre key Cr\u00e9er un tableau de composantes Voici deux exemples, le premier avec une boucle foreach et le second avec la fonction array.map . let lignesTableau = []; // La classe re\u00e7oit en param\u00e8tre un tableau livres // LigneTableau est une composante this.props.livres.foreach(function(livre) { lignesTableau.push(<LigneTableau livre={livre} key={livre.id}/>); }); // ou avec une fonction fl\u00e9ch\u00e9e this.props.livres.foreach(book => lignesTableau.push(<LigneTableau livre={livre} key={livre.id}/>)); const lignesTableau = this.props.livres.map(livre => (<LigneTableau book={livre} key={livre.id}/>)); Dans les deux cas, on peut ensuite utiliser le tableau lignesTableau comme ceci <table className=\"BooksTable\"> <thead> <tr> <th>id</th> <th>Titre</th> </tr> </thead> <tbody> {lignesTableau} </tbody> </table>","title":"Afficher une liste de composantes identiques"},{"location":"notes_de_cours/react/liste_component/#afficher-une-liste-de-composantes-identiques","text":"","title":"Afficher une liste de composantes identiques"},{"location":"notes_de_cours/react/liste_component/#comment-afficher-une-serie-de-composants-au-moyen-dune-boucle","text":"Quand on veut afficher une s\u00e9rie de composantes identiques, il est plus pertinent de le faire au moyen d\u2019une boucle que de r\u00e9p\u00e9ter x fois la balise du composant. C\u2019est d\u2019autant plus vrai quand on ne connait pas d\u2019avance le nombre de composants qu\u2019on voudra afficher. Le principe est de cr\u00e9er un tableau de composants et d\u2019ensuite l\u2019appeler quand on veut l\u2019afficher. Pour \u00ab remplir \u00bb le tableau, on peut utiliser une boucle for , foreach ou bien array.map selon la situation. On doit aussi ajouter un attribut key avec une valeur unique quand on ajoute la composante pour permettre \u00e0 React de bien les diff\u00e9rencier. Exemple <Todo id={task.id} name={task.name} completed={task.completed} key={task.id} /> L'erreur qui est affich\u00e9 si on ne donne pas le param\u00e8tre key","title":"Comment afficher une s\u00e9rie de composants au moyen d\u2019une boucle?"},{"location":"notes_de_cours/react/liste_component/#creer-un-tableau-de-composantes","text":"Voici deux exemples, le premier avec une boucle foreach et le second avec la fonction array.map . let lignesTableau = []; // La classe re\u00e7oit en param\u00e8tre un tableau livres // LigneTableau est une composante this.props.livres.foreach(function(livre) { lignesTableau.push(<LigneTableau livre={livre} key={livre.id}/>); }); // ou avec une fonction fl\u00e9ch\u00e9e this.props.livres.foreach(book => lignesTableau.push(<LigneTableau livre={livre} key={livre.id}/>)); const lignesTableau = this.props.livres.map(livre => (<LigneTableau book={livre} key={livre.id}/>)); Dans les deux cas, on peut ensuite utiliser le tableau lignesTableau comme ceci <table className=\"BooksTable\"> <thead> <tr> <th>id</th> <th>Titre</th> </tr> </thead> <tbody> {lignesTableau} </tbody> </table>","title":"Cr\u00e9er un tableau de composantes"},{"location":"notes_de_cours/react/mise_en_place/","text":"Mise en place de l'environnement Pour vous aider dans le d\u00e9veloppement, installez l\u2019extension React Developper Tools pour votre navigateur.","title":"Mise en place de l'environnement"},{"location":"notes_de_cours/react/mise_en_place/#mise-en-place-de-lenvironnement","text":"Pour vous aider dans le d\u00e9veloppement, installez l\u2019extension React Developper Tools pour votre navigateur.","title":"Mise en place de l'environnement"},{"location":"notes_de_cours/react/props/","text":"Param\u00e8tres de composantes (props) Les \u00ab props \u00bb sont des param\u00e8tres qu\u2019on \u00ab passe \u00bb aux composantes via des attributs html. <Helloworld name='Mathieu' /> La composante re\u00e7oit un objet props qui va contenir les attributs qu\u2019on lui envoie. <H1>Hello, {this.props.name}</H1> Dans ces deux exemples, la balise H1 afficherait \"Hello, Mathieu\". Notez la syntaxe pour utiliser une variable avec JSX, il faut l\u2019entourer des caract\u00e8res { }. On peut envoyer ce qu\u2019on veut dans l\u2019objet prop : une variable, une constante, un tableau, un autre objet, une fonction, etc. const infoUsager = {prenom: 'Mathieu', nom: 'Fr\u00e9chette'} // ... <Helloworld usager={infoUsager} /> et ensuite dans le composant HelloWorld <H1>Hello, {this.props.usager.prenom} {this.props.usager.prenom}</H1> Si vous avez une fonction constructeur (constructor) dans votre classe composante, vous devez passer props en arguments de la fonction et utiliser la methode super(props) . constructor(props) { super(props); // ... } Les props sont en lecture seule , on ne peut les modifier.","title":"Les props"},{"location":"notes_de_cours/react/props/#parametres-de-composantes-props","text":"Les \u00ab props \u00bb sont des param\u00e8tres qu\u2019on \u00ab passe \u00bb aux composantes via des attributs html. <Helloworld name='Mathieu' /> La composante re\u00e7oit un objet props qui va contenir les attributs qu\u2019on lui envoie. <H1>Hello, {this.props.name}</H1> Dans ces deux exemples, la balise H1 afficherait \"Hello, Mathieu\". Notez la syntaxe pour utiliser une variable avec JSX, il faut l\u2019entourer des caract\u00e8res { }. On peut envoyer ce qu\u2019on veut dans l\u2019objet prop : une variable, une constante, un tableau, un autre objet, une fonction, etc. const infoUsager = {prenom: 'Mathieu', nom: 'Fr\u00e9chette'} // ... <Helloworld usager={infoUsager} /> et ensuite dans le composant HelloWorld <H1>Hello, {this.props.usager.prenom} {this.props.usager.prenom}</H1> Si vous avez une fonction constructeur (constructor) dans votre classe composante, vous devez passer props en arguments de la fonction et utiliser la methode super(props) . constructor(props) { super(props); // ... } Les props sont en lecture seule , on ne peut les modifier.","title":"Param\u00e8tres de composantes (props)"},{"location":"notes_de_cours/react/react_notes/","text":"Notes sur React Don't touch the dom Build website like lego blocks (component) Unidirectional data flow I'm just the UI, the rest is up to you Multiplatform, react native librairie de component Material Blueprint keywords Declarative JSX Components State Props Virtual Dom What make a good React Dev Decide on components Decide the state and where it lives What change when state changes npm vs npx npm t\u00e9l\u00e9charge et installe npx t\u00e9l\u00e9charge, ex\u00e9cute et supprimer ensuite, ne reste pas sur le disque Le point d'entr\u00e9e d'une application React est index.js Installation Node 16.14.0 LTS (vient avec npm) gitbash Create React App https://fr.reactjs.org/docs/create-a-new-react-app.html React-scripts Pour se simplifier la vie, lance des scripts pour bien utiliser notre projet React. D\u00e9finie dans package.json sous \"scripts\", pour utiliser, on utilise npm ou yarn et le nom du script : npm start . start, lance l'application sur un serveur de d\u00e9veloppement local build, cr\u00e9e une version optimis\u00e9 de l'application, pour la distribuer et quelle soit la plus rapide possible. test, lance les fichiers \".test.js\" eject, pas touche!! Pour exclure des trucs du build? Je suis pas sur, mais c'est pas \u00e0 utiliser sauf dans des cas tr\u00e8s sp\u00e9cifique. Classes vs Hook","title":"Notes sur React"},{"location":"notes_de_cours/react/react_notes/#notes-sur-react","text":"Don't touch the dom Build website like lego blocks (component) Unidirectional data flow I'm just the UI, the rest is up to you Multiplatform, react native librairie de component Material Blueprint keywords Declarative JSX Components State Props Virtual Dom What make a good React Dev Decide on components Decide the state and where it lives What change when state changes npm vs npx npm t\u00e9l\u00e9charge et installe npx t\u00e9l\u00e9charge, ex\u00e9cute et supprimer ensuite, ne reste pas sur le disque Le point d'entr\u00e9e d'une application React est index.js","title":"Notes sur React"},{"location":"notes_de_cours/react/react_notes/#installation","text":"Node 16.14.0 LTS (vient avec npm) gitbash","title":"Installation"},{"location":"notes_de_cours/react/react_notes/#create-react-app","text":"https://fr.reactjs.org/docs/create-a-new-react-app.html","title":"Create React App"},{"location":"notes_de_cours/react/react_notes/#react-scripts","text":"Pour se simplifier la vie, lance des scripts pour bien utiliser notre projet React. D\u00e9finie dans package.json sous \"scripts\", pour utiliser, on utilise npm ou yarn et le nom du script : npm start . start, lance l'application sur un serveur de d\u00e9veloppement local build, cr\u00e9e une version optimis\u00e9 de l'application, pour la distribuer et quelle soit la plus rapide possible. test, lance les fichiers \".test.js\" eject, pas touche!! Pour exclure des trucs du build? Je suis pas sur, mais c'est pas \u00e0 utiliser sauf dans des cas tr\u00e8s sp\u00e9cifique.","title":"React-scripts"},{"location":"notes_de_cours/react/react_notes/#classes-vs-hook","text":"","title":"Classes vs Hook"},{"location":"notes_de_cours/react/remonter_data/","text":"Faire \"remonter\" des donn\u00e9es entre composant On a vu qu'en React les \"donn\u00e9es descendent, l'\u00e9tat remonte\". En passant les donn\u00e9es en param\u00e8tre du composant parent au composant enfant on peut y acc\u00e9der avec l'objet props mais elles sont en lecture seule. Quand on veut faire remonter des donn\u00e9es dans l'autre sens on doit utiliser une fonction d\u00e9fini dans le composant parent et la passer elle aussi en param\u00e8tre au composant enfant. Prenons comme exemple l'affichage suivant qui est divis\u00e9 en deux composant parent / enfant : La valeur du nom est stock\u00e9 dans l'\u00e9tat local de App.js . On veut pouvoir le modifier dans la zone de texte du composant EditName . Le composant App.js va passer en param\u00e8tre la valeur du nom mais il ne pourra pas \u00eatre modifier par le composant enfant car les props sont toujours en lecture seule. On va devoir cr\u00e9er une fonction dans App.js qui va modifier l'\u00e9tat de celui-ci et la passer en param\u00e8tre au composant EditName . Ensuite dans EditName on va associer une fonction \u00e0 l'\u00e9v\u00e9nement OnChange de la zone de saisie et dans cette fonction on va appeler la fonction re\u00e7u en param\u00e8tre par le composant App . App.js import React from 'react'; import './App.css'; import EditName from './EditName'; class App extends React.Component { constructor() { super(); this.state = { nom : \"World\" }; } handleChangeNameFromEdit = (nouveauNom) => this.setState({nom: nouveauNom}); render() { return ( <div className=\"App\"> <h1>Hello {this.state.nom}</h1> <EditName nom={this.state.nom} changeName={this.handleChangeNameFromEdit} /> </div> ) } } export default (App); EditName.js import React from \"react\"; class EditName extends React.Component { constructor(props) { super(props); } handleNameChange = (event) => { this.props.changeName(event.target.value); } render() { return ( <div> <label htmlFor='editName'>Modifier le nom</label> <input type=\"text\" id=\"editName\" name=\"editName\" value={this.props.nom} onChange={this.handleNameChange} /> </div> ) } } export default (EditName);","title":"Faire \"remonter\" des donn\u00e9es"},{"location":"notes_de_cours/react/remonter_data/#faire-remonter-des-donnees-entre-composant","text":"On a vu qu'en React les \"donn\u00e9es descendent, l'\u00e9tat remonte\". En passant les donn\u00e9es en param\u00e8tre du composant parent au composant enfant on peut y acc\u00e9der avec l'objet props mais elles sont en lecture seule. Quand on veut faire remonter des donn\u00e9es dans l'autre sens on doit utiliser une fonction d\u00e9fini dans le composant parent et la passer elle aussi en param\u00e8tre au composant enfant. Prenons comme exemple l'affichage suivant qui est divis\u00e9 en deux composant parent / enfant : La valeur du nom est stock\u00e9 dans l'\u00e9tat local de App.js . On veut pouvoir le modifier dans la zone de texte du composant EditName . Le composant App.js va passer en param\u00e8tre la valeur du nom mais il ne pourra pas \u00eatre modifier par le composant enfant car les props sont toujours en lecture seule. On va devoir cr\u00e9er une fonction dans App.js qui va modifier l'\u00e9tat de celui-ci et la passer en param\u00e8tre au composant EditName . Ensuite dans EditName on va associer une fonction \u00e0 l'\u00e9v\u00e9nement OnChange de la zone de saisie et dans cette fonction on va appeler la fonction re\u00e7u en param\u00e8tre par le composant App . App.js import React from 'react'; import './App.css'; import EditName from './EditName'; class App extends React.Component { constructor() { super(); this.state = { nom : \"World\" }; } handleChangeNameFromEdit = (nouveauNom) => this.setState({nom: nouveauNom}); render() { return ( <div className=\"App\"> <h1>Hello {this.state.nom}</h1> <EditName nom={this.state.nom} changeName={this.handleChangeNameFromEdit} /> </div> ) } } export default (App); EditName.js import React from \"react\"; class EditName extends React.Component { constructor(props) { super(props); } handleNameChange = (event) => { this.props.changeName(event.target.value); } render() { return ( <div> <label htmlFor='editName'>Modifier le nom</label> <input type=\"text\" id=\"editName\" name=\"editName\" value={this.props.nom} onChange={this.handleNameChange} /> </div> ) } } export default (EditName);","title":"Faire \"remonter\" des donn\u00e9es entre composant"},{"location":"notes_de_cours/react/state/","text":"L'\u00e9tat local d'un composant (state) Chaque composant React \u00e0 un object state cr\u00e9\u00e9 par d\u00e9faut. Dans cet objet on va stocker les propri\u00e9t\u00e9s qui sont propre au composant. Quand l\u2019objet change, qu\u2019on change une de ces propri\u00e9t\u00e9s, le composant est r\u00e9afficher dans la page. On doit initialiser les propri\u00e9t\u00e9s de state dans le constructeur constructor(props) { super(props); this.state = {titre: this.props.titre, note: 4}; } On y fait r\u00e9f\u00e9rence avec this : this.state.titre Modification de l'\u00e9tat Pour modifier la valeur de state on doit utiliser la fonction setSate() this.setState({note: 5}); On n\u2019est pas oblig\u00e9 d\u2019inclure toutes les propri\u00e9t\u00e9s de state, seulement celle que l\u2019on veut changer. Par contre on ne doit pas modifier directement une valeur de l'\u00e9tat sinon le composant ne sera pas r\u00e9affich\u00e9. // \u00c0 ne pas faire this.state.note = 5; La fonction setState() peut aussi aussi accepter une fonction en param\u00e8tre au lieu d'un objet : // Dans cet exemple on voudrait augmenter la note d'une valeur re\u00e7u en // param\u00e8tre par le composant this.setState((state, props) => note: state.note + props.increment); R\u00e9f\u00e9rences https://fr.reactjs.org/docs/state-and-lifecycle.html https://www.w3schools.com/react/react_state.asp","title":"L'\u00e9tat local (state)"},{"location":"notes_de_cours/react/state/#letat-local-dun-composant-state","text":"Chaque composant React \u00e0 un object state cr\u00e9\u00e9 par d\u00e9faut. Dans cet objet on va stocker les propri\u00e9t\u00e9s qui sont propre au composant. Quand l\u2019objet change, qu\u2019on change une de ces propri\u00e9t\u00e9s, le composant est r\u00e9afficher dans la page. On doit initialiser les propri\u00e9t\u00e9s de state dans le constructeur constructor(props) { super(props); this.state = {titre: this.props.titre, note: 4}; } On y fait r\u00e9f\u00e9rence avec this : this.state.titre","title":"L'\u00e9tat local d'un composant (state)"},{"location":"notes_de_cours/react/state/#modification-de-letat","text":"Pour modifier la valeur de state on doit utiliser la fonction setSate() this.setState({note: 5}); On n\u2019est pas oblig\u00e9 d\u2019inclure toutes les propri\u00e9t\u00e9s de state, seulement celle que l\u2019on veut changer. Par contre on ne doit pas modifier directement une valeur de l'\u00e9tat sinon le composant ne sera pas r\u00e9affich\u00e9. // \u00c0 ne pas faire this.state.note = 5; La fonction setState() peut aussi aussi accepter une fonction en param\u00e8tre au lieu d'un objet : // Dans cet exemple on voudrait augmenter la note d'une valeur re\u00e7u en // param\u00e8tre par le composant this.setState((state, props) => note: state.note + props.increment); R\u00e9f\u00e9rences https://fr.reactjs.org/docs/state-and-lifecycle.html https://www.w3schools.com/react/react_state.asp","title":"Modification de l'\u00e9tat"},{"location":"notes_de_cours/slim/middleware/","text":"Les Middlewares En terme g\u00e9n\u00e9ral, un middleware est un logiciel qui est ex\u00e9cut\u00e9 durant la communication entre deux applications. Au niveau des services web, les middlewares seront utilis\u00e9s principalement pour manipuler la requ\u00eate en entr\u00e9e et la r\u00e9ponse en sortie. Un exemple d'utilisation serait un syst\u00e8me d'authentification qui ne laisserait \"passer\" la requ\u00eate HTTP \u00e0 notre api seulement si elle est authentifi\u00e9 ad\u00e9quatement. Comment utiliser des middlewares avec SLIM? Les middlewares forment des couches concentriques autour de l\u2019application. En commen\u00e7ant par le plus r\u00e9cent, la requ\u00eate les traverses un a un jusqu\u2019\u00e0 l\u2019application pour ensuite refaire le chemin inverse avec la r\u00e9ponse. Chaque middleware impl\u00e9mente l\u2019interface middleware de PSR-15 Psr\\Http\\Message\\ServerRequestInterface \u2013 L\u2019objet requ\u00eate PSR-7 Psr\\Http\\Server\\RequestHandlerInterface \u2013 L\u2019objet request handler PSR-15 On peut faire ce qu\u2019on veut de ces objets, mais on doit absolument retourner une instance de Psr\\Http\\Message\\ResponseInterface . Exemple d'un middleware Dans votre projet, cr\u00e9ez le r\u00e9pertoire src/Middleware Cr\u00e9ez ensuite dans ce r\u00e9pertoire le fichier ExampleBeforeMiddleware.php et copiez y le code suivant : <?php // Source : https://www.slimframework.com/docs/v4/concepts/middleware.html namespace App\\Middleware; use Psr\\Http\\Message\\ServerRequestInterface as Request; use Psr\\Http\\Server\\RequestHandlerInterface as RequestHandler; use Slim\\Psr7\\Response; class ExampleBeforeMiddleware { /** * Example middleware invokable class * * @param ServerRequest $request PSR-7 request * @param RequestHandler $handler PSR-15 request handler * * @return Response */ public function __invoke(Request $request, RequestHandler $handler): Response { $response = $handler->handle($request); $existingContent = (string) $response->getBody(); $response = new Response(); $response->getBody()->write('Voici la r\u00e9ponse -> ' . $existingContent); return $response; } } Comment emp\u00eacher le traitement de la requ\u00eate? Dans la fonction __invoke() , la ligne de code suivante sert \u00e0 ex\u00e9cuter la requ\u00eate : $response = $handler->handle($request); Donc pour tant que cette ligne n'est pas ex\u00e9cut\u00e9, la requ\u00eate ne l'est pas non plus. Il faut se rappeler par contre qu'on doit retourner une instance de Psr\\Http\\Message\\ResponseInterface . Voici un exemple d'une fonction de validation d'un authentification et qui retournerait un code 401 si les informations ne sont pas valides. public function __invoke( Request $request, RequestHandler $handler): ResponseInterface { // Extraction du token encod\u00e9 de l'ent\u00eate $token = explode(' ', $request->getHeaderLine('Authorization'))[1] ?? ''; if (!$this->basicAuthValidation->isTokenValid($token)) { // Si le token n'est pas valide, on retourne une r\u00e9ponse vide avec le code // de statut 401 return $this->responseFactory->createResponse() ->withStatus(401, 'Unauthorized'); } // Sinon on retourne la r\u00e9ponse originale return $handler->handle($request); } O\u00f9 ajouter le middleware dans notre structure de projet? On peut ajouter le middleware au niveau de l'application, sur une route ou sur un groupe de routes. Application Dans le fichier config\\middleware.php , il suffit d'ajouter la classe \u00e0 l'objet $app \u00e0 l'aide de la fonction add() : <?php // ... use App\\Middleware\\ExampleBeforeMiddleware; return function (App $app) { // ... $app->add(ExampleBeforeMiddleware::class); // ... }; Le middleware sera ex\u00e9cut\u00e9 pour chaque requ\u00eate http envoy\u00e9e vers notre api. Dans notre exemple, chaque r\u00e9ponse d\u00e9butera par le mot BEFORE : Voici la r\u00e9ponse -> {\"success\":true,\"message\":\"Hello world!\"} Sur une route ou un groupe de routes Dans le fichier config\\route.php , il suffit d'ajouter la classe \u00e0 l'objet $app sur la route ou le groupe de routes souhait\u00e9 \u00e0 l'aide de la fonction add() : <?php // ... use App\\Middleware\\ExampleBeforeMiddleware; return function (App $app) { $app->get('/', \\App\\Action\\HomeAction::class)->setName('home') ->add(ExampleBeforeMiddleware::class); // ... }; Dans cet exemple, le middleware ne sera appliqu\u00e9 que sur la route GET / . Source https://www.slimframework.com/docs/v4/concepts/middleware.html","title":"Middleware"},{"location":"notes_de_cours/slim/middleware/#les-middlewares","text":"En terme g\u00e9n\u00e9ral, un middleware est un logiciel qui est ex\u00e9cut\u00e9 durant la communication entre deux applications. Au niveau des services web, les middlewares seront utilis\u00e9s principalement pour manipuler la requ\u00eate en entr\u00e9e et la r\u00e9ponse en sortie. Un exemple d'utilisation serait un syst\u00e8me d'authentification qui ne laisserait \"passer\" la requ\u00eate HTTP \u00e0 notre api seulement si elle est authentifi\u00e9 ad\u00e9quatement.","title":"Les Middlewares"},{"location":"notes_de_cours/slim/middleware/#comment-utiliser-des-middlewares-avec-slim","text":"Les middlewares forment des couches concentriques autour de l\u2019application. En commen\u00e7ant par le plus r\u00e9cent, la requ\u00eate les traverses un a un jusqu\u2019\u00e0 l\u2019application pour ensuite refaire le chemin inverse avec la r\u00e9ponse.","title":"Comment utiliser des middlewares avec SLIM?"},{"location":"notes_de_cours/slim/middleware/#_1","text":"Chaque middleware impl\u00e9mente l\u2019interface middleware de PSR-15 Psr\\Http\\Message\\ServerRequestInterface \u2013 L\u2019objet requ\u00eate PSR-7 Psr\\Http\\Server\\RequestHandlerInterface \u2013 L\u2019objet request handler PSR-15 On peut faire ce qu\u2019on veut de ces objets, mais on doit absolument retourner une instance de Psr\\Http\\Message\\ResponseInterface .","title":""},{"location":"notes_de_cours/slim/middleware/#exemple-dun-middleware","text":"Dans votre projet, cr\u00e9ez le r\u00e9pertoire src/Middleware Cr\u00e9ez ensuite dans ce r\u00e9pertoire le fichier ExampleBeforeMiddleware.php et copiez y le code suivant : <?php // Source : https://www.slimframework.com/docs/v4/concepts/middleware.html namespace App\\Middleware; use Psr\\Http\\Message\\ServerRequestInterface as Request; use Psr\\Http\\Server\\RequestHandlerInterface as RequestHandler; use Slim\\Psr7\\Response; class ExampleBeforeMiddleware { /** * Example middleware invokable class * * @param ServerRequest $request PSR-7 request * @param RequestHandler $handler PSR-15 request handler * * @return Response */ public function __invoke(Request $request, RequestHandler $handler): Response { $response = $handler->handle($request); $existingContent = (string) $response->getBody(); $response = new Response(); $response->getBody()->write('Voici la r\u00e9ponse -> ' . $existingContent); return $response; } }","title":"Exemple d'un middleware"},{"location":"notes_de_cours/slim/middleware/#comment-empecher-le-traitement-de-la-requete","text":"Dans la fonction __invoke() , la ligne de code suivante sert \u00e0 ex\u00e9cuter la requ\u00eate : $response = $handler->handle($request); Donc pour tant que cette ligne n'est pas ex\u00e9cut\u00e9, la requ\u00eate ne l'est pas non plus. Il faut se rappeler par contre qu'on doit retourner une instance de Psr\\Http\\Message\\ResponseInterface . Voici un exemple d'une fonction de validation d'un authentification et qui retournerait un code 401 si les informations ne sont pas valides. public function __invoke( Request $request, RequestHandler $handler): ResponseInterface { // Extraction du token encod\u00e9 de l'ent\u00eate $token = explode(' ', $request->getHeaderLine('Authorization'))[1] ?? ''; if (!$this->basicAuthValidation->isTokenValid($token)) { // Si le token n'est pas valide, on retourne une r\u00e9ponse vide avec le code // de statut 401 return $this->responseFactory->createResponse() ->withStatus(401, 'Unauthorized'); } // Sinon on retourne la r\u00e9ponse originale return $handler->handle($request); }","title":"Comment emp\u00eacher le traitement de la requ\u00eate?"},{"location":"notes_de_cours/slim/middleware/#ou-ajouter-le-middleware-dans-notre-structure-de-projet","text":"On peut ajouter le middleware au niveau de l'application, sur une route ou sur un groupe de routes. Application Dans le fichier config\\middleware.php , il suffit d'ajouter la classe \u00e0 l'objet $app \u00e0 l'aide de la fonction add() : <?php // ... use App\\Middleware\\ExampleBeforeMiddleware; return function (App $app) { // ... $app->add(ExampleBeforeMiddleware::class); // ... }; Le middleware sera ex\u00e9cut\u00e9 pour chaque requ\u00eate http envoy\u00e9e vers notre api. Dans notre exemple, chaque r\u00e9ponse d\u00e9butera par le mot BEFORE : Voici la r\u00e9ponse -> {\"success\":true,\"message\":\"Hello world!\"} Sur une route ou un groupe de routes Dans le fichier config\\route.php , il suffit d'ajouter la classe \u00e0 l'objet $app sur la route ou le groupe de routes souhait\u00e9 \u00e0 l'aide de la fonction add() : <?php // ... use App\\Middleware\\ExampleBeforeMiddleware; return function (App $app) { $app->get('/', \\App\\Action\\HomeAction::class)->setName('home') ->add(ExampleBeforeMiddleware::class); // ... }; Dans cet exemple, le middleware ne sera appliqu\u00e9 que sur la route GET / .","title":"O\u00f9 ajouter le middleware dans notre structure de projet?"},{"location":"notes_de_cours/slim/middleware/#source","text":"https://www.slimframework.com/docs/v4/concepts/middleware.html","title":"Source"},{"location":"notes_de_cours/slim/monolog/","text":"Utilisation de journaux d'\u00e9v\u00e8nements (Log files) Pourquoi utiliser des fichiers log? C'est une bonne fa\u00e7on de d\u00e9bugger les erreurs \u00c7a nous permet de \"voir\" ce qui se passe dans notre application, de suivre comment les usagers l'utilisent Pour garder une trace des op\u00e9rations effectu\u00e9s par le serveur Il y a plusieurs choix possible pour cr\u00e9er des fichiers log et les utiliser. Nous allons utiliser la librairie Monolog pour php. Installation Vous pouvez retrouver la documentation de Monolog \u00e0 cette adresse : https://seldaek.github.io/monolog/ . L'installation se fait via composer avec l'instruction suivante : composer require monolog/monolog Int\u00e9gration \u00e0 notre projet SLIM Dans le projet de d\u00e9part base-slim-skeleton nous avons d\u00e9j\u00e0 une classe nomm\u00e9 LoggerFactory qui s'occupe de la cr\u00e9ation des fichiers et de l'\u00e9criture dans ceux-ci. Elle est situ\u00e9 dans le r\u00e9pertoire src/Factory Pour son utilisation nous avons aussi besoin d'un g\u00e9n\u00e9rateur de UUID qu'on peut installer aussi via composer : composer require symfony/polyfill-uuid Normalement monolog et le g\u00e9n\u00e9rateur de uuid devrait d\u00e9j\u00e0 avoir \u00e9t\u00e9 install\u00e9 dans votre projet quand vous avec fait la commande composer update apr\u00e8s avoir cloner le projet. Pour v\u00e9rifier le tout allez dans le fichier composer.json, vous devriez avoir les lignes suivantes : { \"require\": { \"monolog/monolog\": \"^2.2\", \"symfony/polyfill-uuid\": \"^1.22\", ... }, ... } Une fois les deux d\u00e9pendances install\u00e9es : Cr\u00e9ez un r\u00e9pertoire nomm\u00e9 logs \u00e0 la racine de votre application Ajouter le nom de se r\u00e9pertoire dans le fichier .gitignore pour exclure de vos commit Git les fichiers de log que vous allez cr\u00e9er. vendor/ logs/ Assurez-vous d'avoir les lignes suivantes dans le fichier config/settings.php // Logger settings $settings['logger'] = [ 'name' => 'app', // C'est ici qu'on indique dans quel r\u00e9pertoire sera les fichiers // \u00e0 modifier si vous avez utiliser un autre nom 'path' => __DIR__ . '/../logs', 'filename' => 'app.log', 'level' => \\Monolog\\Logger::DEBUG, 'file_permission' => 0775, ]; Dans le fichier config/container.php , ajoutez les lignes suivantes si elles n'y sont pas d\u00e9j\u00e0 <?php use App\\Factory\\LoggerFactory; // ... return [ // ... LoggerFactory::class => function (ContainerInterface $container) { return new LoggerFactory($container->get('settings')['logger']); }, // ... ]; Si vous voulez \"logger\" les erreurs g\u00e9n\u00e9r\u00e9s par SLIM automatiquement, modifiez le fichier config/middleware.php de la fa\u00e7on suivante : // Remplacer cette ligne $app->add(ErrorMiddleware::class); // Par ces lignes $loggerFactory = $app->getContainer()->get(\\App\\Factory\\LoggerFactory::class); // Le nom du fichier o\u00f9 les erreurs seront inscrites $logger = $loggerFactory->addFileHandler('error.log')->createLogger(); $app->addErrorMiddleware(true, true, true, $logger); Utilisation dans notre projet SLIM Pour \u00e9crire dans un fichier de log depuis une classe de notre projet, on doit r\u00e9cup\u00e9rer un objet LoggerFactory pass\u00e9 en param\u00e8tre dans le constructeur de la classe. On peut ensuite utiliser cette objet pour \u00e9crire le message souhait\u00e9. Exemple avec la classe HomeAction <?php namespace App\\Action; use App\\Factory\\LoggerFactory; // \u00c0 ajouter // ... final class HomeAction { /** * @var LoggerInterface */ private $logger; public function __construct(LoggerFactory $loggerFactory) { $this->logger = $loggerFactory // Le nom de fichier de log utilis\u00e9 ->addFileHandler('hello.log') // On peut passer du texte en parametre ici qui identifiera // la ligne de log, sinon un UUID sera utilis\u00e9 ->createLogger('MessageFromMath'); } public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // ... // C'est ici qu'on inscrit notre message $this->logger->info('Hello world'); // ... } } Le r\u00e9sultat sera inscrit dans le fichier hello-[date-du-jour].log [2022-02-11T05:52:53.347534+01:00] 73c96cc8-4c6c-42d7-8a39-593ab0f964c6.INFO: Hello World [2022-02-11T05:52:56.912031+01:00] MessageFromMath.INFO: Hello World Niveaux de s\u00e9v\u00e9rit\u00e9 des messages Quand on inscrit un message d'\u00e9v\u00e9nement, on lui attache un niveau de s\u00e9v\u00e9rit\u00e9. \u00c7a nous permet de cat\u00e9goriser les messages et m\u00eame dans omettre selon la configuration. Les diff\u00e9rents niveaux support\u00e9s par Monolog sont les suivants, trier par ordre d'importance : DEBUG - Message de d\u00e9bogage INFO - Message d'information NOTICE - Il est arriv\u00e9 un \u00e9v\u00e9nement important WARNING - Message d'avertissement mais pas d'erreur ERROR - Message d'erreur mais qui ne requiert pas d'action imm\u00e9diate CRITICAL - Message de condition critique ALERT - Erreur qui n\u00e9cessite une action imm\u00e9diate EMERGENCY - Alerte rouge Pour chacun des niveaux, il y a une fonction du m\u00eame nom \u00e0 utiliser // Message d'information $this->logger->info(\"Ceci est un message d'information\"); // Message d'erreur $this->logger->error(\"Ceci est un message d'erreur\"); Pour modifier le niveau minimum de s\u00e9v\u00e9rit\u00e9, c'est-\u00e0-dire \u00e0 partir de quel niveau le message sera inscrit dans le fichier, on doit changer la valeur de la cl\u00e9 level du tableau settings dans le fichier config/settings.php // Logger settings $settings['logger'] = [ 'name' => 'app', 'path' => __DIR__ . '/../logs', 'filename' => 'app.log', 'level' => \\Monolog\\Logger::DEBUG, // Changer la valeur de level ici 'file_permission' => 0775, ]; Si on change cette valeur pour 'level' => \\Monolog\\Logger::ERROR , dans l'exemple plus haut seulement le message d'erreur sera inscrit, pas le message \"info\". L'utilit\u00e9 principale est qu'on peut contr\u00f4ler les messages \u00e0 retenir quand notre projet est d\u00e9ployer sur le Internet. Source https://odan.github.io/2020/05/25/slim4-logging.html","title":"Utilisation de journaux d'\u00e9v\u00e8nements (Log files)"},{"location":"notes_de_cours/slim/monolog/#utilisation-de-journaux-devenements-log-files","text":"","title":"Utilisation de journaux d'\u00e9v\u00e8nements (Log files)"},{"location":"notes_de_cours/slim/monolog/#pourquoi-utiliser-des-fichiers-log","text":"C'est une bonne fa\u00e7on de d\u00e9bugger les erreurs \u00c7a nous permet de \"voir\" ce qui se passe dans notre application, de suivre comment les usagers l'utilisent Pour garder une trace des op\u00e9rations effectu\u00e9s par le serveur Il y a plusieurs choix possible pour cr\u00e9er des fichiers log et les utiliser. Nous allons utiliser la librairie Monolog pour php.","title":"Pourquoi utiliser des fichiers log?"},{"location":"notes_de_cours/slim/monolog/#installation","text":"Vous pouvez retrouver la documentation de Monolog \u00e0 cette adresse : https://seldaek.github.io/monolog/ . L'installation se fait via composer avec l'instruction suivante : composer require monolog/monolog","title":"Installation"},{"location":"notes_de_cours/slim/monolog/#integration-a-notre-projet-slim","text":"Dans le projet de d\u00e9part base-slim-skeleton nous avons d\u00e9j\u00e0 une classe nomm\u00e9 LoggerFactory qui s'occupe de la cr\u00e9ation des fichiers et de l'\u00e9criture dans ceux-ci. Elle est situ\u00e9 dans le r\u00e9pertoire src/Factory Pour son utilisation nous avons aussi besoin d'un g\u00e9n\u00e9rateur de UUID qu'on peut installer aussi via composer : composer require symfony/polyfill-uuid Normalement monolog et le g\u00e9n\u00e9rateur de uuid devrait d\u00e9j\u00e0 avoir \u00e9t\u00e9 install\u00e9 dans votre projet quand vous avec fait la commande composer update apr\u00e8s avoir cloner le projet. Pour v\u00e9rifier le tout allez dans le fichier composer.json, vous devriez avoir les lignes suivantes : { \"require\": { \"monolog/monolog\": \"^2.2\", \"symfony/polyfill-uuid\": \"^1.22\", ... }, ... } Une fois les deux d\u00e9pendances install\u00e9es : Cr\u00e9ez un r\u00e9pertoire nomm\u00e9 logs \u00e0 la racine de votre application Ajouter le nom de se r\u00e9pertoire dans le fichier .gitignore pour exclure de vos commit Git les fichiers de log que vous allez cr\u00e9er. vendor/ logs/ Assurez-vous d'avoir les lignes suivantes dans le fichier config/settings.php // Logger settings $settings['logger'] = [ 'name' => 'app', // C'est ici qu'on indique dans quel r\u00e9pertoire sera les fichiers // \u00e0 modifier si vous avez utiliser un autre nom 'path' => __DIR__ . '/../logs', 'filename' => 'app.log', 'level' => \\Monolog\\Logger::DEBUG, 'file_permission' => 0775, ]; Dans le fichier config/container.php , ajoutez les lignes suivantes si elles n'y sont pas d\u00e9j\u00e0 <?php use App\\Factory\\LoggerFactory; // ... return [ // ... LoggerFactory::class => function (ContainerInterface $container) { return new LoggerFactory($container->get('settings')['logger']); }, // ... ]; Si vous voulez \"logger\" les erreurs g\u00e9n\u00e9r\u00e9s par SLIM automatiquement, modifiez le fichier config/middleware.php de la fa\u00e7on suivante : // Remplacer cette ligne $app->add(ErrorMiddleware::class); // Par ces lignes $loggerFactory = $app->getContainer()->get(\\App\\Factory\\LoggerFactory::class); // Le nom du fichier o\u00f9 les erreurs seront inscrites $logger = $loggerFactory->addFileHandler('error.log')->createLogger(); $app->addErrorMiddleware(true, true, true, $logger);","title":"Int\u00e9gration \u00e0 notre projet SLIM"},{"location":"notes_de_cours/slim/monolog/#utilisation-dans-notre-projet-slim","text":"Pour \u00e9crire dans un fichier de log depuis une classe de notre projet, on doit r\u00e9cup\u00e9rer un objet LoggerFactory pass\u00e9 en param\u00e8tre dans le constructeur de la classe. On peut ensuite utiliser cette objet pour \u00e9crire le message souhait\u00e9. Exemple avec la classe HomeAction <?php namespace App\\Action; use App\\Factory\\LoggerFactory; // \u00c0 ajouter // ... final class HomeAction { /** * @var LoggerInterface */ private $logger; public function __construct(LoggerFactory $loggerFactory) { $this->logger = $loggerFactory // Le nom de fichier de log utilis\u00e9 ->addFileHandler('hello.log') // On peut passer du texte en parametre ici qui identifiera // la ligne de log, sinon un UUID sera utilis\u00e9 ->createLogger('MessageFromMath'); } public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // ... // C'est ici qu'on inscrit notre message $this->logger->info('Hello world'); // ... } } Le r\u00e9sultat sera inscrit dans le fichier hello-[date-du-jour].log [2022-02-11T05:52:53.347534+01:00] 73c96cc8-4c6c-42d7-8a39-593ab0f964c6.INFO: Hello World [2022-02-11T05:52:56.912031+01:00] MessageFromMath.INFO: Hello World","title":"Utilisation dans notre projet SLIM"},{"location":"notes_de_cours/slim/monolog/#niveaux-de-severite-des-messages","text":"Quand on inscrit un message d'\u00e9v\u00e9nement, on lui attache un niveau de s\u00e9v\u00e9rit\u00e9. \u00c7a nous permet de cat\u00e9goriser les messages et m\u00eame dans omettre selon la configuration. Les diff\u00e9rents niveaux support\u00e9s par Monolog sont les suivants, trier par ordre d'importance : DEBUG - Message de d\u00e9bogage INFO - Message d'information NOTICE - Il est arriv\u00e9 un \u00e9v\u00e9nement important WARNING - Message d'avertissement mais pas d'erreur ERROR - Message d'erreur mais qui ne requiert pas d'action imm\u00e9diate CRITICAL - Message de condition critique ALERT - Erreur qui n\u00e9cessite une action imm\u00e9diate EMERGENCY - Alerte rouge Pour chacun des niveaux, il y a une fonction du m\u00eame nom \u00e0 utiliser // Message d'information $this->logger->info(\"Ceci est un message d'information\"); // Message d'erreur $this->logger->error(\"Ceci est un message d'erreur\"); Pour modifier le niveau minimum de s\u00e9v\u00e9rit\u00e9, c'est-\u00e0-dire \u00e0 partir de quel niveau le message sera inscrit dans le fichier, on doit changer la valeur de la cl\u00e9 level du tableau settings dans le fichier config/settings.php // Logger settings $settings['logger'] = [ 'name' => 'app', 'path' => __DIR__ . '/../logs', 'filename' => 'app.log', 'level' => \\Monolog\\Logger::DEBUG, // Changer la valeur de level ici 'file_permission' => 0775, ]; Si on change cette valeur pour 'level' => \\Monolog\\Logger::ERROR , dans l'exemple plus haut seulement le message d'erreur sera inscrit, pas le message \"info\". L'utilit\u00e9 principale est qu'on peut contr\u00f4ler les messages \u00e0 retenir quand notre projet est d\u00e9ployer sur le Internet.","title":"Niveaux de s\u00e9v\u00e9rit\u00e9 des messages"},{"location":"notes_de_cours/slim/monolog/#source","text":"https://odan.github.io/2020/05/25/slim4-logging.html","title":"Source"},{"location":"notes_de_cours/slim/recuperer_params/","text":"R\u00e9cup\u00e9rer les param\u00e8tres d'une requ\u00eate HTTP On a vu qu'il y a plusieurs m\u00e9thodes pour passer des param\u00e8tres dans une requ\u00eate HTML : dans la section \"query\" de l'url, directement dans l'url et dans le corps (body) de la requ\u00eate. SLIM nous permet de facilement r\u00e9cup\u00e9rer ces donn\u00e9es avec l'objet ServerRequestInterface Cette objet est re\u00e7u en param\u00eatre de la fonction _invoke des classes \"action\" de notre api. public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // Avec la variable $request nous avons acc\u00e8s aux param\u00e8tres // ... } Param\u00e8tre de la section \"query\" La fonction getQueryParams() de l'objet ServerRequestInterface nous retourne un tableau associatif qui contient tous les param\u00e8tres. L'exemple suivant avec la route /livres?page=1 nous montres comment r\u00e9cup\u00e9rer la valeur du param\u00e8tre page public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // R\u00e9cup\u00e9ration des param\u00e8tres dans un tableau // S'il n'y a pas de param\u00e8tre, retourne un tableau vide $queryParams = $request->getQueryParams() ?? []; // R\u00e9cup\u00e9ration de la valeur du param\u00e8tre page $page = $queryParams['page'] ?? 1; //... } Param\u00e8tre dans la route La fonction getAttribute('nomDuParam\u00e8tre', valeurPardefaut) de l'objet ServerRequestInterface nous retourne la valeur du param\u00e8tre demand\u00e9. Quand on d\u00e9fini notre route, les valeurs qui seront d\u00e9fini comme param\u00e8tre sont entour\u00e9es d'accolades. Prenons comme exemple la route /livres/13 qui affichera le livre avec le id 13. Dans notre code la route sera d\u00e9finie comme ceci dans le fichier route.php // Le nom de la classe importe peu, ici c'est la description de la route qui est importante $app->get('/livres/{id}', \\App\\Action\\Book\\BookViewByIdAction::class); Exemple d'utilisation de getAttribute() public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // R\u00e9cup\u00e9ration du param\u00e8tre de route 'id' $id = $request->getAttribute('id', 0); // ... } Param\u00e8tre dans le corps de la requ\u00eate La fonction getQueryParams() de l'objet ServerRequestInterface nous retourne un tableau associatif qui contient tous les param\u00e8tres du corps de la requ\u00eate. Prenons comme exemple une requ\u00eate HTTP de cr\u00e9ation d'un livre qui aurait les valeurs suivantes : { \"genreId\": \"1\", \"titre\": \"Mon livre\", \"isbn\": \"123456789\" } Pour r\u00e9cup\u00e9rer le titre avec getQueryParams() public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // R\u00e9cup\u00e9ration des donn\u00e9es du corps de la requ\u00eate $data = (array)$request->getParsedBody(); // R\u00e9cup\u00e9ration de la valeur de titre $titre = $data['titre'] ?? ''; // ... }","title":"R\u00e9cup\u00e9rer les param\u00e8tres d'une requ\u00eate HTTP"},{"location":"notes_de_cours/slim/recuperer_params/#recuperer-les-parametres-dune-requete-http","text":"On a vu qu'il y a plusieurs m\u00e9thodes pour passer des param\u00e8tres dans une requ\u00eate HTML : dans la section \"query\" de l'url, directement dans l'url et dans le corps (body) de la requ\u00eate. SLIM nous permet de facilement r\u00e9cup\u00e9rer ces donn\u00e9es avec l'objet ServerRequestInterface Cette objet est re\u00e7u en param\u00eatre de la fonction _invoke des classes \"action\" de notre api. public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // Avec la variable $request nous avons acc\u00e8s aux param\u00e8tres // ... }","title":"R\u00e9cup\u00e9rer les param\u00e8tres d'une requ\u00eate HTTP"},{"location":"notes_de_cours/slim/recuperer_params/#parametre-de-la-section-query","text":"La fonction getQueryParams() de l'objet ServerRequestInterface nous retourne un tableau associatif qui contient tous les param\u00e8tres. L'exemple suivant avec la route /livres?page=1 nous montres comment r\u00e9cup\u00e9rer la valeur du param\u00e8tre page public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // R\u00e9cup\u00e9ration des param\u00e8tres dans un tableau // S'il n'y a pas de param\u00e8tre, retourne un tableau vide $queryParams = $request->getQueryParams() ?? []; // R\u00e9cup\u00e9ration de la valeur du param\u00e8tre page $page = $queryParams['page'] ?? 1; //... }","title":"Param\u00e8tre de la section \"query\""},{"location":"notes_de_cours/slim/recuperer_params/#parametre-dans-la-route","text":"La fonction getAttribute('nomDuParam\u00e8tre', valeurPardefaut) de l'objet ServerRequestInterface nous retourne la valeur du param\u00e8tre demand\u00e9. Quand on d\u00e9fini notre route, les valeurs qui seront d\u00e9fini comme param\u00e8tre sont entour\u00e9es d'accolades. Prenons comme exemple la route /livres/13 qui affichera le livre avec le id 13. Dans notre code la route sera d\u00e9finie comme ceci dans le fichier route.php // Le nom de la classe importe peu, ici c'est la description de la route qui est importante $app->get('/livres/{id}', \\App\\Action\\Book\\BookViewByIdAction::class); Exemple d'utilisation de getAttribute() public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // R\u00e9cup\u00e9ration du param\u00e8tre de route 'id' $id = $request->getAttribute('id', 0); // ... }","title":"Param\u00e8tre dans la route"},{"location":"notes_de_cours/slim/recuperer_params/#parametre-dans-le-corps-de-la-requete","text":"La fonction getQueryParams() de l'objet ServerRequestInterface nous retourne un tableau associatif qui contient tous les param\u00e8tres du corps de la requ\u00eate. Prenons comme exemple une requ\u00eate HTTP de cr\u00e9ation d'un livre qui aurait les valeurs suivantes : { \"genreId\": \"1\", \"titre\": \"Mon livre\", \"isbn\": \"123456789\" } Pour r\u00e9cup\u00e9rer le titre avec getQueryParams() public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // R\u00e9cup\u00e9ration des donn\u00e9es du corps de la requ\u00eate $data = (array)$request->getParsedBody(); // R\u00e9cup\u00e9ration de la valeur de titre $titre = $data['titre'] ?? ''; // ... }","title":"Param\u00e8tre dans le corps de la requ\u00eate"}]}